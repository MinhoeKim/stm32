
Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000879c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e0  0800894c  0800894c  0001894c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800912c  0800912c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800912c  0800912c  0001912c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009134  08009134  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009134  08009134  00019134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009138  08009138  00019138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800913c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000048e4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004958  20004958  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bcb5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fde  00000000  00000000  0003bd59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001868  00000000  00000000  0003fd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016b0  00000000  00000000  000415a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028a50  00000000  00000000  00042c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cfa3  00000000  00000000  0006b6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed01d  00000000  00000000  00088643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00175660  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e6c  00000000  00000000  001756b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008934 	.word	0x08008934

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08008934 	.word	0x08008934

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80005ac:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <DWT_Delay_us+0x40>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80005b2:	f003 f821 	bl	80035f8 <HAL_RCC_GetHCLKFreq>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a0b      	ldr	r2, [pc, #44]	; (80005e8 <DWT_Delay_us+0x44>)
 80005ba:	fba2 2303 	umull	r2, r3, r2, r3
 80005be:	0c9b      	lsrs	r3, r3, #18
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	fb02 f303 	mul.w	r3, r2, r3
 80005c6:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80005c8:	bf00      	nop
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <DWT_Delay_us+0x40>)
 80005cc:	685a      	ldr	r2, [r3, #4]
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	1ad2      	subs	r2, r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d3f8      	bcc.n	80005ca <DWT_Delay_us+0x26>
}
 80005d8:	bf00      	nop
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	e0001000 	.word	0xe0001000
 80005e8:	431bde83 	.word	0x431bde83

080005ec <SMprintf>:


extern const Cmd_tbl cmd_ctbl[];
char str_buff[512];
void SMprintf(const char *format,...)
{
 80005ec:	b40f      	push	{r0, r1, r2, r3}
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b082      	sub	sp, #8
 80005f2:	af00      	add	r7, sp, #0
	va_list args;
	char *str;


	str=str_buff;
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <SMprintf+0x40>)
 80005f6:	607b      	str	r3, [r7, #4]
	va_start(args,format);
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	603b      	str	r3, [r7, #0]
	vsprintf(str,format,args);
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	6939      	ldr	r1, [r7, #16]
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f007 f8be 	bl	8007784 <vsiprintf>
	va_end(args);
	HAL_UART_Transmit(&huart3,(unsigned char*)str,strlen(str),10);
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff fdf1 	bl	80001f0 <strlen>
 800060e:	4603      	mov	r3, r0
 8000610:	b29a      	uxth	r2, r3
 8000612:	230a      	movs	r3, #10
 8000614:	6879      	ldr	r1, [r7, #4]
 8000616:	4806      	ldr	r0, [pc, #24]	; (8000630 <SMprintf+0x44>)
 8000618:	f004 faab 	bl	8004b72 <HAL_UART_Transmit>
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000626:	b004      	add	sp, #16
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000090 	.word	0x20000090
 8000630:	20000644 	.word	0x20000644

08000634 <ktolower>:

int8u ktolower(int8u c)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
	if(c>='A'&& c <='Z')
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2b40      	cmp	r3, #64	; 0x40
 8000642:	d905      	bls.n	8000650 <ktolower+0x1c>
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	2b5a      	cmp	r3, #90	; 0x5a
 8000648:	d802      	bhi.n	8000650 <ktolower+0x1c>
		c-='A'-'a';
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	3320      	adds	r3, #32
 800064e:	71fb      	strb	r3, [r7, #7]
	return(c);
 8000650:	79fb      	ldrb	r3, [r7, #7]
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <kstrncmp>:
//Discription : compare strings with length
//output : 1) s1!= s2 : 1
//		2)s1==s2 : 0

int kstrncmp(char *s1,char *s2,int len)
{
 800065e:	b480      	push	{r7}
 8000660:	b085      	sub	sp, #20
 8000662:	af00      	add	r7, sp, #0
 8000664:	60f8      	str	r0, [r7, #12]
 8000666:	60b9      	str	r1, [r7, #8]
 8000668:	607a      	str	r2, [r7, #4]
	if(s1 == s2) return(0);
 800066a:	68fa      	ldr	r2, [r7, #12]
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	429a      	cmp	r2, r3
 8000670:	d115      	bne.n	800069e <kstrncmp+0x40>
 8000672:	2300      	movs	r3, #0
 8000674:	e01b      	b.n	80006ae <kstrncmp+0x50>
	while(len--){
		if(*s1++ != *s2++)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	1c5a      	adds	r2, r3, #1
 800067a:	60fa      	str	r2, [r7, #12]
 800067c:	781a      	ldrb	r2, [r3, #0]
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	1c59      	adds	r1, r3, #1
 8000682:	60b9      	str	r1, [r7, #8]
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	429a      	cmp	r2, r3
 8000688:	d001      	beq.n	800068e <kstrncmp+0x30>
		{
			return(1);
 800068a:	2301      	movs	r3, #1
 800068c:	e00f      	b.n	80006ae <kstrncmp+0x50>
		}
		if(*s1 == '\0' && *s2 == '\0')
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d103      	bne.n	800069e <kstrncmp+0x40>
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d005      	beq.n	80006aa <kstrncmp+0x4c>
	while(len--){
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	1e5a      	subs	r2, r3, #1
 80006a2:	607a      	str	r2, [r7, #4]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d1e6      	bne.n	8000676 <kstrncmp+0x18>
 80006a8:	e000      	b.n	80006ac <kstrncmp+0x4e>
		{
			break;
 80006aa:	bf00      	nop
		}
	}
	return(0);
 80006ac:	2300      	movs	r3, #0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <atoh>:


int atoh(char *s)
{
 80006ba:	b4b0      	push	{r4, r5, r7}
 80006bc:	b083      	sub	sp, #12
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
	register int i,n;

	for(n = i = 0 ; s[i] != '\0' ; i++)
 80006c2:	2500      	movs	r5, #0
 80006c4:	462c      	mov	r4, r5
 80006c6:	e042      	b.n	800074e <atoh+0x94>
	{
		if(s[i] >='0' && s[i] <='9')
 80006c8:	462a      	mov	r2, r5
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b2f      	cmp	r3, #47	; 0x2f
 80006d2:	d90e      	bls.n	80006f2 <atoh+0x38>
 80006d4:	462a      	mov	r2, r5
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4413      	add	r3, r2
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b39      	cmp	r3, #57	; 0x39
 80006de:	d808      	bhi.n	80006f2 <atoh+0x38>
			n = 16*n+s[i] - '0';
 80006e0:	0123      	lsls	r3, r4, #4
 80006e2:	4629      	mov	r1, r5
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	440a      	add	r2, r1
 80006e8:	7812      	ldrb	r2, [r2, #0]
 80006ea:	4413      	add	r3, r2
 80006ec:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 80006f0:	e02c      	b.n	800074c <atoh+0x92>
		else if(s[i]>='a'&&s[i]<'f')
 80006f2:	462a      	mov	r2, r5
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4413      	add	r3, r2
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b60      	cmp	r3, #96	; 0x60
 80006fc:	d90e      	bls.n	800071c <atoh+0x62>
 80006fe:	462a      	mov	r2, r5
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4413      	add	r3, r2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b65      	cmp	r3, #101	; 0x65
 8000708:	d808      	bhi.n	800071c <atoh+0x62>
			n = 16*n+s[i] - 'a'+10 ;
 800070a:	0123      	lsls	r3, r4, #4
 800070c:	4629      	mov	r1, r5
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	440a      	add	r2, r1
 8000712:	7812      	ldrb	r2, [r2, #0]
 8000714:	4413      	add	r3, r2
 8000716:	f1a3 0457 	sub.w	r4, r3, #87	; 0x57
 800071a:	e017      	b.n	800074c <atoh+0x92>
		else if(s[i]>='A'&& s[i] <='F')
 800071c:	462a      	mov	r2, r5
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b40      	cmp	r3, #64	; 0x40
 8000726:	d90e      	bls.n	8000746 <atoh+0x8c>
 8000728:	462a      	mov	r2, r5
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b46      	cmp	r3, #70	; 0x46
 8000732:	d808      	bhi.n	8000746 <atoh+0x8c>
			n = 16*n + s[i] - 'A'+10;
 8000734:	0123      	lsls	r3, r4, #4
 8000736:	4629      	mov	r1, r5
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	440a      	add	r2, r1
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	4413      	add	r3, r2
 8000740:	f1a3 0437 	sub.w	r4, r3, #55	; 0x37
 8000744:	e002      	b.n	800074c <atoh+0x92>
		else
			return(-1);
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
 800074a:	e007      	b.n	800075c <atoh+0xa2>
	for(n = i = 0 ; s[i] != '\0' ; i++)
 800074c:	3501      	adds	r5, #1
 800074e:	462a      	mov	r2, r5
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4413      	add	r3, r2
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d1b6      	bne.n	80006c8 <atoh+0xe>
	}
	return (n);
 800075a:	4623      	mov	r3, r4
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	bcb0      	pop	{r4, r5, r7}
 8000764:	4770      	bx	lr

08000766 <get_char_os>:
// 함수:USART에서 1개의 CHAR 를 읽어 오는 함수
// input: Uart3 Queue
// output :: c[0] Uart3에서 읽은 char

char get_char_os(char c[])
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		if(!Uart3_Is_Empty())
 800076e:	f000 fe73 	bl	8001458 <Uart3_Is_Empty>
 8000772:	4603      	mov	r3, r0
 8000774:	f083 0301 	eor.w	r3, r3, #1
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d007      	beq.n	800078e <get_char_os+0x28>
		{
			c[0] = Uart3_DeQueue();
 800077e:	f000 fe55 	bl	800142c <Uart3_DeQueue>
 8000782:	4603      	mov	r3, r0
 8000784:	b2da      	uxtb	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	701a      	strb	r2, [r3, #0]
			return YES;
 800078a:	2301      	movs	r3, #1
 800078c:	e003      	b.n	8000796 <get_char_os+0x30>
		}
		else
		{
			osDelay(50);
 800078e:	2032      	movs	r0, #50	; 0x32
 8000790:	f005 fd91 	bl	80062b6 <osDelay>
		if(!Uart3_Is_Empty())
 8000794:	e7eb      	b.n	800076e <get_char_os+0x8>
			continue;
		}
	}
	return(1);
}
 8000796:	4618      	mov	r0, r3
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <bfm_msg_mon>:

//char tbuf[5],omon_buf[80];
//int  onch_no = 0;

int bfm_msg_mon(int argc,char *argv[])
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
	printf("bfmok");
 80007aa:	4804      	ldr	r0, [pc, #16]	; (80007bc <bfm_msg_mon+0x1c>)
 80007ac:	f7ff ff1e 	bl	80005ec <SMprintf>
	return(1);
 80007b0:	2301      	movs	r3, #1
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	0800894c 	.word	0x0800894c

080007c0 <get_nstring>:
	}
	return(1);
}

int get_nstring(char buf[])
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b087      	sub	sp, #28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	int i;
	int8u c;
	char rxchar[1];
	int8u tbuf[2];

	tbuf[1] = '\0';
 80007c8:	2300      	movs	r3, #0
 80007ca:	737b      	strb	r3, [r7, #13]

	for (i=0 ; i<20 ; i++)
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	e007      	b.n	80007e2 <get_nstring+0x22>
	{
		buf[i] = '\0';
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	4413      	add	r3, r2
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]
	for (i=0 ; i<20 ; i++)
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	3301      	adds	r3, #1
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	2b13      	cmp	r3, #19
 80007e6:	ddf4      	ble.n	80007d2 <get_nstring+0x12>
	}
	for(i=0; i <20;){
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	e043      	b.n	8000876 <get_nstring+0xb6>

		while(get_char_os(rxchar)==0);
 80007ee:	bf00      	nop
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ffb6 	bl	8000766 <get_char_os>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d0f7      	beq.n	80007f0 <get_nstring+0x30>
		c=rxchar[0];
 8000800:	7c3b      	ldrb	r3, [r7, #16]
 8000802:	74fb      	strb	r3, [r7, #19]
			if(( c == '\n')||(c == '\r'))
 8000804:	7cfb      	ldrb	r3, [r7, #19]
 8000806:	2b0a      	cmp	r3, #10
 8000808:	d038      	beq.n	800087c <get_nstring+0xbc>
 800080a:	7cfb      	ldrb	r3, [r7, #19]
 800080c:	2b0d      	cmp	r3, #13
 800080e:	d035      	beq.n	800087c <get_nstring+0xbc>
			{
				break;
			}
			if(c== 0x8)
 8000810:	7cfb      	ldrb	r3, [r7, #19]
 8000812:	2b08      	cmp	r3, #8
 8000814:	d120      	bne.n	8000858 <get_nstring+0x98>
			{
				if(i>0)
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	2b00      	cmp	r3, #0
 800081a:	dd2c      	ble.n	8000876 <get_nstring+0xb6>
				{
					tbuf[0] = 0x8; printf((char*)tbuf);
 800081c:	2308      	movs	r3, #8
 800081e:	733b      	strb	r3, [r7, #12]
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fee1 	bl	80005ec <SMprintf>
					tbuf[0] = ' '; printf((char*)tbuf);
 800082a:	2320      	movs	r3, #32
 800082c:	733b      	strb	r3, [r7, #12]
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff feda 	bl	80005ec <SMprintf>
					tbuf[0] = 0x8; printf((char*)tbuf);
 8000838:	2308      	movs	r3, #8
 800083a:	733b      	strb	r3, [r7, #12]
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fed3 	bl	80005ec <SMprintf>
					i--; buf[i] = '\0';
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	3b01      	subs	r3, #1
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
 8000856:	e00e      	b.n	8000876 <get_nstring+0xb6>
				}
			}
			else{
					tbuf[0] = c; printf((char*)tbuf);
 8000858:	7cfb      	ldrb	r3, [r7, #19]
 800085a:	733b      	strb	r3, [r7, #12]
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fec3 	bl	80005ec <SMprintf>
					buf[i] = c;
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	4413      	add	r3, r2
 800086c:	7cfa      	ldrb	r2, [r7, #19]
 800086e:	701a      	strb	r2, [r3, #0]
					i++;
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	3301      	adds	r3, #1
 8000874:	617b      	str	r3, [r7, #20]
	for(i=0; i <20;){
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	2b13      	cmp	r3, #19
 800087a:	ddb8      	ble.n	80007ee <get_nstring+0x2e>
			}
	}
	for( i=0; i <20; i++){
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	e016      	b.n	80008b0 <get_nstring+0xf0>
		if(buf[i] == '\0'){
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	4413      	add	r3, r2
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d101      	bne.n	8000892 <get_nstring+0xd2>
			return(i);
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	e012      	b.n	80008b8 <get_nstring+0xf8>
		}
		buf[i] = ktolower(buf[i]);
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	4413      	add	r3, r2
 8000898:	7819      	ldrb	r1, [r3, #0]
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	18d4      	adds	r4, r2, r3
 80008a0:	4608      	mov	r0, r1
 80008a2:	f7ff fec7 	bl	8000634 <ktolower>
 80008a6:	4603      	mov	r3, r0
 80008a8:	7023      	strb	r3, [r4, #0]
	for( i=0; i <20; i++){
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	3301      	adds	r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	2b13      	cmp	r3, #19
 80008b4:	dde5      	ble.n	8000882 <get_nstring+0xc2>
	}
	return(i);
 80008b6:	697b      	ldr	r3, [r7, #20]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	371c      	adds	r7, #28
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd90      	pop	{r4, r7, pc}

080008c0 <get_io_number>:

char get_io_number(unsigned int *retval)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08c      	sub	sp, #48	; 0x30
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	byte c;
	char tmp[20];
	char flag;
	int no,i;

	*retval = 0;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
	flag = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	no = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28

	if(get_nstring(tmp)!=0){
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff6f 	bl	80007c0 <get_nstring>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d04e      	beq.n	8000986 <get_io_number+0xc6>
		for(i=0; i<32 ; i++){
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
 80008ec:	e048      	b.n	8000980 <get_io_number+0xc0>
			c = tmp[i];
 80008ee:	f107 020c 	add.w	r2, r7, #12
 80008f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f4:	4413      	add	r3, r2
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			if(c == '\0'){
 80008fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000900:	2b00      	cmp	r3, #0
 8000902:	d103      	bne.n	800090c <get_io_number+0x4c>
				flag = '\n';
 8000904:	230a      	movs	r3, #10
 8000906:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800090a:	e03c      	b.n	8000986 <get_io_number+0xc6>
			}
			if((c=='/')||(c =='.')||(c==']')||(c==0x1a)||(c=='y')||(c=='n'))
 800090c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000910:	2b2f      	cmp	r3, #47	; 0x2f
 8000912:	d013      	beq.n	800093c <get_io_number+0x7c>
 8000914:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000918:	2b2e      	cmp	r3, #46	; 0x2e
 800091a:	d00f      	beq.n	800093c <get_io_number+0x7c>
 800091c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000920:	2b5d      	cmp	r3, #93	; 0x5d
 8000922:	d00b      	beq.n	800093c <get_io_number+0x7c>
 8000924:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000928:	2b1a      	cmp	r3, #26
 800092a:	d007      	beq.n	800093c <get_io_number+0x7c>
 800092c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000930:	2b79      	cmp	r3, #121	; 0x79
 8000932:	d003      	beq.n	800093c <get_io_number+0x7c>
 8000934:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000938:	2b6e      	cmp	r3, #110	; 0x6e
 800093a:	d104      	bne.n	8000946 <get_io_number+0x86>
			{
				flag =c;
 800093c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000940:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8000944:	e01f      	b.n	8000986 <get_io_number+0xc6>
			}
			if((c>='0')&&(c <='9'))
 8000946:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800094a:	2b2f      	cmp	r3, #47	; 0x2f
 800094c:	d914      	bls.n	8000978 <get_io_number+0xb8>
 800094e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000952:	2b39      	cmp	r3, #57	; 0x39
 8000954:	d810      	bhi.n	8000978 <get_io_number+0xb8>
			{
				*retval = *retval *0x10 + c -'0';
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	011a      	lsls	r2, r3, #4
 800095c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000960:	4413      	add	r3, r2
 8000962:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	601a      	str	r2, [r3, #0]
				no++;
 800096a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800096c:	3301      	adds	r3, #1
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
		for(i=0; i<32 ; i++){
 8000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000972:	3301      	adds	r3, #1
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
 8000976:	e003      	b.n	8000980 <get_io_number+0xc0>
			}
			else
			{
				flag = ' ';
 8000978:	2320      	movs	r3, #32
 800097a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800097e:	e002      	b.n	8000986 <get_io_number+0xc6>
		for(i=0; i<32 ; i++){
 8000980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000982:	2b1f      	cmp	r3, #31
 8000984:	ddb3      	ble.n	80008ee <get_io_number+0x2e>

			}
		}
	}
	if(no == 0)
 8000986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000988:	2b00      	cmp	r3, #0
 800098a:	d103      	bne.n	8000994 <get_io_number+0xd4>
	{
		*retval = 0xffffffff;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f04f 32ff 	mov.w	r2, #4294967295
 8000992:	601a      	str	r2, [r3, #0]
	}
	return(flag);
 8000994:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f

}
 8000998:	4618      	mov	r0, r3
 800099a:	3730      	adds	r7, #48	; 0x30
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <cmdcpy>:

void cmdcpy(char *s1, char *s2)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
	while(1)
	{
		if(*s2 == 0)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d008      	beq.n	80009c4 <cmdcpy+0x24>
		{
			break;
		}
		*s1++ = *s2++;
 80009b2:	683a      	ldr	r2, [r7, #0]
 80009b4:	1c53      	adds	r3, r2, #1
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	1c59      	adds	r1, r3, #1
 80009bc:	6079      	str	r1, [r7, #4]
 80009be:	7812      	ldrb	r2, [r2, #0]
 80009c0:	701a      	strb	r2, [r3, #0]
		if(*s2 == 0)
 80009c2:	e7f2      	b.n	80009aa <cmdcpy+0xa>
			break;
 80009c4:	bf00      	nop
	}
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <fill>:

int fill(int8u *sp, int8u c, int n)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b085      	sub	sp, #20
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	60f8      	str	r0, [r7, #12]
 80009da:	460b      	mov	r3, r1
 80009dc:	607a      	str	r2, [r7, #4]
 80009de:	72fb      	strb	r3, [r7, #11]
	while(--n>=0)
 80009e0:	e004      	b.n	80009ec <fill+0x1a>
		{
			*sp++ = c;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	1c5a      	adds	r2, r3, #1
 80009e6:	60fa      	str	r2, [r7, #12]
 80009e8:	7afa      	ldrb	r2, [r7, #11]
 80009ea:	701a      	strb	r2, [r3, #0]
	while(--n>=0)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	daf4      	bge.n	80009e2 <fill+0x10>
		}
		return(YES);
 80009f8:	2301      	movs	r3, #1
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <kstrlen>:

int kstrlen(char *s)
{
 8000a06:	b490      	push	{r4, r7}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
	register int cnt;

	cnt = 0;
 8000a0e:	2400      	movs	r4, #0
	while(*s++)
 8000a10:	e000      	b.n	8000a14 <kstrlen+0xe>
	{
		cnt++;
 8000a12:	3401      	adds	r4, #1
	while(*s++)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	1c5a      	adds	r2, r3, #1
 8000a18:	607a      	str	r2, [r7, #4]
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d1f8      	bne.n	8000a12 <kstrlen+0xc>
	}
	return(cnt);
 8000a20:	4623      	mov	r3, r4
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc90      	pop	{r4, r7}
 8000a2a:	4770      	bx	lr

08000a2c <parse_string>:

int parse_string(unsigned char *s,char *argv[])
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b0c5      	sub	sp, #276	; 0x114
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a3a:	6018      	str	r0, [r3, #0]
 8000a3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a40:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000a44:	6019      	str	r1, [r3, #0]
		int end;
	}arg_tok[32];

	unsigned char *cptr;
	register int i;
	int argc = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	cptr = s;
 8000a4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a50:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	for(i = 0, cptr = s; i< kstrlen((char*)s);i++,cptr++)
 8000a5a:	2400      	movs	r4, #0
 8000a5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a60:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000a6a:	e04a      	b.n	8000b02 <parse_string+0xd6>
	{
		if(*cptr !=' '&& *cptr !='\t')
 8000a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b20      	cmp	r3, #32
 8000a74:	d03f      	beq.n	8000af6 <parse_string+0xca>
 8000a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b09      	cmp	r3, #9
 8000a7e:	d03a      	beq.n	8000af6 <parse_string+0xca>
		{
			if(i==0 || *(cptr-1)==' '|| *(cptr-1) == '\t')
 8000a80:	2c00      	cmp	r4, #0
 8000a82:	d00b      	beq.n	8000a9c <parse_string+0x70>
 8000a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b20      	cmp	r3, #32
 8000a8e:	d005      	beq.n	8000a9c <parse_string+0x70>
 8000a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a94:	3b01      	subs	r3, #1
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b09      	cmp	r3, #9
 8000a9a:	d107      	bne.n	8000aac <parse_string+0x80>
			{
				arg_tok[argc].start = i;
 8000a9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000aa4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000aa8:	f843 4032 	str.w	r4, [r3, r2, lsl #3]

			}

			if(*(cptr+1)==' '||i == (kstrlen((char*)s)-1)||*(cptr+1) == '\t')
 8000aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b20      	cmp	r3, #32
 8000ab6:	d010      	beq.n	8000ada <parse_string+0xae>
 8000ab8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000abc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ac0:	6818      	ldr	r0, [r3, #0]
 8000ac2:	f7ff ffa0 	bl	8000a06 <kstrlen>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	429c      	cmp	r4, r3
 8000acc:	d005      	beq.n	8000ada <parse_string+0xae>
 8000ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b09      	cmp	r3, #9
 8000ad8:	d10d      	bne.n	8000af6 <parse_string+0xca>
			{
				arg_tok[argc].end = i;
 8000ada:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ade:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8000ae2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	4413      	add	r3, r2
 8000aea:	605c      	str	r4, [r3, #4]
				argc++;
 8000aec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000af0:	3301      	adds	r3, #1
 8000af2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	for(i = 0, cptr = s; i< kstrlen((char*)s);i++,cptr++)
 8000af6:	3401      	adds	r4, #1
 8000af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000afc:	3301      	adds	r3, #1
 8000afe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000b02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b06:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b0a:	6818      	ldr	r0, [r3, #0]
 8000b0c:	f7ff ff7b 	bl	8000a06 <kstrlen>
 8000b10:	4603      	mov	r3, r0
 8000b12:	429c      	cmp	r4, r3
 8000b14:	dbaa      	blt.n	8000a6c <parse_string+0x40>
			}
		}
	}

	if(!argv)
 8000b16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b1a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <parse_string+0xfe>
		return(argc);
 8000b24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000b28:	e02e      	b.n	8000b88 <parse_string+0x15c>

	for(i = 0; i<argc ; i++)
 8000b2a:	2400      	movs	r4, #0
 8000b2c:	e026      	b.n	8000b7c <parse_string+0x150>
	{
		argv[i] = (char*)s + arg_tok[i].start;
 8000b2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000b36:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4623      	mov	r3, r4
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b44:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000b48:	6812      	ldr	r2, [r2, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b50:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000b54:	6812      	ldr	r2, [r2, #0]
 8000b56:	440a      	add	r2, r1
 8000b58:	601a      	str	r2, [r3, #0]
		*(s+arg_tok[i].end+1) = 0;
 8000b5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b5e:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8000b62:	00e3      	lsls	r3, r4, #3
 8000b64:	4413      	add	r3, r2
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b6e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000b72:	6812      	ldr	r2, [r2, #0]
 8000b74:	4413      	add	r3, r2
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]
	for(i = 0; i<argc ; i++)
 8000b7a:	3401      	adds	r4, #1
 8000b7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000b80:	429c      	cmp	r4, r3
 8000b82:	dbd4      	blt.n	8000b2e <parse_string+0x102>
	}
	return(argc);
 8000b84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd90      	pop	{r4, r7, pc}
	...

08000b94 <onl_monitor>:

char tbuf[5],omon_buf[80];
int  onch_no = 0;

void onl_monitor(unsigned char c)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b09c      	sub	sp, #112	; 0x70
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
	Cmd_tbl *cmd_tblp;
	int i,argcl;
	char *argvl[20] = {0};
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	2250      	movs	r2, #80	; 0x50
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f006 fda0 	bl	80076ec <memset>
	char tbuf[5];

	tbuf[1] = '\0';
 8000bac:	2300      	movs	r3, #0
 8000bae:	737b      	strb	r3, [r7, #13]
	if(c == '\r'|| c =='\a')
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	2b0d      	cmp	r3, #13
 8000bb4:	d002      	beq.n	8000bbc <onl_monitor+0x28>
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	2b07      	cmp	r3, #7
 8000bba:	d168      	bne.n	8000c8e <onl_monitor+0xfa>
	{
		if(onch_no == 0)
 8000bbc:	4b4f      	ldr	r3, [pc, #316]	; (8000cfc <onl_monitor+0x168>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d103      	bne.n	8000bcc <onl_monitor+0x38>
		{
			printf("\n\rARM> ");
 8000bc4:	484e      	ldr	r0, [pc, #312]	; (8000d00 <onl_monitor+0x16c>)
 8000bc6:	f7ff fd11 	bl	80005ec <SMprintf>
		if(onch_no == 0)
 8000bca:	e093      	b.n	8000cf4 <onl_monitor+0x160>
		}
		else
		{
			for(i=0; i<20; i++)
 8000bcc:	2300      	movs	r3, #0
 8000bce:	66bb      	str	r3, [r7, #104]	; 0x68
 8000bd0:	e016      	b.n	8000c00 <onl_monitor+0x6c>
			{
				if(omon_buf[i] == '\0')
 8000bd2:	4a4c      	ldr	r2, [pc, #304]	; (8000d04 <onl_monitor+0x170>)
 8000bd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bd6:	4413      	add	r3, r2
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d014      	beq.n	8000c08 <onl_monitor+0x74>
				{
					break;
				}
				omon_buf[i] = ktolower(omon_buf[i]);
 8000bde:	4a49      	ldr	r2, [pc, #292]	; (8000d04 <onl_monitor+0x170>)
 8000be0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000be2:	4413      	add	r3, r2
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fd24 	bl	8000634 <ktolower>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4a44      	ldr	r2, [pc, #272]	; (8000d04 <onl_monitor+0x170>)
 8000bf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bf4:	4413      	add	r3, r2
 8000bf6:	460a      	mov	r2, r1
 8000bf8:	701a      	strb	r2, [r3, #0]
			for(i=0; i<20; i++)
 8000bfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8000c00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c02:	2b13      	cmp	r3, #19
 8000c04:	dde5      	ble.n	8000bd2 <onl_monitor+0x3e>
 8000c06:	e000      	b.n	8000c0a <onl_monitor+0x76>
					break;
 8000c08:	bf00      	nop
			}

			argcl = parse_string((int8u*)omon_buf,argvl);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	483c      	ldr	r0, [pc, #240]	; (8000d04 <onl_monitor+0x170>)
 8000c12:	f7ff ff0b 	bl	8000a2c <parse_string>
 8000c16:	6678      	str	r0, [r7, #100]	; 0x64
			cmd_tblp = (Cmd_tbl*)cmd_ctbl;
 8000c18:	4b3b      	ldr	r3, [pc, #236]	; (8000d08 <onl_monitor+0x174>)
 8000c1a:	66fb      	str	r3, [r7, #108]	; 0x6c

			while(cmd_tblp->str)
 8000c1c:	e023      	b.n	8000c66 <onl_monitor+0xd2>
			{
				if(!kstrncmp(argvl[0],cmd_tblp->str,10))
 8000c1e:	6978      	ldr	r0, [r7, #20]
 8000c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	220a      	movs	r2, #10
 8000c26:	4619      	mov	r1, r3
 8000c28:	f7ff fd19 	bl	800065e <kstrncmp>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d116      	bne.n	8000c60 <onl_monitor+0xcc>
				{
					printf("\n\r");
 8000c32:	4836      	ldr	r0, [pc, #216]	; (8000d0c <onl_monitor+0x178>)
 8000c34:	f7ff fcda 	bl	80005ec <SMprintf>
					(cmd_tblp->func)(argcl,argvl);
 8000c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f107 0214 	add.w	r2, r7, #20
 8000c40:	4611      	mov	r1, r2
 8000c42:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000c44:	4798      	blx	r3
					if(cmd_tblp->func == bfm_msg_mon)
 8000c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	4a31      	ldr	r2, [pc, #196]	; (8000d10 <onl_monitor+0x17c>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d103      	bne.n	8000c58 <onl_monitor+0xc4>
					{
						printf("\r\nBF loading...");
 8000c50:	4830      	ldr	r0, [pc, #192]	; (8000d14 <onl_monitor+0x180>)
 8000c52:	f7ff fccb 	bl	80005ec <SMprintf>
					}
					else
					{
						printf("\n\rARM> ");
					}
					break;
 8000c56:	e00a      	b.n	8000c6e <onl_monitor+0xda>
						printf("\n\rARM> ");
 8000c58:	4829      	ldr	r0, [pc, #164]	; (8000d00 <onl_monitor+0x16c>)
 8000c5a:	f7ff fcc7 	bl	80005ec <SMprintf>
					break;
 8000c5e:	e006      	b.n	8000c6e <onl_monitor+0xda>
				}
				cmd_tblp++;
 8000c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c62:	330c      	adds	r3, #12
 8000c64:	66fb      	str	r3, [r7, #108]	; 0x6c
			while(cmd_tblp->str)
 8000c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d1d7      	bne.n	8000c1e <onl_monitor+0x8a>
			}
			if(!cmd_tblp->str)
 8000c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d102      	bne.n	8000c7c <onl_monitor+0xe8>
			{
				printf("\n\rARM> Command not found !!\n\r");
 8000c76:	4828      	ldr	r0, [pc, #160]	; (8000d18 <onl_monitor+0x184>)
 8000c78:	f7ff fcb8 	bl	80005ec <SMprintf>
			}
			fill((int8u*)omon_buf,0,80);
 8000c7c:	2250      	movs	r2, #80	; 0x50
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4820      	ldr	r0, [pc, #128]	; (8000d04 <onl_monitor+0x170>)
 8000c82:	f7ff fea6 	bl	80009d2 <fill>
			onch_no = 0;
 8000c86:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <onl_monitor+0x168>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
		if(onch_no == 0)
 8000c8c:	e032      	b.n	8000cf4 <onl_monitor+0x160>
	}



	else{
		if(c==0x8){
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	2b08      	cmp	r3, #8
 8000c92:	d11b      	bne.n	8000ccc <onl_monitor+0x138>
			if(onch_no>0){
 8000c94:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <onl_monitor+0x168>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	dd2b      	ble.n	8000cf4 <onl_monitor+0x160>
				tbuf[0] = 0x8;
 8000c9c:	2308      	movs	r3, #8
 8000c9e:	733b      	strb	r3, [r7, #12]
				tbuf[1] = ' ';
 8000ca0:	2320      	movs	r3, #32
 8000ca2:	737b      	strb	r3, [r7, #13]
				tbuf[2] = 0x8;
 8000ca4:	2308      	movs	r3, #8
 8000ca6:	73bb      	strb	r3, [r7, #14]
				tbuf[3] = '\0';
 8000ca8:	2300      	movs	r3, #0
 8000caa:	73fb      	strb	r3, [r7, #15]
				printf((char*)tbuf);
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fc9b 	bl	80005ec <SMprintf>
				onch_no--;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <onl_monitor+0x168>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	4a0f      	ldr	r2, [pc, #60]	; (8000cfc <onl_monitor+0x168>)
 8000cbe:	6013      	str	r3, [r2, #0]
				omon_buf[onch_no]='\0';
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <onl_monitor+0x168>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0f      	ldr	r2, [pc, #60]	; (8000d04 <onl_monitor+0x170>)
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	54d1      	strb	r1, [r2, r3]
			printf((char*)tbuf);
			omon_buf[onch_no] = c;
			onch_no++;
		}
	}
}
 8000cca:	e013      	b.n	8000cf4 <onl_monitor+0x160>
			tbuf[0] = c;
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	733b      	strb	r3, [r7, #12]
			tbuf[1] = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	737b      	strb	r3, [r7, #13]
			printf((char*)tbuf);
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fc87 	bl	80005ec <SMprintf>
			omon_buf[onch_no] = c;
 8000cde:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <onl_monitor+0x168>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4908      	ldr	r1, [pc, #32]	; (8000d04 <onl_monitor+0x170>)
 8000ce4:	79fa      	ldrb	r2, [r7, #7]
 8000ce6:	54ca      	strb	r2, [r1, r3]
			onch_no++;
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <onl_monitor+0x168>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	3301      	adds	r3, #1
 8000cee:	4a03      	ldr	r2, [pc, #12]	; (8000cfc <onl_monitor+0x168>)
 8000cf0:	6013      	str	r3, [r2, #0]
}
 8000cf2:	e7ff      	b.n	8000cf4 <onl_monitor+0x160>
 8000cf4:	bf00      	nop
 8000cf6:	3770      	adds	r7, #112	; 0x70
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200002e0 	.word	0x200002e0
 8000d00:	080089a0 	.word	0x080089a0
 8000d04:	20000290 	.word	0x20000290
 8000d08:	08008ee0 	.word	0x08008ee0
 8000d0c:	080089a8 	.word	0x080089a8
 8000d10:	080007a1 	.word	0x080007a1
 8000d14:	080089ac 	.word	0x080089ac
 8000d18:	080089bc 	.word	0x080089bc

08000d1c <monitor_chelp>:

int monitor_chelp(int argc,char *argv[])
{
 8000d1c:	b5b0      	push	{r4, r5, r7, lr}
 8000d1e:	b098      	sub	sp, #96	; 0x60
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
	Cmd_tbl *cmd_tblp;
	char help_buf[80];

	printf("      [COMMAND HELP LIST]\n\r");
 8000d26:	4820      	ldr	r0, [pc, #128]	; (8000da8 <monitor_chelp+0x8c>)
 8000d28:	f7ff fc60 	bl	80005ec <SMprintf>
	printf("----------------------------------------------\n\r");
 8000d2c:	481f      	ldr	r0, [pc, #124]	; (8000dac <monitor_chelp+0x90>)
 8000d2e:	f7ff fc5d 	bl	80005ec <SMprintf>
	cmd_tblp = (Cmd_tbl*)cmd_ctbl;
 8000d32:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <monitor_chelp+0x94>)
 8000d34:	65fb      	str	r3, [r7, #92]	; 0x5c

	while(cmd_tblp->str){
 8000d36:	e02a      	b.n	8000d8e <monitor_chelp+0x72>
		strcpy(help_buf,"       :                            \n\r");
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	4a1d      	ldr	r2, [pc, #116]	; (8000db4 <monitor_chelp+0x98>)
 8000d3e:	461c      	mov	r4, r3
 8000d40:	4615      	mov	r5, r2
 8000d42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d4a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d4e:	6020      	str	r0, [r4, #0]
 8000d50:	3404      	adds	r4, #4
 8000d52:	8021      	strh	r1, [r4, #0]
 8000d54:	3402      	adds	r4, #2
 8000d56:	0c0b      	lsrs	r3, r1, #16
 8000d58:	7023      	strb	r3, [r4, #0]
		cmdcpy((char*)&help_buf[1],(char*)cmd_tblp->str);
 8000d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	3301      	adds	r3, #1
 8000d64:	4611      	mov	r1, r2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fe1a 	bl	80009a0 <cmdcpy>
		cmdcpy((char*)&help_buf[17],(char*)cmd_tblp->useage);
 8000d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	3311      	adds	r3, #17
 8000d76:	4611      	mov	r1, r2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fe11 	bl	80009a0 <cmdcpy>
		printf((char*)help_buf);
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fc32 	bl	80005ec <SMprintf>
		cmd_tblp++;
 8000d88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d8a:	330c      	adds	r3, #12
 8000d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
	while(cmd_tblp->str){
 8000d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1d0      	bne.n	8000d38 <monitor_chelp+0x1c>
	}
	printf((char*)"--------------------------------------------\n\r");
 8000d96:	4808      	ldr	r0, [pc, #32]	; (8000db8 <monitor_chelp+0x9c>)
 8000d98:	f7ff fc28 	bl	80005ec <SMprintf>
	return(YES);
 8000d9c:	2301      	movs	r3, #1
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3760      	adds	r7, #96	; 0x60
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bdb0      	pop	{r4, r5, r7, pc}
 8000da6:	bf00      	nop
 8000da8:	080089dc 	.word	0x080089dc
 8000dac:	080089f8 	.word	0x080089f8
 8000db0:	08008ee0 	.word	0x08008ee0
 8000db4:	08008a2c 	.word	0x08008a2c
 8000db8:	08008a54 	.word	0x08008a54

08000dbc <monitor_lshelp>:

int monitor_lshelp(int argc, char *argv[])
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b098      	sub	sp, #96	; 0x60
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
	Cmd_tbl *cmd_tblp;
	char help_buf[80], i = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	printf("       [MONITOR COMMAND LIST]\n\r");
 8000dcc:	4820      	ldr	r0, [pc, #128]	; (8000e50 <monitor_lshelp+0x94>)
 8000dce:	f7ff fc0d 	bl	80005ec <SMprintf>
	printf("----------------------------------------\n\r");
 8000dd2:	4820      	ldr	r0, [pc, #128]	; (8000e54 <monitor_lshelp+0x98>)
 8000dd4:	f7ff fc0a 	bl	80005ec <SMprintf>
	cmd_tblp = (Cmd_tbl*)cmd_ctbl;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <monitor_lshelp+0x9c>)
 8000dda:	65fb      	str	r3, [r7, #92]	; 0x5c

	while(cmd_tblp->str){
 8000ddc:	e02b      	b.n	8000e36 <monitor_lshelp+0x7a>
		strcpy(help_buf,"        ");
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	4a1e      	ldr	r2, [pc, #120]	; (8000e5c <monitor_lshelp+0xa0>)
 8000de4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000de6:	c303      	stmia	r3!, {r0, r1}
 8000de8:	701a      	strb	r2, [r3, #0]
		cmdcpy((char*)&help_buf[1],(char*)cmd_tblp->str);
 8000dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	3301      	adds	r3, #1
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fdd2 	bl	80009a0 <cmdcpy>
		printf((char*)help_buf);
 8000dfc:	f107 0308 	add.w	r3, r7, #8
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fbf3 	bl	80005ec <SMprintf>
		i++,cmd_tblp++;
 8000e06:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8000e10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e12:	330c      	adds	r3, #12
 8000e14:	65fb      	str	r3, [r7, #92]	; 0x5c
		if((i%0x5)==0){
 8000e16:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <monitor_lshelp+0xa4>)
 8000e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8000e20:	0899      	lsrs	r1, r3, #2
 8000e22:	460b      	mov	r3, r1
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	440b      	add	r3, r1
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <monitor_lshelp+0x7a>
			printf("\r\n");
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <monitor_lshelp+0xa8>)
 8000e32:	f7ff fbdb 	bl	80005ec <SMprintf>
	while(cmd_tblp->str){
 8000e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1cf      	bne.n	8000dde <monitor_lshelp+0x22>
		}
	}
	printf((char*)"\r\n--------------------------------------------\n\r");
 8000e3e:	480a      	ldr	r0, [pc, #40]	; (8000e68 <monitor_lshelp+0xac>)
 8000e40:	f7ff fbd4 	bl	80005ec <SMprintf>
	return(YES);
 8000e44:	2301      	movs	r3, #1
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3760      	adds	r7, #96	; 0x60
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	08008a84 	.word	0x08008a84
 8000e54:	08008aa4 	.word	0x08008aa4
 8000e58:	08008ee0 	.word	0x08008ee0
 8000e5c:	08008ad0 	.word	0x08008ad0
 8000e60:	cccccccd 	.word	0xcccccccd
 8000e64:	08008adc 	.word	0x08008adc
 8000e68:	08008ae0 	.word	0x08008ae0

08000e6c <prt_hexbnb>:

void prt_hexbnb(int n, int8u *hex)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b090      	sub	sp, #64	; 0x40
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
	byte buf[50],c,i;

	i = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	while(n--)
 8000e7c:	e047      	b.n	8000f0e <prt_hexbnb+0xa2>
	{
		c = *hex / 16;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	091b      	lsrs	r3, r3, #4
 8000e84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(c > 9)
 8000e88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e8c:	2b09      	cmp	r3, #9
 8000e8e:	d904      	bls.n	8000e9a <prt_hexbnb+0x2e>
		{
			c +=7;
 8000e90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e94:	3307      	adds	r3, #7
 8000e96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
		buf[i++] = c + '0';
 8000e9a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000eaa:	3330      	adds	r3, #48	; 0x30
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8000eb2:	443b      	add	r3, r7
 8000eb4:	f803 2c34 	strb.w	r2, [r3, #-52]
		c = (*hex & 0xf);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	f003 030f 	and.w	r3, r3, #15
 8000ec0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(c>9)
 8000ec4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ec8:	2b09      	cmp	r3, #9
 8000eca:	d904      	bls.n	8000ed6 <prt_hexbnb+0x6a>
		{
			c+=7;
 8000ecc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ed0:	3307      	adds	r3, #7
 8000ed2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
		buf[i++] = c+'0';
 8000ed6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000eda:	1c5a      	adds	r2, r3, #1
 8000edc:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ee6:	3330      	adds	r3, #48	; 0x30
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8000eee:	443b      	add	r3, r7
 8000ef0:	f803 2c34 	strb.w	r2, [r3, #-52]
		buf[i++]=' ';
 8000ef4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000ef8:	1c5a      	adds	r2, r3, #1
 8000efa:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8000efe:	3340      	adds	r3, #64	; 0x40
 8000f00:	443b      	add	r3, r7
 8000f02:	2220      	movs	r2, #32
 8000f04:	f803 2c34 	strb.w	r2, [r3, #-52]
		hex++;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	603b      	str	r3, [r7, #0]
	while(n--)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	1e5a      	subs	r2, r3, #1
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1b2      	bne.n	8000e7e <prt_hexbnb+0x12>
	}
	buf[i++] = ' ';
 8000f18:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8000f22:	3340      	adds	r3, #64	; 0x40
 8000f24:	443b      	add	r3, r7
 8000f26:	2220      	movs	r2, #32
 8000f28:	f803 2c34 	strb.w	r2, [r3, #-52]
	buf[i] = '\0';
 8000f2c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000f30:	3340      	adds	r3, #64	; 0x40
 8000f32:	443b      	add	r3, r7
 8000f34:	2200      	movs	r2, #0
 8000f36:	f803 2c34 	strb.w	r2, [r3, #-52]
	printf((char*)buf);
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fb54 	bl	80005ec <SMprintf>
}
 8000f44:	bf00      	nop
 8000f46:	3740      	adds	r7, #64	; 0x40
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <dsp_mem>:
		{0,0,0}

};

int dsp_mem(int argc,char*argv[])
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08e      	sub	sp, #56	; 0x38
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
	int8u tbuf[17];
	int8u *ST,*AT;
	char flag;
	int i,j;
	unsigned int start;
	flag = 1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(argc==1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d105      	bne.n	8000f6e <dsp_mem+0x22>
	{
		printf("address error!\r\n");
 8000f62:	483a      	ldr	r0, [pc, #232]	; (800104c <dsp_mem+0x100>)
 8000f64:	f7ff fb42 	bl	80005ec <SMprintf>
		flag = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}
	if(flag == 1)
 8000f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d162      	bne.n	800103c <dsp_mem+0xf0>
	{
		start = atoh(argv[1]);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fb9c 	bl	80006ba <atoh>
 8000f82:	4603      	mov	r3, r0
 8000f84:	623b      	str	r3, [r7, #32]
		if(start >0xffffffff)
		{
			printf("address error!!!!!\r\n");
			return(1);
		}
		tbuf[16] = '\0';
 8000f86:	2300      	movs	r3, #0
 8000f88:	773b      	strb	r3, [r7, #28]
		printf("\r\n\n");
 8000f8a:	4831      	ldr	r0, [pc, #196]	; (8001050 <dsp_mem+0x104>)
 8000f8c:	f7ff fb2e 	bl	80005ec <SMprintf>
		printf("Address 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\r\n");
 8000f90:	4830      	ldr	r0, [pc, #192]	; (8001054 <dsp_mem+0x108>)
 8000f92:	f7ff fb2b 	bl	80005ec <SMprintf>
		printf("====== ================== ==================== \r");
 8000f96:	4830      	ldr	r0, [pc, #192]	; (8001058 <dsp_mem+0x10c>)
 8000f98:	f7ff fb28 	bl	80005ec <SMprintf>
		AT = ST = (int8u*)start;
 8000f9c:	6a3b      	ldr	r3, [r7, #32]
 8000f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8000fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fa2:	633b      	str	r3, [r7, #48]	; 0x30
		for( j =0 ; j <16 ; j++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa8:	e045      	b.n	8001036 <dsp_mem+0xea>
		{
			printf("\r\n%08x ",start);
 8000faa:	6a39      	ldr	r1, [r7, #32]
 8000fac:	482b      	ldr	r0, [pc, #172]	; (800105c <dsp_mem+0x110>)
 8000fae:	f7ff fb1d 	bl	80005ec <SMprintf>
			prt_hexbnb(8,ST);
 8000fb2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fb4:	2008      	movs	r0, #8
 8000fb6:	f7ff ff59 	bl	8000e6c <prt_hexbnb>
			printf("- ");
 8000fba:	4829      	ldr	r0, [pc, #164]	; (8001060 <dsp_mem+0x114>)
 8000fbc:	f7ff fb16 	bl	80005ec <SMprintf>
			ST+=8;
 8000fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc2:	3308      	adds	r3, #8
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
			prt_hexbnb(8,ST);
 8000fc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fc8:	2008      	movs	r0, #8
 8000fca:	f7ff ff4f 	bl	8000e6c <prt_hexbnb>
			ST+=8;
 8000fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd0:	3308      	adds	r3, #8
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
			for(i=0;i<16;i++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fd8:	e01c      	b.n	8001014 <dsp_mem+0xc8>
			{
				if(*AT>=0x20 && *AT<0x7f)
 8000fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b1f      	cmp	r3, #31
 8000fe0:	d90c      	bls.n	8000ffc <dsp_mem+0xb0>
 8000fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b7e      	cmp	r3, #126	; 0x7e
 8000fe8:	d808      	bhi.n	8000ffc <dsp_mem+0xb0>
				{
					tbuf[i] = *AT;
 8000fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fec:	7819      	ldrb	r1, [r3, #0]
 8000fee:	f107 020c 	add.w	r2, r7, #12
 8000ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff4:	4413      	add	r3, r2
 8000ff6:	460a      	mov	r2, r1
 8000ff8:	701a      	strb	r2, [r3, #0]
 8000ffa:	e005      	b.n	8001008 <dsp_mem+0xbc>
				}
				else
				{
					tbuf[i] = '.';
 8000ffc:	f107 020c 	add.w	r2, r7, #12
 8001000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001002:	4413      	add	r3, r2
 8001004:	222e      	movs	r2, #46	; 0x2e
 8001006:	701a      	strb	r2, [r3, #0]
				}
				AT++;
 8001008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800100a:	3301      	adds	r3, #1
 800100c:	633b      	str	r3, [r7, #48]	; 0x30
			for(i=0;i<16;i++)
 800100e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001010:	3301      	adds	r3, #1
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
 8001014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001016:	2b0f      	cmp	r3, #15
 8001018:	dddf      	ble.n	8000fda <dsp_mem+0x8e>
			}
			printf(" |");
 800101a:	4812      	ldr	r0, [pc, #72]	; (8001064 <dsp_mem+0x118>)
 800101c:	f7ff fae6 	bl	80005ec <SMprintf>
			printf((char*)tbuf);
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fae1 	bl	80005ec <SMprintf>
			start +=16;
 800102a:	6a3b      	ldr	r3, [r7, #32]
 800102c:	3310      	adds	r3, #16
 800102e:	623b      	str	r3, [r7, #32]
		for( j =0 ; j <16 ; j++)
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	3301      	adds	r3, #1
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	2b0f      	cmp	r3, #15
 800103a:	ddb6      	ble.n	8000faa <dsp_mem+0x5e>

		}
	}
	printf("\r\n\n*");
 800103c:	480a      	ldr	r0, [pc, #40]	; (8001068 <dsp_mem+0x11c>)
 800103e:	f7ff fad5 	bl	80005ec <SMprintf>
	return(1);
 8001042:	2301      	movs	r3, #1
}
 8001044:	4618      	mov	r0, r3
 8001046:	3738      	adds	r7, #56	; 0x38
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	08008bd4 	.word	0x08008bd4
 8001050:	08008be8 	.word	0x08008be8
 8001054:	08008bec 	.word	0x08008bec
 8001058:	08008c28 	.word	0x08008c28
 800105c:	08008c5c 	.word	0x08008c5c
 8001060:	08008c64 	.word	0x08008c64
 8001064:	08008c68 	.word	0x08008c68
 8001068:	08008c6c 	.word	0x08008c6c

0800106c <chg_mem>:

int chg_mem(int argc,char *argv[])
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
	int8u *ST;
	char flag,ret;
	u32 start;
	unsigned int data;

	flag = 1;
 8001076:	2301      	movs	r3, #1
 8001078:	74fb      	strb	r3, [r7, #19]

	if(argc == 1){
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d11e      	bne.n	80010be <chg_mem+0x52>
		printf("Address: ");
 8001080:	4846      	ldr	r0, [pc, #280]	; (800119c <chg_mem+0x130>)
 8001082:	f7ff fab3 	bl	80005ec <SMprintf>
		start = atoh(argv[1]);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	3304      	adds	r3, #4
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fb14 	bl	80006ba <atoh>
 8001092:	4603      	mov	r3, r0
 8001094:	60fb      	str	r3, [r7, #12]
		ret = get_io_number(&start);
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fc10 	bl	80008c0 <get_io_number>
 80010a0:	4603      	mov	r3, r0
 80010a2:	74bb      	strb	r3, [r7, #18]
		if((ret !='\n')||(start == 0xffffffff))
 80010a4:	7cbb      	ldrb	r3, [r7, #18]
 80010a6:	2b0a      	cmp	r3, #10
 80010a8:	d103      	bne.n	80010b2 <chg_mem+0x46>
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b0:	d11a      	bne.n	80010e8 <chg_mem+0x7c>
		{
			printf("address error!\r\n");
 80010b2:	483b      	ldr	r0, [pc, #236]	; (80011a0 <chg_mem+0x134>)
 80010b4:	f7ff fa9a 	bl	80005ec <SMprintf>
			flag = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	74fb      	strb	r3, [r7, #19]
 80010bc:	e014      	b.n	80010e8 <chg_mem+0x7c>
		}
	}
	else{
		start = atoh(argv[1]);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	3304      	adds	r3, #4
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff faf8 	bl	80006ba <atoh>
 80010ca:	4603      	mov	r3, r0
 80010cc:	60fb      	str	r3, [r7, #12]
		if(!((start>=0x20010000)&&(start<=0x200bffff)))
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4a34      	ldr	r2, [pc, #208]	; (80011a4 <chg_mem+0x138>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d903      	bls.n	80010de <chg_mem+0x72>
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	4a33      	ldr	r2, [pc, #204]	; (80011a8 <chg_mem+0x13c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d904      	bls.n	80010e8 <chg_mem+0x7c>
		{
			printf("address error!\r\n");
 80010de:	4830      	ldr	r0, [pc, #192]	; (80011a0 <chg_mem+0x134>)
 80010e0:	f7ff fa84 	bl	80005ec <SMprintf>
			return YES;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e055      	b.n	8001194 <chg_mem+0x128>
		}
	}
	if(flag ==1)
 80010e8:	7cfb      	ldrb	r3, [r7, #19]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d151      	bne.n	8001192 <chg_mem+0x126>
	{
		ST = (int8u*)start;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	617b      	str	r3, [r7, #20]
		printf("\r");
 80010f2:	482e      	ldr	r0, [pc, #184]	; (80011ac <chg_mem+0x140>)
 80010f4:	f7ff fa7a 	bl	80005ec <SMprintf>
		while(1)
		{
			printf("\r\n%08x %02x - ",start,*ST);
 80010f8:	68f9      	ldr	r1, [r7, #12]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	482b      	ldr	r0, [pc, #172]	; (80011b0 <chg_mem+0x144>)
 8001102:	f7ff fa73 	bl	80005ec <SMprintf>
			ret = get_io_number(&data);
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fbd8 	bl	80008c0 <get_io_number>
 8001110:	4603      	mov	r3, r0
 8001112:	74bb      	strb	r3, [r7, #18]
			if(ret == '/')
 8001114:	7cbb      	ldrb	r3, [r7, #18]
 8001116:	2b2f      	cmp	r3, #47	; 0x2f
 8001118:	d103      	bne.n	8001122 <chg_mem+0xb6>
			{
				printf("\r\n\n");
 800111a:	4826      	ldr	r0, [pc, #152]	; (80011b4 <chg_mem+0x148>)
 800111c:	f7ff fa66 	bl	80005ec <SMprintf>
				break;
 8001120:	e037      	b.n	8001192 <chg_mem+0x126>
			}
			else if((ret==']')||(ret==0x1a))
 8001122:	7cbb      	ldrb	r3, [r7, #18]
 8001124:	2b5d      	cmp	r3, #93	; 0x5d
 8001126:	d002      	beq.n	800112e <chg_mem+0xc2>
 8001128:	7cbb      	ldrb	r3, [r7, #18]
 800112a:	2b1a      	cmp	r3, #26
 800112c:	d106      	bne.n	800113c <chg_mem+0xd0>
			{
				start--;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	3b01      	subs	r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
				ST--;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	3b01      	subs	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
				continue;
 800113a:	e029      	b.n	8001190 <chg_mem+0x124>
			}
			else if(ret=='.')
 800113c:	7cbb      	ldrb	r3, [r7, #18]
 800113e:	2b2e      	cmp	r3, #46	; 0x2e
 8001140:	d025      	beq.n	800118e <chg_mem+0x122>
			{
				continue;
			}
			else if(ret == 0)
 8001142:	7cbb      	ldrb	r3, [r7, #18]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d106      	bne.n	8001156 <chg_mem+0xea>
			{
				start++;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	3301      	adds	r3, #1
 800114c:	60fb      	str	r3, [r7, #12]
				ST++;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3301      	adds	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	e7d0      	b.n	80010f8 <chg_mem+0x8c>
			}
			else if(ret == '\n')
 8001156:	7cbb      	ldrb	r3, [r7, #18]
 8001158:	2b0a      	cmp	r3, #10
 800115a:	d10a      	bne.n	8001172 <chg_mem+0x106>
			{
				*ST = data;
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	701a      	strb	r2, [r3, #0]
				start++;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3301      	adds	r3, #1
 8001168:	60fb      	str	r3, [r7, #12]
				ST++;
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	3301      	adds	r3, #1
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	e7c2      	b.n	80010f8 <chg_mem+0x8c>
			}
			else if(data > 0xff)
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	2bff      	cmp	r3, #255	; 0xff
 8001176:	d903      	bls.n	8001180 <chg_mem+0x114>
			{
				printf("\r\nDATA Input error!\r\n");
 8001178:	480f      	ldr	r0, [pc, #60]	; (80011b8 <chg_mem+0x14c>)
 800117a:	f7ff fa37 	bl	80005ec <SMprintf>
 800117e:	e7bb      	b.n	80010f8 <chg_mem+0x8c>
			}
			else
			{
				start++;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3301      	adds	r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
				ST++;
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	3301      	adds	r3, #1
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	e7b4      	b.n	80010f8 <chg_mem+0x8c>
				continue;
 800118e:	bf00      	nop
			printf("\r\n%08x %02x - ",start,*ST);
 8001190:	e7b2      	b.n	80010f8 <chg_mem+0x8c>
			}
		}

	}
	return(1);
 8001192:	2301      	movs	r3, #1


}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	08008c74 	.word	0x08008c74
 80011a0:	08008bd4 	.word	0x08008bd4
 80011a4:	2000ffff 	.word	0x2000ffff
 80011a8:	200bffff 	.word	0x200bffff
 80011ac:	08008c80 	.word	0x08008c80
 80011b0:	08008c84 	.word	0x08008c84
 80011b4:	08008be8 	.word	0x08008be8
 80011b8:	08008c94 	.word	0x08008c94

080011bc <DHT11>:

int DHT11(int argc,char *argv[])
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
	printf("dht11 humidity & temperature \r\n");
 80011c6:	4806      	ldr	r0, [pc, #24]	; (80011e0 <DHT11+0x24>)
 80011c8:	f7ff fa10 	bl	80005ec <SMprintf>
	DWT_Delay_Init();
 80011cc:	f000 fa62 	bl	8001694 <DWT_Delay_Init>
	while(1)
	{
		read_dht11_dat();
 80011d0:	f000 f956 	bl	8001480 <read_dht11_dat>
		osDelay(1000);
 80011d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d8:	f005 f86d 	bl	80062b6 <osDelay>
		read_dht11_dat();
 80011dc:	e7f8      	b.n	80011d0 <DHT11+0x14>
 80011de:	bf00      	nop
 80011e0:	08008cac 	.word	0x08008cac

080011e4 <delayMicroseconds>:
	return 0;
}


void delayMicroseconds(int time)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
		DWT_Delay_us(time);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f9d8 	bl	80005a4 <DWT_Delay_us>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <AlarmSet>:
	uint32_t count=us*12;
	while(count--);
}

int AlarmSet(int argc,char *argv[])
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
	unsigned int hour, minute, second;

	if(argc == 4)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b04      	cmp	r3, #4
 800120a:	d14b      	bne.n	80012a4 <AlarmSet+0xa8>
	{
		sscanf(argv[1],"%x",&hour);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	3304      	adds	r3, #4
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f107 0210 	add.w	r2, r7, #16
 8001216:	4927      	ldr	r1, [pc, #156]	; (80012b4 <AlarmSet+0xb8>)
 8001218:	4618      	mov	r0, r3
 800121a:	f006 fa6f 	bl	80076fc <siscanf>
		sscanf(argv[2],"%x",&minute);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	3308      	adds	r3, #8
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f107 020c 	add.w	r2, r7, #12
 8001228:	4922      	ldr	r1, [pc, #136]	; (80012b4 <AlarmSet+0xb8>)
 800122a:	4618      	mov	r0, r3
 800122c:	f006 fa66 	bl	80076fc <siscanf>
		sscanf(argv[3],"%x",&second);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	330c      	adds	r3, #12
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f107 0208 	add.w	r2, r7, #8
 800123a:	491e      	ldr	r1, [pc, #120]	; (80012b4 <AlarmSet+0xb8>)
 800123c:	4618      	mov	r0, r3
 800123e:	f006 fa5d 	bl	80076fc <siscanf>
		if(!((hour >=0)&&(hour <=0x23)))
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	2b23      	cmp	r3, #35	; 0x23
 8001246:	d906      	bls.n	8001256 <AlarmSet+0x5a>
		{
			printf("Invalid Hour = %x\r\n",hour);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4619      	mov	r1, r3
 800124c:	481a      	ldr	r0, [pc, #104]	; (80012b8 <AlarmSet+0xbc>)
 800124e:	f7ff f9cd 	bl	80005ec <SMprintf>
			return 0;
 8001252:	2300      	movs	r3, #0
 8001254:	e02a      	b.n	80012ac <AlarmSet+0xb0>
		}
		else if(!((minute >=0)&&(minute <=0x59)))
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2b59      	cmp	r3, #89	; 0x59
 800125a:	d906      	bls.n	800126a <AlarmSet+0x6e>
		{
			printf("Invalid Minute = %x\r\n",minute);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4619      	mov	r1, r3
 8001260:	4816      	ldr	r0, [pc, #88]	; (80012bc <AlarmSet+0xc0>)
 8001262:	f7ff f9c3 	bl	80005ec <SMprintf>
			return 0;
 8001266:	2300      	movs	r3, #0
 8001268:	e020      	b.n	80012ac <AlarmSet+0xb0>
		}
		else if(!((second>=0)&&(second <= 0x59)))
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	2b59      	cmp	r3, #89	; 0x59
 800126e:	d906      	bls.n	800127e <AlarmSet+0x82>
		{
			printf("Invalid Second = %x\r\n",minute);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4619      	mov	r1, r3
 8001274:	4812      	ldr	r0, [pc, #72]	; (80012c0 <AlarmSet+0xc4>)
 8001276:	f7ff f9b9 	bl	80005ec <SMprintf>
			return 0;
 800127a:	2300      	movs	r3, #0
 800127c:	e016      	b.n	80012ac <AlarmSet+0xb0>
		}
		set_alarm(hour,minute,second);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	b2d1      	uxtb	r1, r2
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fdde 	bl	8001e4c <set_alarm>
		printf("set Alarm %x:%x:%x\r\n",hour,minute,second);
 8001290:	6939      	ldr	r1, [r7, #16]
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	480b      	ldr	r0, [pc, #44]	; (80012c4 <AlarmSet+0xc8>)
 8001298:	f7ff f9a8 	bl	80005ec <SMprintf>
		unsigned char AlarmFlag;
		AlarmFlag = 0x00;
 800129c:	2300      	movs	r3, #0
 800129e:	75fb      	strb	r3, [r7, #23]
	else
	{
		printf("useage: setalarm hour minute second\r\n");
		return 0;
	}
	return 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	e003      	b.n	80012ac <AlarmSet+0xb0>
		printf("useage: setalarm hour minute second\r\n");
 80012a4:	4808      	ldr	r0, [pc, #32]	; (80012c8 <AlarmSet+0xcc>)
 80012a6:	f7ff f9a1 	bl	80005ec <SMprintf>
		return 0;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	08008ccc 	.word	0x08008ccc
 80012b8:	08008cd0 	.word	0x08008cd0
 80012bc:	08008ce4 	.word	0x08008ce4
 80012c0:	08008cfc 	.word	0x08008cfc
 80012c4:	08008d14 	.word	0x08008d14
 80012c8:	08008d2c 	.word	0x08008d2c

080012cc <SETTime>:

int SETTime(int argc, char *argv[])
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08e      	sub	sp, #56	; 0x38
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
	unsigned hour, minute, second;

	char buffer[30];

	if(argc ==4)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d145      	bne.n	8001368 <SETTime+0x9c>
	{
		sscanf(argv[1],"%x",&hour);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	3304      	adds	r3, #4
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80012e6:	4924      	ldr	r1, [pc, #144]	; (8001378 <SETTime+0xac>)
 80012e8:	4618      	mov	r0, r3
 80012ea:	f006 fa07 	bl	80076fc <siscanf>
		sscanf(argv[2],"%x",&minute);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	3308      	adds	r3, #8
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80012f8:	491f      	ldr	r1, [pc, #124]	; (8001378 <SETTime+0xac>)
 80012fa:	4618      	mov	r0, r3
 80012fc:	f006 f9fe 	bl	80076fc <siscanf>
		sscanf(argv[3],"%x",&second);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	330c      	adds	r3, #12
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800130a:	491b      	ldr	r1, [pc, #108]	; (8001378 <SETTime+0xac>)
 800130c:	4618      	mov	r0, r3
 800130e:	f006 f9f5 	bl	80076fc <siscanf>
		if(!((hour >=0)&&(hour <=0x23)))
 8001312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001314:	2b23      	cmp	r3, #35	; 0x23
 8001316:	d906      	bls.n	8001326 <SETTime+0x5a>
		{
			printf("Invalid Hour = %x\r\n",hour);
 8001318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800131a:	4619      	mov	r1, r3
 800131c:	4817      	ldr	r0, [pc, #92]	; (800137c <SETTime+0xb0>)
 800131e:	f7ff f965 	bl	80005ec <SMprintf>
			return 0;
 8001322:	2300      	movs	r3, #0
 8001324:	e023      	b.n	800136e <SETTime+0xa2>
		}
		else if(!((minute >=0)&&(minute <=0x59)))
 8001326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001328:	2b59      	cmp	r3, #89	; 0x59
 800132a:	d906      	bls.n	800133a <SETTime+0x6e>
		{
			printf("Invalid Minute = %x\r\n",minute);
 800132c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132e:	4619      	mov	r1, r3
 8001330:	4813      	ldr	r0, [pc, #76]	; (8001380 <SETTime+0xb4>)
 8001332:	f7ff f95b 	bl	80005ec <SMprintf>
			return 0;
 8001336:	2300      	movs	r3, #0
 8001338:	e019      	b.n	800136e <SETTime+0xa2>
		}
		else if(!((second>=0)&&(second <= 0x59)))
 800133a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133c:	2b59      	cmp	r3, #89	; 0x59
 800133e:	d906      	bls.n	800134e <SETTime+0x82>
		{
			printf("Invalid Second = %x\r\n",minute);
 8001340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001342:	4619      	mov	r1, r3
 8001344:	480f      	ldr	r0, [pc, #60]	; (8001384 <SETTime+0xb8>)
 8001346:	f7ff f951 	bl	80005ec <SMprintf>
			return 0;
 800134a:	2300      	movs	r3, #0
 800134c:	e00f      	b.n	800136e <SETTime+0xa2>
		}
		set_time_only(hour,minute,second);
 800134e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001350:	b2db      	uxtb	r3, r3
 8001352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001354:	b2d1      	uxtb	r1, r2
 8001356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f000 fd4e 	bl	8001dfc <set_time_only>
		//printf("set Time %d:%d:%d\r\n",hour, minute, second);
		printf("complete\r\n");
 8001360:	4809      	ldr	r0, [pc, #36]	; (8001388 <SETTime+0xbc>)
 8001362:	f7ff f943 	bl	80005ec <SMprintf>
 8001366:	e002      	b.n	800136e <SETTime+0xa2>
		//return 0;
	}
	else
	{
		printf("useage: settime hour minute second\r\n");
 8001368:	4808      	ldr	r0, [pc, #32]	; (800138c <SETTime+0xc0>)
 800136a:	f7ff f93f 	bl	80005ec <SMprintf>
		//return 0;
	}
	//return 0;
}
 800136e:	4618      	mov	r0, r3
 8001370:	3738      	adds	r7, #56	; 0x38
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	08008ccc 	.word	0x08008ccc
 800137c:	08008cd0 	.word	0x08008cd0
 8001380:	08008ce4 	.word	0x08008ce4
 8001384:	08008cfc 	.word	0x08008cfc
 8001388:	08008d54 	.word	0x08008d54
 800138c:	08008d60 	.word	0x08008d60

08001390 <DisTime>:

int DisTime(int argc,char *argv[])
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0; i<10 ; i++)
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	e004      	b.n	80013aa <DisTime+0x1a>
	{
		get_time();
 80013a0:	f000 fd8a 	bl	8001eb8 <get_time>
	for(i = 0; i<10 ; i++)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	3301      	adds	r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2b09      	cmp	r3, #9
 80013ae:	ddf7      	ble.n	80013a0 <DisTime+0x10>
		//osDelay(1000);
	}
	return 0;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <RTCTest>:

int RTCTest(int argc,char *argv[])
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	6039      	str	r1, [r7, #0]
	rtc_test();
 80013c4:	f000 fda2 	bl	8001f0c <rtc_test>
	return 0;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <Uart3_EnQueue>:
uint16_t u3_rx_buffer[U3_BUFFER_SIZE];
uint32_t u3_rx_point_head = 0;
uint32_t u3_rx_point_tail = 0;

void Uart3_EnQueue(uint16_t data)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	80fb      	strh	r3, [r7, #6]
	u3_rx_buffer[u3_rx_point_head] = data;
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <Uart3_EnQueue+0x24>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4906      	ldr	r1, [pc, #24]	; (80013fc <Uart3_EnQueue+0x28>)
 80013e4:	88fa      	ldrh	r2, [r7, #6]
 80013e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	u3_increase_point_value(&u3_rx_point_head);
 80013ea:	4803      	ldr	r0, [pc, #12]	; (80013f8 <Uart3_EnQueue+0x24>)
 80013ec:	f000 f808 	bl	8001400 <u3_increase_point_value>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200003ac 	.word	0x200003ac
 80013fc:	200002e4 	.word	0x200002e4

08001400 <u3_increase_point_value>:


void u3_increase_point_value(uint32_t * data_p)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	(*data_p)++;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	1c5a      	adds	r2, r3, #1
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	601a      	str	r2, [r3, #0]
	if(U3_BUFFER_SIZE == (*data_p))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b64      	cmp	r3, #100	; 0x64
 8001418:	d102      	bne.n	8001420 <u3_increase_point_value+0x20>
	{
		(*data_p)=0;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
	}
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <Uart3_DeQueue>:


uint16_t Uart3_DeQueue(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
	uint16_t retVal = u3_rx_buffer[u3_rx_point_tail];
 8001432:	4b07      	ldr	r3, [pc, #28]	; (8001450 <Uart3_DeQueue+0x24>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a07      	ldr	r2, [pc, #28]	; (8001454 <Uart3_DeQueue+0x28>)
 8001438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800143c:	80fb      	strh	r3, [r7, #6]
	u3_increase_point_value(&u3_rx_point_tail);
 800143e:	4804      	ldr	r0, [pc, #16]	; (8001450 <Uart3_DeQueue+0x24>)
 8001440:	f7ff ffde 	bl	8001400 <u3_increase_point_value>
	return retVal;
 8001444:	88fb      	ldrh	r3, [r7, #6]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200003b0 	.word	0x200003b0
 8001454:	200002e4 	.word	0x200002e4

08001458 <Uart3_Is_Empty>:

bool Uart3_Is_Empty(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
	if(u3_rx_point_head == u3_rx_point_tail)
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <Uart3_Is_Empty+0x20>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <Uart3_Is_Empty+0x24>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	429a      	cmp	r2, r3
 8001466:	d101      	bne.n	800146c <Uart3_Is_Empty+0x14>
	{
		return TURE;
 8001468:	2301      	movs	r3, #1
 800146a:	e000      	b.n	800146e <Uart3_Is_Empty+0x16>
	}
	return FALSE;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	200003ac 	.word	0x200003ac
 800147c:	200003b0 	.word	0x200003b0

08001480 <read_dht11_dat>:
int dht11_dat[5] = {0,};
unsigned char temp_data[4];
bool temp_flag;

void read_dht11_dat()
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af02      	add	r7, sp, #8
	unsigned char laststate = HIGH;
 8001486:	2301      	movs	r3, #1
 8001488:	71fb      	strb	r3, [r7, #7]
	unsigned char counter = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	71bb      	strb	r3, [r7, #6]
	unsigned char j = 0, i;
 800148e:	2300      	movs	r3, #0
 8001490:	717b      	strb	r3, [r7, #5]
	unsigned char flag = HIGH;
 8001492:	2301      	movs	r3, #1
 8001494:	70fb      	strb	r3, [r7, #3]
	unsigned char state = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	70bb      	strb	r3, [r7, #2]
	float f;
	dht11_dat[0] = dht11_dat[1] = dht11_dat[2] = dht11_dat[3] = dht11_dat[4] = 0;
 800149a:	4b5e      	ldr	r3, [pc, #376]	; (8001614 <read_dht11_dat+0x194>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
 80014a0:	4b5c      	ldr	r3, [pc, #368]	; (8001614 <read_dht11_dat+0x194>)
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	4a5b      	ldr	r2, [pc, #364]	; (8001614 <read_dht11_dat+0x194>)
 80014a6:	60d3      	str	r3, [r2, #12]
 80014a8:	4b5a      	ldr	r3, [pc, #360]	; (8001614 <read_dht11_dat+0x194>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	4a59      	ldr	r2, [pc, #356]	; (8001614 <read_dht11_dat+0x194>)
 80014ae:	6093      	str	r3, [r2, #8]
 80014b0:	4b58      	ldr	r3, [pc, #352]	; (8001614 <read_dht11_dat+0x194>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	4a57      	ldr	r2, [pc, #348]	; (8001614 <read_dht11_dat+0x194>)
 80014b6:	6053      	str	r3, [r2, #4]
 80014b8:	4b56      	ldr	r3, [pc, #344]	; (8001614 <read_dht11_dat+0x194>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4a55      	ldr	r2, [pc, #340]	; (8001614 <read_dht11_dat+0x194>)
 80014be:	6013      	str	r3, [r2, #0]

	Change_GPIOMode(OUTPUT_MODE);
 80014c0:	2001      	movs	r0, #1
 80014c2:	f000 f8b3 	bl	800162c <Change_GPIOMode>
	HAL_GPIO_WritePin(GPIOB,DHTPIN,LOW);
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014cc:	4852      	ldr	r0, [pc, #328]	; (8001618 <read_dht11_dat+0x198>)
 80014ce:	f001 faf9 	bl	8002ac4 <HAL_GPIO_WritePin>
	osDelay(18);
 80014d2:	2012      	movs	r0, #18
 80014d4:	f004 feef 	bl	80062b6 <osDelay>
	HAL_GPIO_WritePin(GPIOB,DHTPIN,HIGH);
 80014d8:	2201      	movs	r2, #1
 80014da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014de:	484e      	ldr	r0, [pc, #312]	; (8001618 <read_dht11_dat+0x198>)
 80014e0:	f001 faf0 	bl	8002ac4 <HAL_GPIO_WritePin>
	delayMicroseconds(40);
 80014e4:	2028      	movs	r0, #40	; 0x28
 80014e6:	f7ff fe7d 	bl	80011e4 <delayMicroseconds>
	Change_GPIOMode(INPUT_MODE);
 80014ea:	2000      	movs	r0, #0
 80014ec:	f000 f89e 	bl	800162c <Change_GPIOMode>
	for(i = 0; i < MAXTIMINGS ; i++)
 80014f0:	2300      	movs	r3, #0
 80014f2:	713b      	strb	r3, [r7, #4]
 80014f4:	e04c      	b.n	8001590 <read_dht11_dat+0x110>
	{
		counter = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	71bb      	strb	r3, [r7, #6]
		while(HAL_GPIO_ReadPin(GPIOB,DHTPIN)==laststate)
 80014fa:	e008      	b.n	800150e <read_dht11_dat+0x8e>
		{
			counter++;
 80014fc:	79bb      	ldrb	r3, [r7, #6]
 80014fe:	3301      	adds	r3, #1
 8001500:	71bb      	strb	r3, [r7, #6]
			delayMicroseconds(1);
 8001502:	2001      	movs	r0, #1
 8001504:	f7ff fe6e 	bl	80011e4 <delayMicroseconds>
			if(counter == 200)
 8001508:	79bb      	ldrb	r3, [r7, #6]
 800150a:	2bc8      	cmp	r3, #200	; 0xc8
 800150c:	d00a      	beq.n	8001524 <read_dht11_dat+0xa4>
		while(HAL_GPIO_ReadPin(GPIOB,DHTPIN)==laststate)
 800150e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001512:	4841      	ldr	r0, [pc, #260]	; (8001618 <read_dht11_dat+0x198>)
 8001514:	f001 fabe 	bl	8002a94 <HAL_GPIO_ReadPin>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	4293      	cmp	r3, r2
 8001520:	d0ec      	beq.n	80014fc <read_dht11_dat+0x7c>
 8001522:	e000      	b.n	8001526 <read_dht11_dat+0xa6>
				break;
 8001524:	bf00      	nop
		}
		laststate = HAL_GPIO_ReadPin(GPIOB,DHTPIN);
 8001526:	f44f 7180 	mov.w	r1, #256	; 0x100
 800152a:	483b      	ldr	r0, [pc, #236]	; (8001618 <read_dht11_dat+0x198>)
 800152c:	f001 fab2 	bl	8002a94 <HAL_GPIO_ReadPin>
 8001530:	4603      	mov	r3, r0
 8001532:	71fb      	strb	r3, [r7, #7]
		if(counter == 200)
 8001534:	79bb      	ldrb	r3, [r7, #6]
 8001536:	2bc8      	cmp	r3, #200	; 0xc8
 8001538:	d02e      	beq.n	8001598 <read_dht11_dat+0x118>
			break; //if while breaked by timer,break for
		if((i>=4)&&(i%2 == 0))
 800153a:	793b      	ldrb	r3, [r7, #4]
 800153c:	2b03      	cmp	r3, #3
 800153e:	d924      	bls.n	800158a <read_dht11_dat+0x10a>
 8001540:	793b      	ldrb	r3, [r7, #4]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d11e      	bne.n	800158a <read_dht11_dat+0x10a>
		{
			dht11_dat[j/8]<<=1;
 800154c:	797b      	ldrb	r3, [r7, #5]
 800154e:	08db      	lsrs	r3, r3, #3
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4611      	mov	r1, r2
 8001554:	4b2f      	ldr	r3, [pc, #188]	; (8001614 <read_dht11_dat+0x194>)
 8001556:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800155a:	4611      	mov	r1, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4a2d      	ldr	r2, [pc, #180]	; (8001614 <read_dht11_dat+0x194>)
 8001560:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			if(counter > 20)dht11_dat[j/8] |=1;
 8001564:	79bb      	ldrb	r3, [r7, #6]
 8001566:	2b14      	cmp	r3, #20
 8001568:	d90c      	bls.n	8001584 <read_dht11_dat+0x104>
 800156a:	797b      	ldrb	r3, [r7, #5]
 800156c:	08db      	lsrs	r3, r3, #3
 800156e:	b2da      	uxtb	r2, r3
 8001570:	4611      	mov	r1, r2
 8001572:	4b28      	ldr	r3, [pc, #160]	; (8001614 <read_dht11_dat+0x194>)
 8001574:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001578:	4611      	mov	r1, r2
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	4a25      	ldr	r2, [pc, #148]	; (8001614 <read_dht11_dat+0x194>)
 8001580:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			j++;
 8001584:	797b      	ldrb	r3, [r7, #5]
 8001586:	3301      	adds	r3, #1
 8001588:	717b      	strb	r3, [r7, #5]
	for(i = 0; i < MAXTIMINGS ; i++)
 800158a:	793b      	ldrb	r3, [r7, #4]
 800158c:	3301      	adds	r3, #1
 800158e:	713b      	strb	r3, [r7, #4]
 8001590:	793b      	ldrb	r3, [r7, #4]
 8001592:	2b52      	cmp	r3, #82	; 0x52
 8001594:	d9af      	bls.n	80014f6 <read_dht11_dat+0x76>
 8001596:	e000      	b.n	800159a <read_dht11_dat+0x11a>
			break; //if while breaked by timer,break for
 8001598:	bf00      	nop
		}
	}
	if((j>=40)||(dht11_dat[4] == ((dht11_dat[0]+dht11_dat[1]+dht11_dat[2]+dht11_dat[3])&0xff)))
 800159a:	797b      	ldrb	r3, [r7, #5]
 800159c:	2b27      	cmp	r3, #39	; 0x27
 800159e:	d80f      	bhi.n	80015c0 <read_dht11_dat+0x140>
 80015a0:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <read_dht11_dat+0x194>)
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <read_dht11_dat+0x194>)
 80015a6:	6819      	ldr	r1, [r3, #0]
 80015a8:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <read_dht11_dat+0x194>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	4419      	add	r1, r3
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <read_dht11_dat+0x194>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	4419      	add	r1, r3
 80015b4:	4b17      	ldr	r3, [pc, #92]	; (8001614 <read_dht11_dat+0x194>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	440b      	add	r3, r1
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	429a      	cmp	r2, r3
 80015be:	d121      	bne.n	8001604 <read_dht11_dat+0x184>
	{
		printf("humidity = %d.%d %% Temperature = %d.%d *C\n\r",dht11_dat[0],dht11_dat[1],dht11_dat[2],dht11_dat[3]);
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <read_dht11_dat+0x194>)
 80015c2:	6819      	ldr	r1, [r3, #0]
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <read_dht11_dat+0x194>)
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <read_dht11_dat+0x194>)
 80015ca:	6898      	ldr	r0, [r3, #8]
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <read_dht11_dat+0x194>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	4603      	mov	r3, r0
 80015d4:	4811      	ldr	r0, [pc, #68]	; (800161c <read_dht11_dat+0x19c>)
 80015d6:	f7ff f809 	bl	80005ec <SMprintf>
		for(i=0;i<4;i++)
 80015da:	2300      	movs	r3, #0
 80015dc:	713b      	strb	r3, [r7, #4]
 80015de:	e00d      	b.n	80015fc <read_dht11_dat+0x17c>
		{
			temp_data[i] = dht11_dat[i];
 80015e0:	793b      	ldrb	r3, [r7, #4]
 80015e2:	4a0c      	ldr	r2, [pc, #48]	; (8001614 <read_dht11_dat+0x194>)
 80015e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015e8:	793b      	ldrb	r3, [r7, #4]
 80015ea:	b2d1      	uxtb	r1, r2
 80015ec:	4a0c      	ldr	r2, [pc, #48]	; (8001620 <read_dht11_dat+0x1a0>)
 80015ee:	54d1      	strb	r1, [r2, r3]
			temp_flag = HIGH;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <read_dht11_dat+0x1a4>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]
		for(i=0;i<4;i++)
 80015f6:	793b      	ldrb	r3, [r7, #4]
 80015f8:	3301      	adds	r3, #1
 80015fa:	713b      	strb	r3, [r7, #4]
 80015fc:	793b      	ldrb	r3, [r7, #4]
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d9ee      	bls.n	80015e0 <read_dht11_dat+0x160>
	{
 8001602:	e003      	b.n	800160c <read_dht11_dat+0x18c>
		}
	}
	else
	{
		printf("Data get failed\n\r");
 8001604:	4808      	ldr	r0, [pc, #32]	; (8001628 <read_dht11_dat+0x1a8>)
 8001606:	f7fe fff1 	bl	80005ec <SMprintf>
	}
}
 800160a:	bf00      	nop
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200003b4 	.word	0x200003b4
 8001618:	40020400 	.word	0x40020400
 800161c:	08008d88 	.word	0x08008d88
 8001620:	200003c8 	.word	0x200003c8
 8001624:	200003cc 	.word	0x200003cc
 8001628:	08008db8 	.word	0x08008db8

0800162c <Change_GPIOMode>:

void Change_GPIOMode(int mode)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]

	if(mode == INPUT_MODE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10f      	bne.n	800166a <Change_GPIOMode+0x3e>
	{
		GPIO_InitStruct.Pin = DHTPIN;
 800164a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800164e:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001650:	2300      	movs	r3, #0
 8001652:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOB,&GPIO_InitStruct);
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	4619      	mov	r1, r3
 8001662:	480b      	ldr	r0, [pc, #44]	; (8001690 <Change_GPIOMode+0x64>)
 8001664:	f001 f86a 	bl	800273c <HAL_GPIO_Init>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOB,&GPIO_InitStruct);
	}
}
 8001668:	e00e      	b.n	8001688 <Change_GPIOMode+0x5c>
		GPIO_InitStruct.Pin = DHTPIN;
 800166a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800166e:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001670:	2301      	movs	r3, #1
 8001672:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOB,&GPIO_InitStruct);
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	4619      	mov	r1, r3
 8001682:	4803      	ldr	r0, [pc, #12]	; (8001690 <Change_GPIOMode+0x64>)
 8001684:	f001 f85a 	bl	800273c <HAL_GPIO_Init>
}
 8001688:	bf00      	nop
 800168a:	3720      	adds	r7, #32
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40020400 	.word	0x40020400

08001694 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <DWT_Delay_Init+0x58>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	4a13      	ldr	r2, [pc, #76]	; (80016ec <DWT_Delay_Init+0x58>)
 800169e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016a2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <DWT_Delay_Init+0x58>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	4a10      	ldr	r2, [pc, #64]	; (80016ec <DWT_Delay_Init+0x58>)
 80016aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ae:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <DWT_Delay_Init+0x5c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <DWT_Delay_Init+0x5c>)
 80016b6:	f023 0301 	bic.w	r3, r3, #1
 80016ba:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <DWT_Delay_Init+0x5c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <DWT_Delay_Init+0x5c>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <DWT_Delay_Init+0x5c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80016ce:	bf00      	nop
     __ASM volatile ("NOP");
 80016d0:	bf00      	nop
  __ASM volatile ("NOP");
 80016d2:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <DWT_Delay_Init+0x5c>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80016dc:	2300      	movs	r3, #0
 80016de:	e000      	b.n	80016e2 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80016e0:	2301      	movs	r3, #1
  }
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000edf0 	.word	0xe000edf0
 80016f0:	e0001000 	.word	0xe0001000

080016f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4a07      	ldr	r2, [pc, #28]	; (8001720 <vApplicationGetIdleTaskMemory+0x2c>)
 8001704:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	4a06      	ldr	r2, [pc, #24]	; (8001724 <vApplicationGetIdleTaskMemory+0x30>)
 800170a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2280      	movs	r2, #128	; 0x80
 8001710:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001712:	bf00      	nop
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	200003d0 	.word	0x200003d0
 8001724:	20000424 	.word	0x20000424

08001728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001728:	b5b0      	push	{r4, r5, r7, lr}
 800172a:	b096      	sub	sp, #88	; 0x58
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800172e:	f000 fe2b 	bl	8002388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001732:	f000 f861 	bl	80017f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001736:	f000 f9b1 	bl	8001a9c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800173a:	f000 f957 	bl	80019ec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800173e:	f000 f97f 	bl	8001a40 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 8001742:	f000 f8c5 	bl	80018d0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 8001746:	4b25      	ldr	r3, [pc, #148]	; (80017dc <main+0xb4>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	4b23      	ldr	r3, [pc, #140]	; (80017dc <main+0xb4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f042 0220 	orr.w	r2, r2, #32
 8001754:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart3,UART_IT_TC);
 8001756:	4b21      	ldr	r3, [pc, #132]	; (80017dc <main+0xb4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <main+0xb4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001764:	60da      	str	r2, [r3, #12]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001766:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <main+0xb8>)
 8001768:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800176c:	461d      	mov	r5, r3
 800176e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001772:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001776:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800177a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f004 fd4c 	bl	800621e <osThreadCreate>
 8001786:	4603      	mov	r3, r0
 8001788:	4a16      	ldr	r2, [pc, #88]	; (80017e4 <main+0xbc>)
 800178a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 256);
 800178c:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <main+0xc0>)
 800178e:	f107 0420 	add.w	r4, r7, #32
 8001792:	461d      	mov	r5, r3
 8001794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001798:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800179c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80017a0:	f107 0320 	add.w	r3, r7, #32
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f004 fd39 	bl	800621e <osThreadCreate>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4a0f      	ldr	r2, [pc, #60]	; (80017ec <main+0xc4>)
 80017b0:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 256);
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <main+0xc8>)
 80017b4:	1d3c      	adds	r4, r7, #4
 80017b6:	461d      	mov	r5, r3
 80017b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	2100      	movs	r1, #0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f004 fd28 	bl	800621e <osThreadCreate>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4a08      	ldr	r2, [pc, #32]	; (80017f4 <main+0xcc>)
 80017d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80017d4:	f004 fd1c 	bl	8006210 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <main+0xb0>
 80017da:	bf00      	nop
 80017dc:	20000644 	.word	0x20000644
 80017e0:	08008df0 	.word	0x08008df0
 80017e4:	20000b94 	.word	0x20000b94
 80017e8:	08008e0c 	.word	0x08008e0c
 80017ec:	20000b98 	.word	0x20000b98
 80017f0:	08008e28 	.word	0x08008e28
 80017f4:	20000b9c 	.word	0x20000b9c

080017f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b094      	sub	sp, #80	; 0x50
 80017fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017fe:	f107 0320 	add.w	r3, r7, #32
 8001802:	2230      	movs	r2, #48	; 0x30
 8001804:	2100      	movs	r1, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f005 ff70 	bl	80076ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <SystemClock_Config+0xd0>)
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	4a28      	ldr	r2, [pc, #160]	; (80018c8 <SystemClock_Config+0xd0>)
 8001826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182a:	6413      	str	r3, [r2, #64]	; 0x40
 800182c:	4b26      	ldr	r3, [pc, #152]	; (80018c8 <SystemClock_Config+0xd0>)
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001838:	2300      	movs	r3, #0
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	4b23      	ldr	r3, [pc, #140]	; (80018cc <SystemClock_Config+0xd4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a22      	ldr	r2, [pc, #136]	; (80018cc <SystemClock_Config+0xd4>)
 8001842:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	4b20      	ldr	r3, [pc, #128]	; (80018cc <SystemClock_Config+0xd4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001854:	2305      	movs	r3, #5
 8001856:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001858:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800185e:	2301      	movs	r3, #1
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001862:	2302      	movs	r3, #2
 8001864:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001866:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800186a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800186c:	2304      	movs	r3, #4
 800186e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001870:	23a8      	movs	r3, #168	; 0xa8
 8001872:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001874:	2302      	movs	r3, #2
 8001876:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001878:	2307      	movs	r3, #7
 800187a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800187c:	f107 0320 	add.w	r3, r7, #32
 8001880:	4618      	mov	r0, r3
 8001882:	f001 fa55 	bl	8002d30 <HAL_RCC_OscConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800188c:	f000 fa74 	bl	8001d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001890:	230f      	movs	r3, #15
 8001892:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001894:	2302      	movs	r3, #2
 8001896:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800189c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	2105      	movs	r1, #5
 80018ae:	4618      	mov	r0, r3
 80018b0:	f001 fcb6 	bl	8003220 <HAL_RCC_ClockConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80018ba:	f000 fa5d 	bl	8001d78 <Error_Handler>
  }
}
 80018be:	bf00      	nop
 80018c0:	3750      	adds	r7, #80	; 0x50
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40007000 	.word	0x40007000

080018d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b090      	sub	sp, #64	; 0x40
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80018d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80018e6:	2300      	movs	r3, #0
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80018ea:	463b      	mov	r3, r7
 80018ec:	2228      	movs	r2, #40	; 0x28
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f005 fefb 	bl	80076ec <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018f6:	4b3b      	ldr	r3, [pc, #236]	; (80019e4 <MX_RTC_Init+0x114>)
 80018f8:	4a3b      	ldr	r2, [pc, #236]	; (80019e8 <MX_RTC_Init+0x118>)
 80018fa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80018fc:	4b39      	ldr	r3, [pc, #228]	; (80019e4 <MX_RTC_Init+0x114>)
 80018fe:	2200      	movs	r2, #0
 8001900:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001902:	4b38      	ldr	r3, [pc, #224]	; (80019e4 <MX_RTC_Init+0x114>)
 8001904:	227f      	movs	r2, #127	; 0x7f
 8001906:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001908:	4b36      	ldr	r3, [pc, #216]	; (80019e4 <MX_RTC_Init+0x114>)
 800190a:	22ff      	movs	r2, #255	; 0xff
 800190c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800190e:	4b35      	ldr	r3, [pc, #212]	; (80019e4 <MX_RTC_Init+0x114>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001914:	4b33      	ldr	r3, [pc, #204]	; (80019e4 <MX_RTC_Init+0x114>)
 8001916:	2200      	movs	r2, #0
 8001918:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800191a:	4b32      	ldr	r3, [pc, #200]	; (80019e4 <MX_RTC_Init+0x114>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001920:	4830      	ldr	r0, [pc, #192]	; (80019e4 <MX_RTC_Init+0x114>)
 8001922:	f002 f88f 	bl	8003a44 <HAL_RTC_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800192c:	f000 fa24 	bl	8001d78 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001930:	2300      	movs	r3, #0
 8001932:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001936:	2300      	movs	r3, #0
 8001938:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 800193c:	2300      	movs	r3, #0
 800193e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001942:	2300      	movs	r3, #0
 8001944:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001946:	2300      	movs	r3, #0
 8001948:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800194a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800194e:	2201      	movs	r2, #1
 8001950:	4619      	mov	r1, r3
 8001952:	4824      	ldr	r0, [pc, #144]	; (80019e4 <MX_RTC_Init+0x114>)
 8001954:	f002 f8ec 	bl	8003b30 <HAL_RTC_SetTime>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800195e:	f000 fa0b 	bl	8001d78 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001962:	2301      	movs	r3, #1
 8001964:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001968:	2301      	movs	r3, #1
 800196a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800196e:	2301      	movs	r3, #1
 8001970:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001974:	2300      	movs	r3, #0
 8001976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800197a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800197e:	2201      	movs	r2, #1
 8001980:	4619      	mov	r1, r3
 8001982:	4818      	ldr	r0, [pc, #96]	; (80019e4 <MX_RTC_Init+0x114>)
 8001984:	f002 f9cc 	bl	8003d20 <HAL_RTC_SetDate>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800198e:	f000 f9f3 	bl	8001d78 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001992:	2300      	movs	r3, #0
 8001994:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001996:	2300      	movs	r3, #0
 8001998:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800199a:	2300      	movs	r3, #0
 800199c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 80019aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80019ae:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80019b8:	2301      	movs	r3, #1
 80019ba:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80019be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80019c4:	463b      	mov	r3, r7
 80019c6:	2201      	movs	r2, #1
 80019c8:	4619      	mov	r1, r3
 80019ca:	4806      	ldr	r0, [pc, #24]	; (80019e4 <MX_RTC_Init+0x114>)
 80019cc:	f002 fa7b 	bl	8003ec6 <HAL_RTC_SetAlarm>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80019d6:	f000 f9cf 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019da:	bf00      	nop
 80019dc:	3740      	adds	r7, #64	; 0x40
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000624 	.word	0x20000624
 80019e8:	40002800 	.word	0x40002800

080019ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <MX_USART3_UART_Init+0x4c>)
 80019f2:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <MX_USART3_UART_Init+0x50>)
 80019f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <MX_USART3_UART_Init+0x4c>)
 80019f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <MX_USART3_UART_Init+0x4c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <MX_USART3_UART_Init+0x4c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <MX_USART3_UART_Init+0x4c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <MX_USART3_UART_Init+0x4c>)
 8001a12:	220c      	movs	r2, #12
 8001a14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <MX_USART3_UART_Init+0x4c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <MX_USART3_UART_Init+0x4c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a22:	4805      	ldr	r0, [pc, #20]	; (8001a38 <MX_USART3_UART_Init+0x4c>)
 8001a24:	f003 f858 	bl	8004ad8 <HAL_UART_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a2e:	f000 f9a3 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000644 	.word	0x20000644
 8001a3c:	40004800 	.word	0x40004800

08001a40 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001a4a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a4e:	2204      	movs	r2, #4
 8001a50:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a54:	2202      	movs	r2, #2
 8001a56:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a60:	2202      	movs	r2, #2
 8001a62:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a70:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a82:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a84:	f001 f837 	bl	8002af6 <HAL_PCD_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001a8e:	f000 f973 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000688 	.word	0x20000688

08001a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08c      	sub	sp, #48	; 0x30
 8001aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa2:	f107 031c 	add.w	r3, r7, #28
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
 8001ab0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	4b73      	ldr	r3, [pc, #460]	; (8001c84 <MX_GPIO_Init+0x1e8>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a72      	ldr	r2, [pc, #456]	; (8001c84 <MX_GPIO_Init+0x1e8>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b70      	ldr	r3, [pc, #448]	; (8001c84 <MX_GPIO_Init+0x1e8>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	61bb      	str	r3, [r7, #24]
 8001acc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	4b6c      	ldr	r3, [pc, #432]	; (8001c84 <MX_GPIO_Init+0x1e8>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a6b      	ldr	r2, [pc, #428]	; (8001c84 <MX_GPIO_Init+0x1e8>)
 8001ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b69      	ldr	r3, [pc, #420]	; (8001c84 <MX_GPIO_Init+0x1e8>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	4b65      	ldr	r3, [pc, #404]	; (8001c84 <MX_GPIO_Init+0x1e8>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a64      	ldr	r2, [pc, #400]	; (8001c84 <MX_GPIO_Init+0x1e8>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b62      	ldr	r3, [pc, #392]	; (8001c84 <MX_GPIO_Init+0x1e8>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b5e      	ldr	r3, [pc, #376]	; (8001c84 <MX_GPIO_Init+0x1e8>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a5d      	ldr	r2, [pc, #372]	; (8001c84 <MX_GPIO_Init+0x1e8>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b5b      	ldr	r3, [pc, #364]	; (8001c84 <MX_GPIO_Init+0x1e8>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	4b57      	ldr	r3, [pc, #348]	; (8001c84 <MX_GPIO_Init+0x1e8>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a56      	ldr	r2, [pc, #344]	; (8001c84 <MX_GPIO_Init+0x1e8>)
 8001b2c:	f043 0308 	orr.w	r3, r3, #8
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b54      	ldr	r3, [pc, #336]	; (8001c84 <MX_GPIO_Init+0x1e8>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	4b50      	ldr	r3, [pc, #320]	; (8001c84 <MX_GPIO_Init+0x1e8>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a4f      	ldr	r2, [pc, #316]	; (8001c84 <MX_GPIO_Init+0x1e8>)
 8001b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b4d      	ldr	r3, [pc, #308]	; (8001c84 <MX_GPIO_Init+0x1e8>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001b60:	4849      	ldr	r0, [pc, #292]	; (8001c88 <MX_GPIO_Init+0x1ec>)
 8001b62:	f000 ffaf 	bl	8002ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2140      	movs	r1, #64	; 0x40
 8001b6a:	4848      	ldr	r0, [pc, #288]	; (8001c8c <MX_GPIO_Init+0x1f0>)
 8001b6c:	f000 ffaa 	bl	8002ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f107 031c 	add.w	r3, r7, #28
 8001b84:	4619      	mov	r1, r3
 8001b86:	4842      	ldr	r0, [pc, #264]	; (8001c90 <MX_GPIO_Init+0x1f4>)
 8001b88:	f000 fdd8 	bl	800273c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001b8c:	2332      	movs	r3, #50	; 0x32
 8001b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b9c:	230b      	movs	r3, #11
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	483a      	ldr	r0, [pc, #232]	; (8001c90 <MX_GPIO_Init+0x1f4>)
 8001ba8:	f000 fdc8 	bl	800273c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001bac:	2386      	movs	r3, #134	; 0x86
 8001bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bbc:	230b      	movs	r3, #11
 8001bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc0:	f107 031c 	add.w	r3, r7, #28
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4833      	ldr	r0, [pc, #204]	; (8001c94 <MX_GPIO_Init+0x1f8>)
 8001bc8:	f000 fdb8 	bl	800273c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001bcc:	f244 0381 	movw	r3, #16513	; 0x4081
 8001bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bde:	f107 031c 	add.w	r3, r7, #28
 8001be2:	4619      	mov	r1, r3
 8001be4:	4828      	ldr	r0, [pc, #160]	; (8001c88 <MX_GPIO_Init+0x1ec>)
 8001be6:	f000 fda9 	bl	800273c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001bea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bfc:	230b      	movs	r3, #11
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4619      	mov	r1, r3
 8001c06:	4820      	ldr	r0, [pc, #128]	; (8001c88 <MX_GPIO_Init+0x1ec>)
 8001c08:	f000 fd98 	bl	800273c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001c0c:	2340      	movs	r3, #64	; 0x40
 8001c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c10:	2301      	movs	r3, #1
 8001c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c1c:	f107 031c 	add.w	r3, r7, #28
 8001c20:	4619      	mov	r1, r3
 8001c22:	481a      	ldr	r0, [pc, #104]	; (8001c8c <MX_GPIO_Init+0x1f0>)
 8001c24:	f000 fd8a 	bl	800273c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4814      	ldr	r0, [pc, #80]	; (8001c8c <MX_GPIO_Init+0x1f0>)
 8001c3c:	f000 fd7e 	bl	800273c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001c40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c46:	2300      	movs	r3, #0
 8001c48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	f107 031c 	add.w	r3, r7, #28
 8001c52:	4619      	mov	r1, r3
 8001c54:	480e      	ldr	r0, [pc, #56]	; (8001c90 <MX_GPIO_Init+0x1f4>)
 8001c56:	f000 fd71 	bl	800273c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001c5a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c6c:	230b      	movs	r3, #11
 8001c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4619      	mov	r1, r3
 8001c76:	4805      	ldr	r0, [pc, #20]	; (8001c8c <MX_GPIO_Init+0x1f0>)
 8001c78:	f000 fd60 	bl	800273c <HAL_GPIO_Init>

}
 8001c7c:	bf00      	nop
 8001c7e:	3730      	adds	r7, #48	; 0x30
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020400 	.word	0x40020400
 8001c8c:	40021800 	.word	0x40021800
 8001c90:	40020800 	.word	0x40020800
 8001c94:	40020000 	.word	0x40020000

08001c98 <UART_Interrupt_Processing>:

/* USER CODE BEGIN 4 */
void UART_Interrupt_Processing(UART_HandleTypeDef *huart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart3.Instance)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <UART_Interrupt_Processing+0x40>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d110      	bne.n	8001cce <UART_Interrupt_Processing+0x36>
	{
		if(HAL_UART_Receive_IT(&huart3, Receive_Buffer, 1)==HAL_OK)
 8001cac:	2201      	movs	r2, #1
 8001cae:	490b      	ldr	r1, [pc, #44]	; (8001cdc <UART_Interrupt_Processing+0x44>)
 8001cb0:	4809      	ldr	r0, [pc, #36]	; (8001cd8 <UART_Interrupt_Processing+0x40>)
 8001cb2:	f002 fff0 	bl	8004c96 <HAL_UART_Receive_IT>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d108      	bne.n	8001cce <UART_Interrupt_Processing+0x36>
		{
			RxFlag = 1;
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <UART_Interrupt_Processing+0x48>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
			Uart3_EnQueue(Receive_Buffer[0]);
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <UART_Interrupt_Processing+0x44>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fb83 	bl	80013d4 <Uart3_EnQueue>
		}
	}
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000644 	.word	0x20000644
 8001cdc:	20000ba0 	.word	0x20000ba0
 8001ce0:	20000ba1 	.word	0x20000ba1

08001ce4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001cec:	2001      	movs	r0, #1
 8001cee:	f004 fae2 	bl	80062b6 <osDelay>
 8001cf2:	e7fb      	b.n	8001cec <StartDefaultTask+0x8>

08001cf4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */

	printf("\n\rATM Monitor\n\n\r");
 8001cfc:	480e      	ldr	r0, [pc, #56]	; (8001d38 <StartTask02+0x44>)
 8001cfe:	f7fe fc75 	bl	80005ec <SMprintf>
	printf("\n\rARM> ");
 8001d02:	480e      	ldr	r0, [pc, #56]	; (8001d3c <StartTask02+0x48>)
 8001d04:	f7fe fc72 	bl	80005ec <SMprintf>

  for(;;)
  {
	  if(!Uart3_Is_Empty())
 8001d08:	f7ff fba6 	bl	8001458 <Uart3_Is_Empty>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f083 0301 	eor.w	r3, r3, #1
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00a      	beq.n	8001d2e <StartTask02+0x3a>
	  {
		  RxData = Uart3_DeQueue();
 8001d18:	f7ff fb88 	bl	800142c <Uart3_DeQueue>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <StartTask02+0x4c>)
 8001d22:	701a      	strb	r2, [r3, #0]
		 // RxData = Uart3_Dequeue();
		  onl_monitor(RxData);
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <StartTask02+0x4c>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe ff33 	bl	8000b94 <onl_monitor>
	  }
    osDelay(10);
 8001d2e:	200a      	movs	r0, #10
 8001d30:	f004 fac1 	bl	80062b6 <osDelay>
	  if(!Uart3_Is_Empty())
 8001d34:	e7e8      	b.n	8001d08 <StartTask02+0x14>
 8001d36:	bf00      	nop
 8001d38:	08008e44 	.word	0x08008e44
 8001d3c:	08008e58 	.word	0x08008e58
 8001d40:	20000ba2 	.word	0x20000ba2

08001d44 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f004 fab2 	bl	80062b6 <osDelay>
 8001d52:	e7fb      	b.n	8001d4c <StartTask03+0x8>

08001d54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d101      	bne.n	8001d6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d66:	f000 fb31 	bl	80023cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40001000 	.word	0x40001000

08001d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d7c:	b672      	cpsid	i
}
 8001d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <Error_Handler+0x8>
	...

08001d84 <set_time>:
extern unsigned char AlarmFlag = 0;
extern RTC_AlarmTypeDef sAlarm;


void set_time(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	sTime.Hours = 0x10;
 8001d8a:	2310      	movs	r3, #16
 8001d8c:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x44;
 8001d8e:	2344      	movs	r3, #68	; 0x44
 8001d90:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x30;
 8001d92:	2330      	movs	r3, #48	; 0x30
 8001d94:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]

	if(HAL_RTC_SetTime(&hrtc,&sTime,RTC_FORMAT_BCD)!=HAL_OK)
 8001d9e:	1d3b      	adds	r3, r7, #4
 8001da0:	2201      	movs	r2, #1
 8001da2:	4619      	mov	r1, r3
 8001da4:	4813      	ldr	r0, [pc, #76]	; (8001df4 <set_time+0x70>)
 8001da6:	f001 fec3 	bl	8003b30 <HAL_RTC_SetTime>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d002      	beq.n	8001db6 <set_time+0x32>
	{
		printf("Error RTC Settime\n\r");
 8001db0:	4811      	ldr	r0, [pc, #68]	; (8001df8 <set_time+0x74>)
 8001db2:	f7fe fc1b 	bl	80005ec <SMprintf>
	}

	sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001db6:	2302      	movs	r3, #2
 8001db8:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_AUGUST;
 8001dba:	2308      	movs	r3, #8
 8001dbc:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x23;
 8001dbe:	2323      	movs	r3, #35	; 0x23
 8001dc0:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x21;
 8001dc2:	2321      	movs	r3, #33	; 0x21
 8001dc4:	70fb      	strb	r3, [r7, #3]

	if(HAL_RTC_SetDate(&hrtc,&sDate,RTC_FORMAT_BCD)!=HAL_OK)
 8001dc6:	463b      	mov	r3, r7
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4809      	ldr	r0, [pc, #36]	; (8001df4 <set_time+0x70>)
 8001dce:	f001 ffa7 	bl	8003d20 <HAL_RTC_SetDate>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <set_time+0x5a>
	{
		printf("Error RTC Settime\n\r");
 8001dd8:	4807      	ldr	r0, [pc, #28]	; (8001df8 <set_time+0x74>)
 8001dda:	f7fe fc07 	bl	80005ec <SMprintf>
	}

	HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR1,0x32F2);
 8001dde:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001de2:	2101      	movs	r1, #1
 8001de4:	4803      	ldr	r0, [pc, #12]	; (8001df4 <set_time+0x70>)
 8001de6:	f002 fb98 	bl	800451a <HAL_RTCEx_BKUPWrite>

}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000624 	.word	0x20000624
 8001df8:	08008e60 	.word	0x08008e60

08001dfc <set_time_only>:

void set_time_only(unsigned char hour, unsigned char minute, unsigned char second)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
 8001e06:	460b      	mov	r3, r1
 8001e08:	71bb      	strb	r3, [r7, #6]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	717b      	strb	r3, [r7, #5]
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;


	sTime.Hours = hour;
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = minute;
 8001e12:	79bb      	ldrb	r3, [r7, #6]
 8001e14:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = second;
 8001e16:	797b      	ldrb	r3, [r7, #5]
 8001e18:	73bb      	strb	r3, [r7, #14]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
	if(HAL_RTC_SetTime(&hrtc,&sTime,RTC_FORMAT_BCD)!= HAL_OK)
 8001e22:	f107 030c 	add.w	r3, r7, #12
 8001e26:	2201      	movs	r2, #1
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4806      	ldr	r0, [pc, #24]	; (8001e44 <set_time_only+0x48>)
 8001e2c:	f001 fe80 	bl	8003b30 <HAL_RTC_SetTime>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d002      	beq.n	8001e3c <set_time_only+0x40>
	{
		printf("Error RTC Settime\n\r");
 8001e36:	4804      	ldr	r0, [pc, #16]	; (8001e48 <set_time_only+0x4c>)
 8001e38:	f7fe fbd8 	bl	80005ec <SMprintf>
	}
}
 8001e3c:	bf00      	nop
 8001e3e:	3720      	adds	r7, #32
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000624 	.word	0x20000624
 8001e48:	08008e60 	.word	0x08008e60

08001e4c <set_alarm>:


}

void set_alarm(unsigned char hour, unsigned char minite, unsigned char second)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08c      	sub	sp, #48	; 0x30
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
 8001e56:	460b      	mov	r3, r1
 8001e58:	71bb      	strb	r3, [r7, #6]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	717b      	strb	r3, [r7, #5]
	RTC_AlarmTypeDef sAlarm;

	sAlarm.AlarmTime.Hours = hour;
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = minite;
 8001e62:	79bb      	ldrb	r3, [r7, #6]
 8001e64:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = second;
 8001e66:	797b      	ldrb	r3, [r7, #5]
 8001e68:	72bb      	strb	r3, [r7, #10]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]

	sAlarm.AlarmSubSecondMask = RTC_ALARMMASK_DATEWEEKDAY;
 8001e76:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001e7a:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDay = 0x1;
 8001e80:	2301      	movs	r3, #1
 8001e82:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 8001e86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(HAL_RTC_SetAlarm_IT(&hrtc,&sAlarm,RTC_FORMAT_BCD)!=HAL_OK)
 8001e8c:	f107 0308 	add.w	r3, r7, #8
 8001e90:	2201      	movs	r2, #1
 8001e92:	4619      	mov	r1, r3
 8001e94:	4806      	ldr	r0, [pc, #24]	; (8001eb0 <set_alarm+0x64>)
 8001e96:	f002 f941 	bl	800411c <HAL_RTC_SetAlarm_IT>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <set_alarm+0x5a>
	{
		printf("Error RTC Settime\n\r");
 8001ea0:	4804      	ldr	r0, [pc, #16]	; (8001eb4 <set_alarm+0x68>)
 8001ea2:	f7fe fba3 	bl	80005ec <SMprintf>
	}
}
 8001ea6:	bf00      	nop
 8001ea8:	3730      	adds	r7, #48	; 0x30
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000624 	.word	0x20000624
 8001eb4:	08008e60 	.word	0x08008e60

08001eb8 <get_time>:

void get_time(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	HAL_RTC_GetTime(&hrtc,&gTime,RTC_FORMAT_BIN);
 8001ebe:	463b      	mov	r3, r7
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	480e      	ldr	r0, [pc, #56]	; (8001f00 <get_time+0x48>)
 8001ec6:	f001 fecd 	bl	8003c64 <HAL_RTC_GetTime>

	HAL_RTC_GetDate(&hrtc,&gDate,RTC_FORMAT_BIN);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	2200      	movs	r2, #0
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	480b      	ldr	r0, [pc, #44]	; (8001f00 <get_time+0x48>)
 8001ed4:	f001 ffa8 	bl	8003e28 <HAL_RTC_GetDate>

	printf("20%02d-%20d-%20d  ",gDate.Year,gDate.Month,gDate.Date);
 8001ed8:	7dfb      	ldrb	r3, [r7, #23]
 8001eda:	4619      	mov	r1, r3
 8001edc:	7d7b      	ldrb	r3, [r7, #21]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	7dbb      	ldrb	r3, [r7, #22]
 8001ee2:	4808      	ldr	r0, [pc, #32]	; (8001f04 <get_time+0x4c>)
 8001ee4:	f7fe fb82 	bl	80005ec <SMprintf>
	printf("%02d:%02d:%02d\r",gTime.Hours,gTime.Minutes,gTime.Seconds);
 8001ee8:	783b      	ldrb	r3, [r7, #0]
 8001eea:	4619      	mov	r1, r3
 8001eec:	787b      	ldrb	r3, [r7, #1]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	78bb      	ldrb	r3, [r7, #2]
 8001ef2:	4805      	ldr	r0, [pc, #20]	; (8001f08 <get_time+0x50>)
 8001ef4:	f7fe fb7a 	bl	80005ec <SMprintf>
}
 8001ef8:	bf00      	nop
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000624 	.word	0x20000624
 8001f04:	08008e74 	.word	0x08008e74
 8001f08:	08008e88 	.word	0x08008e88

08001f0c <rtc_test>:

void rtc_test(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08c      	sub	sp, #48	; 0x30
 8001f10:	af00      	add	r7, sp, #0
	RTC_AlarmTypeDef sAlarm;
	int retval;

	retval = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 8001f12:	2101      	movs	r1, #1
 8001f14:	481b      	ldr	r0, [pc, #108]	; (8001f84 <rtc_test+0x78>)
 8001f16:	f002 fb1a 	bl	800454e <HAL_RTCEx_BKUPRead>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	printf("RTCEx_BKUPRead = %x\r\n",retval);
 8001f1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f20:	4819      	ldr	r0, [pc, #100]	; (8001f88 <rtc_test+0x7c>)
 8001f22:	f7fe fb63 	bl	80005ec <SMprintf>

	if(retval != 0x32F2)
 8001f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f28:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d001      	beq.n	8001f34 <rtc_test+0x28>
	{
		set_time();
 8001f30:	f7ff ff28 	bl	8001d84 <set_time>
	}
	printf("Alarm Time %02x-%02x-%02x\r\n",sAlarm.AlarmTime.Hours,sAlarm.AlarmTime.Minutes,sAlarm.AlarmTime.Seconds);
 8001f34:	793b      	ldrb	r3, [r7, #4]
 8001f36:	4619      	mov	r1, r3
 8001f38:	797b      	ldrb	r3, [r7, #5]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	79bb      	ldrb	r3, [r7, #6]
 8001f3e:	4813      	ldr	r0, [pc, #76]	; (8001f8c <rtc_test+0x80>)
 8001f40:	f7fe fb54 	bl	80005ec <SMprintf>

	while(1)
	{
		get_time();
 8001f44:	f7ff ffb8 	bl	8001eb8 <get_time>

		osDelay(1000);
 8001f48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f4c:	f004 f9b3 	bl	80062b6 <osDelay>
		if(AlarmFlag)
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <rtc_test+0x84>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f5      	beq.n	8001f44 <rtc_test+0x38>
		{
			HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_SET);
 8001f58:	2201      	movs	r2, #1
 8001f5a:	2180      	movs	r1, #128	; 0x80
 8001f5c:	480d      	ldr	r0, [pc, #52]	; (8001f94 <rtc_test+0x88>)
 8001f5e:	f000 fdb1 	bl	8002ac4 <HAL_GPIO_WritePin>
			printf("Alarm Time %02x-%02x-%02x\r\n",sAlarm.AlarmTime.Hours,sAlarm.AlarmTime.Minutes,sAlarm.AlarmTime.Seconds);
 8001f62:	793b      	ldrb	r3, [r7, #4]
 8001f64:	4619      	mov	r1, r3
 8001f66:	797b      	ldrb	r3, [r7, #5]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	79bb      	ldrb	r3, [r7, #6]
 8001f6c:	4807      	ldr	r0, [pc, #28]	; (8001f8c <rtc_test+0x80>)
 8001f6e:	f7fe fb3d 	bl	80005ec <SMprintf>
			AlarmFlag = NO;
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <rtc_test+0x84>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
			break;
 8001f78:	bf00      	nop
		}
	}
}
 8001f7a:	bf00      	nop
 8001f7c:	3730      	adds	r7, #48	; 0x30
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000624 	.word	0x20000624
 8001f88:	08008e98 	.word	0x08008e98
 8001f8c:	08008eb0 	.word	0x08008eb0
 8001f90:	20000ba3 	.word	0x20000ba3
 8001f94:	40020400 	.word	0x40020400

08001f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_MspInit+0x54>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	4a11      	ldr	r2, [pc, #68]	; (8001fec <HAL_MspInit+0x54>)
 8001fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fac:	6453      	str	r3, [r2, #68]	; 0x44
 8001fae:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <HAL_MspInit+0x54>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_MspInit+0x54>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <HAL_MspInit+0x54>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_MspInit+0x54>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	210f      	movs	r1, #15
 8001fda:	f06f 0001 	mvn.w	r0, #1
 8001fde:	f000 faf1 	bl	80025c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800

08001ff0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08e      	sub	sp, #56	; 0x38
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ff8:	f107 0308 	add.w	r3, r7, #8
 8001ffc:	2230      	movs	r2, #48	; 0x30
 8001ffe:	2100      	movs	r1, #0
 8002000:	4618      	mov	r0, r3
 8002002:	f005 fb73 	bl	80076ec <memset>
  if(hrtc->Instance==RTC)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a0c      	ldr	r2, [pc, #48]	; (800203c <HAL_RTC_MspInit+0x4c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d111      	bne.n	8002034 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002010:	2320      	movs	r3, #32
 8002012:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002014:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002018:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800201a:	f107 0308 	add.w	r3, r7, #8
 800201e:	4618      	mov	r0, r3
 8002020:	f001 fb50 	bl	80036c4 <HAL_RCCEx_PeriphCLKConfig>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800202a:	f7ff fea5 	bl	8001d78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800202e:	4b04      	ldr	r3, [pc, #16]	; (8002040 <HAL_RTC_MspInit+0x50>)
 8002030:	2201      	movs	r2, #1
 8002032:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002034:	bf00      	nop
 8002036:	3738      	adds	r7, #56	; 0x38
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40002800 	.word	0x40002800
 8002040:	42470e3c 	.word	0x42470e3c

08002044 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	; 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a1d      	ldr	r2, [pc, #116]	; (80020d8 <HAL_UART_MspInit+0x94>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d134      	bne.n	80020d0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <HAL_UART_MspInit+0x98>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	4a1b      	ldr	r2, [pc, #108]	; (80020dc <HAL_UART_MspInit+0x98>)
 8002070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002074:	6413      	str	r3, [r2, #64]	; 0x40
 8002076:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_UART_MspInit+0x98>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_UART_MspInit+0x98>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a14      	ldr	r2, [pc, #80]	; (80020dc <HAL_UART_MspInit+0x98>)
 800208c:	f043 0308 	orr.w	r3, r3, #8
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_UART_MspInit+0x98>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800209e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ac:	2303      	movs	r3, #3
 80020ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020b0:	2307      	movs	r3, #7
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	4619      	mov	r1, r3
 80020ba:	4809      	ldr	r0, [pc, #36]	; (80020e0 <HAL_UART_MspInit+0x9c>)
 80020bc:	f000 fb3e 	bl	800273c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2105      	movs	r1, #5
 80020c4:	2027      	movs	r0, #39	; 0x27
 80020c6:	f000 fa7d 	bl	80025c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020ca:	2027      	movs	r0, #39	; 0x27
 80020cc:	f000 fa96 	bl	80025fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020d0:	bf00      	nop
 80020d2:	3728      	adds	r7, #40	; 0x28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40004800 	.word	0x40004800
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020c00 	.word	0x40020c00

080020e4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08a      	sub	sp, #40	; 0x28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002104:	d13f      	bne.n	8002186 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	4b21      	ldr	r3, [pc, #132]	; (8002190 <HAL_PCD_MspInit+0xac>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a20      	ldr	r2, [pc, #128]	; (8002190 <HAL_PCD_MspInit+0xac>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <HAL_PCD_MspInit+0xac>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002122:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002130:	2303      	movs	r3, #3
 8002132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002134:	230a      	movs	r3, #10
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	4619      	mov	r1, r3
 800213e:	4815      	ldr	r0, [pc, #84]	; (8002194 <HAL_PCD_MspInit+0xb0>)
 8002140:	f000 fafc 	bl	800273c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002144:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214a:	2300      	movs	r3, #0
 800214c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	4619      	mov	r1, r3
 8002158:	480e      	ldr	r0, [pc, #56]	; (8002194 <HAL_PCD_MspInit+0xb0>)
 800215a:	f000 faef 	bl	800273c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800215e:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <HAL_PCD_MspInit+0xac>)
 8002160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002162:	4a0b      	ldr	r2, [pc, #44]	; (8002190 <HAL_PCD_MspInit+0xac>)
 8002164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002168:	6353      	str	r3, [r2, #52]	; 0x34
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b08      	ldr	r3, [pc, #32]	; (8002190 <HAL_PCD_MspInit+0xac>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	4a07      	ldr	r2, [pc, #28]	; (8002190 <HAL_PCD_MspInit+0xac>)
 8002174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002178:	6453      	str	r3, [r2, #68]	; 0x44
 800217a:	4b05      	ldr	r3, [pc, #20]	; (8002190 <HAL_PCD_MspInit+0xac>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002186:	bf00      	nop
 8002188:	3728      	adds	r7, #40	; 0x28
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800
 8002194:	40020000 	.word	0x40020000

08002198 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08c      	sub	sp, #48	; 0x30
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80021a8:	2200      	movs	r2, #0
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	2036      	movs	r0, #54	; 0x36
 80021ae:	f000 fa09 	bl	80025c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021b2:	2036      	movs	r0, #54	; 0x36
 80021b4:	f000 fa22 	bl	80025fc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	4b1f      	ldr	r3, [pc, #124]	; (800223c <HAL_InitTick+0xa4>)
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	4a1e      	ldr	r2, [pc, #120]	; (800223c <HAL_InitTick+0xa4>)
 80021c2:	f043 0310 	orr.w	r3, r3, #16
 80021c6:	6413      	str	r3, [r2, #64]	; 0x40
 80021c8:	4b1c      	ldr	r3, [pc, #112]	; (800223c <HAL_InitTick+0xa4>)
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021d4:	f107 0210 	add.w	r2, r7, #16
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	4611      	mov	r1, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	f001 fa3e 	bl	8003660 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80021e4:	f001 fa14 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 80021e8:	4603      	mov	r3, r0
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f0:	4a13      	ldr	r2, [pc, #76]	; (8002240 <HAL_InitTick+0xa8>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	0c9b      	lsrs	r3, r3, #18
 80021f8:	3b01      	subs	r3, #1
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <HAL_InitTick+0xac>)
 80021fe:	4a12      	ldr	r2, [pc, #72]	; (8002248 <HAL_InitTick+0xb0>)
 8002200:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <HAL_InitTick+0xac>)
 8002204:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002208:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800220a:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <HAL_InitTick+0xac>)
 800220c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <HAL_InitTick+0xac>)
 8002212:	2200      	movs	r2, #0
 8002214:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_InitTick+0xac>)
 8002218:	2200      	movs	r2, #0
 800221a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800221c:	4809      	ldr	r0, [pc, #36]	; (8002244 <HAL_InitTick+0xac>)
 800221e:	f002 f9ae 	bl	800457e <HAL_TIM_Base_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d104      	bne.n	8002232 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002228:	4806      	ldr	r0, [pc, #24]	; (8002244 <HAL_InitTick+0xac>)
 800222a:	f002 fa01 	bl	8004630 <HAL_TIM_Base_Start_IT>
 800222e:	4603      	mov	r3, r0
 8002230:	e000      	b.n	8002234 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
}
 8002234:	4618      	mov	r0, r3
 8002236:	3730      	adds	r7, #48	; 0x30
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40023800 	.word	0x40023800
 8002240:	431bde83 	.word	0x431bde83
 8002244:	20000ba4 	.word	0x20000ba4
 8002248:	40001000 	.word	0x40001000

0800224c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002250:	e7fe      	b.n	8002250 <NMI_Handler+0x4>

08002252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002256:	e7fe      	b.n	8002256 <HardFault_Handler+0x4>

08002258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800225c:	e7fe      	b.n	800225c <MemManage_Handler+0x4>

0800225e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002262:	e7fe      	b.n	8002262 <BusFault_Handler+0x4>

08002264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002268:	e7fe      	b.n	8002268 <UsageFault_Handler+0x4>

0800226a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800227c:	4803      	ldr	r0, [pc, #12]	; (800228c <USART3_IRQHandler+0x14>)
 800227e:	f002 fd3b 	bl	8004cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  UART_Interrupt_Processing(&huart3);
 8002282:	4802      	ldr	r0, [pc, #8]	; (800228c <USART3_IRQHandler+0x14>)
 8002284:	f7ff fd08 	bl	8001c98 <UART_Interrupt_Processing>
  /* USER CODE END USART3_IRQn 1 */
}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000644 	.word	0x20000644

08002290 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002294:	4802      	ldr	r0, [pc, #8]	; (80022a0 <TIM6_DAC_IRQHandler+0x10>)
 8002296:	f002 fa3b 	bl	8004710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000ba4 	.word	0x20000ba4

080022a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022ac:	4a14      	ldr	r2, [pc, #80]	; (8002300 <_sbrk+0x5c>)
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <_sbrk+0x60>)
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022b8:	4b13      	ldr	r3, [pc, #76]	; (8002308 <_sbrk+0x64>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d102      	bne.n	80022c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <_sbrk+0x64>)
 80022c2:	4a12      	ldr	r2, [pc, #72]	; (800230c <_sbrk+0x68>)
 80022c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <_sbrk+0x64>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d207      	bcs.n	80022e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022d4:	f005 f9d2 	bl	800767c <__errno>
 80022d8:	4603      	mov	r3, r0
 80022da:	220c      	movs	r2, #12
 80022dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022de:	f04f 33ff 	mov.w	r3, #4294967295
 80022e2:	e009      	b.n	80022f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022e4:	4b08      	ldr	r3, [pc, #32]	; (8002308 <_sbrk+0x64>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ea:	4b07      	ldr	r3, [pc, #28]	; (8002308 <_sbrk+0x64>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	4a05      	ldr	r2, [pc, #20]	; (8002308 <_sbrk+0x64>)
 80022f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022f6:	68fb      	ldr	r3, [r7, #12]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20030000 	.word	0x20030000
 8002304:	00000400 	.word	0x00000400
 8002308:	20000bec 	.word	0x20000bec
 800230c:	20004958 	.word	0x20004958

08002310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <SystemInit+0x20>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231a:	4a05      	ldr	r2, [pc, #20]	; (8002330 <SystemInit+0x20>)
 800231c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002334:	f8df d034 	ldr.w	sp, [pc, #52]	; 800236c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002338:	480d      	ldr	r0, [pc, #52]	; (8002370 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800233a:	490e      	ldr	r1, [pc, #56]	; (8002374 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800233c:	4a0e      	ldr	r2, [pc, #56]	; (8002378 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800233e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002340:	e002      	b.n	8002348 <LoopCopyDataInit>

08002342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002346:	3304      	adds	r3, #4

08002348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800234a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800234c:	d3f9      	bcc.n	8002342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800234e:	4a0b      	ldr	r2, [pc, #44]	; (800237c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002350:	4c0b      	ldr	r4, [pc, #44]	; (8002380 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002354:	e001      	b.n	800235a <LoopFillZerobss>

08002356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002358:	3204      	adds	r2, #4

0800235a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800235a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800235c:	d3fb      	bcc.n	8002356 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800235e:	f7ff ffd7 	bl	8002310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002362:	f005 f991 	bl	8007688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002366:	f7ff f9df 	bl	8001728 <main>
  bx  lr    
 800236a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800236c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002374:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002378:	0800913c 	.word	0x0800913c
  ldr r2, =_sbss
 800237c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002380:	20004958 	.word	0x20004958

08002384 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002384:	e7fe      	b.n	8002384 <ADC_IRQHandler>
	...

08002388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800238c:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <HAL_Init+0x40>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0d      	ldr	r2, [pc, #52]	; (80023c8 <HAL_Init+0x40>)
 8002392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002396:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_Init+0x40>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <HAL_Init+0x40>)
 800239e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <HAL_Init+0x40>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a07      	ldr	r2, [pc, #28]	; (80023c8 <HAL_Init+0x40>)
 80023aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b0:	2003      	movs	r0, #3
 80023b2:	f000 f8fc 	bl	80025ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023b6:	200f      	movs	r0, #15
 80023b8:	f7ff feee 	bl	8002198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023bc:	f7ff fdec 	bl	8001f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023c00 	.word	0x40023c00

080023cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_IncTick+0x20>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_IncTick+0x24>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <HAL_IncTick+0x24>)
 80023de:	6013      	str	r3, [r2, #0]
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000008 	.word	0x20000008
 80023f0:	20000bf0 	.word	0x20000bf0

080023f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return uwTick;
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <HAL_GetTick+0x14>)
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	20000bf0 	.word	0x20000bf0

0800240c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002414:	f7ff ffee 	bl	80023f4 <HAL_GetTick>
 8002418:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002424:	d005      	beq.n	8002432 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <HAL_Delay+0x44>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4413      	add	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002432:	bf00      	nop
 8002434:	f7ff ffde 	bl	80023f4 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	429a      	cmp	r2, r3
 8002442:	d8f7      	bhi.n	8002434 <HAL_Delay+0x28>
  {
  }
}
 8002444:	bf00      	nop
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000008 	.word	0x20000008

08002454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002464:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <__NVIC_SetPriorityGrouping+0x44>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002470:	4013      	ands	r3, r2
 8002472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800247c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002486:	4a04      	ldr	r2, [pc, #16]	; (8002498 <__NVIC_SetPriorityGrouping+0x44>)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	60d3      	str	r3, [r2, #12]
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a0:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <__NVIC_GetPriorityGrouping+0x18>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	0a1b      	lsrs	r3, r3, #8
 80024a6:	f003 0307 	and.w	r3, r3, #7
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	db0b      	blt.n	80024e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	f003 021f 	and.w	r2, r3, #31
 80024d0:	4907      	ldr	r1, [pc, #28]	; (80024f0 <__NVIC_EnableIRQ+0x38>)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	095b      	lsrs	r3, r3, #5
 80024d8:	2001      	movs	r0, #1
 80024da:	fa00 f202 	lsl.w	r2, r0, r2
 80024de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	e000e100 	.word	0xe000e100

080024f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	6039      	str	r1, [r7, #0]
 80024fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002504:	2b00      	cmp	r3, #0
 8002506:	db0a      	blt.n	800251e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	b2da      	uxtb	r2, r3
 800250c:	490c      	ldr	r1, [pc, #48]	; (8002540 <__NVIC_SetPriority+0x4c>)
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	0112      	lsls	r2, r2, #4
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	440b      	add	r3, r1
 8002518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800251c:	e00a      	b.n	8002534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4908      	ldr	r1, [pc, #32]	; (8002544 <__NVIC_SetPriority+0x50>)
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	3b04      	subs	r3, #4
 800252c:	0112      	lsls	r2, r2, #4
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	440b      	add	r3, r1
 8002532:	761a      	strb	r2, [r3, #24]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	e000e100 	.word	0xe000e100
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002548:	b480      	push	{r7}
 800254a:	b089      	sub	sp, #36	; 0x24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f1c3 0307 	rsb	r3, r3, #7
 8002562:	2b04      	cmp	r3, #4
 8002564:	bf28      	it	cs
 8002566:	2304      	movcs	r3, #4
 8002568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3304      	adds	r3, #4
 800256e:	2b06      	cmp	r3, #6
 8002570:	d902      	bls.n	8002578 <NVIC_EncodePriority+0x30>
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	3b03      	subs	r3, #3
 8002576:	e000      	b.n	800257a <NVIC_EncodePriority+0x32>
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257c:	f04f 32ff 	mov.w	r2, #4294967295
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43da      	mvns	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	401a      	ands	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002590:	f04f 31ff 	mov.w	r1, #4294967295
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	fa01 f303 	lsl.w	r3, r1, r3
 800259a:	43d9      	mvns	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a0:	4313      	orrs	r3, r2
         );
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3724      	adds	r7, #36	; 0x24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7ff ff4c 	bl	8002454 <__NVIC_SetPriorityGrouping>
}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025d6:	f7ff ff61 	bl	800249c <__NVIC_GetPriorityGrouping>
 80025da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	68b9      	ldr	r1, [r7, #8]
 80025e0:	6978      	ldr	r0, [r7, #20]
 80025e2:	f7ff ffb1 	bl	8002548 <NVIC_EncodePriority>
 80025e6:	4602      	mov	r2, r0
 80025e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ec:	4611      	mov	r1, r2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff ff80 	bl	80024f4 <__NVIC_SetPriority>
}
 80025f4:	bf00      	nop
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff ff54 	bl	80024b8 <__NVIC_EnableIRQ>
}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002624:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002626:	f7ff fee5 	bl	80023f4 <HAL_GetTick>
 800262a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d008      	beq.n	800264a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2280      	movs	r2, #128	; 0x80
 800263c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e052      	b.n	80026f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0216 	bic.w	r2, r2, #22
 8002658:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695a      	ldr	r2, [r3, #20]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002668:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	2b00      	cmp	r3, #0
 8002670:	d103      	bne.n	800267a <HAL_DMA_Abort+0x62>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002676:	2b00      	cmp	r3, #0
 8002678:	d007      	beq.n	800268a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0208 	bic.w	r2, r2, #8
 8002688:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0201 	bic.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800269a:	e013      	b.n	80026c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800269c:	f7ff feaa 	bl	80023f4 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b05      	cmp	r3, #5
 80026a8:	d90c      	bls.n	80026c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2220      	movs	r2, #32
 80026ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2203      	movs	r2, #3
 80026b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e015      	b.n	80026f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1e4      	bne.n	800269c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d6:	223f      	movs	r2, #63	; 0x3f
 80026d8:	409a      	lsls	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d004      	beq.n	8002716 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2280      	movs	r2, #128	; 0x80
 8002710:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e00c      	b.n	8002730 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2205      	movs	r2, #5
 800271a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0201 	bic.w	r2, r2, #1
 800272c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800273c:	b480      	push	{r7}
 800273e:	b089      	sub	sp, #36	; 0x24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800274e:	2300      	movs	r3, #0
 8002750:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	e177      	b.n	8002a48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002758:	2201      	movs	r2, #1
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	429a      	cmp	r2, r3
 8002772:	f040 8166 	bne.w	8002a42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	2b01      	cmp	r3, #1
 8002780:	d005      	beq.n	800278e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800278a:	2b02      	cmp	r3, #2
 800278c:	d130      	bne.n	80027f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	2203      	movs	r2, #3
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027c4:	2201      	movs	r2, #1
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	f003 0201 	and.w	r2, r3, #1
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d017      	beq.n	800282c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	2203      	movs	r2, #3
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d123      	bne.n	8002880 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	08da      	lsrs	r2, r3, #3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3208      	adds	r2, #8
 8002840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002844:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	220f      	movs	r2, #15
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	08da      	lsrs	r2, r3, #3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3208      	adds	r2, #8
 800287a:	69b9      	ldr	r1, [r7, #24]
 800287c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	2203      	movs	r2, #3
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0203 	and.w	r2, r3, #3
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 80c0 	beq.w	8002a42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	4b66      	ldr	r3, [pc, #408]	; (8002a60 <HAL_GPIO_Init+0x324>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	4a65      	ldr	r2, [pc, #404]	; (8002a60 <HAL_GPIO_Init+0x324>)
 80028cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d0:	6453      	str	r3, [r2, #68]	; 0x44
 80028d2:	4b63      	ldr	r3, [pc, #396]	; (8002a60 <HAL_GPIO_Init+0x324>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028de:	4a61      	ldr	r2, [pc, #388]	; (8002a64 <HAL_GPIO_Init+0x328>)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	089b      	lsrs	r3, r3, #2
 80028e4:	3302      	adds	r3, #2
 80028e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	220f      	movs	r2, #15
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a58      	ldr	r2, [pc, #352]	; (8002a68 <HAL_GPIO_Init+0x32c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d037      	beq.n	800297a <HAL_GPIO_Init+0x23e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a57      	ldr	r2, [pc, #348]	; (8002a6c <HAL_GPIO_Init+0x330>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d031      	beq.n	8002976 <HAL_GPIO_Init+0x23a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a56      	ldr	r2, [pc, #344]	; (8002a70 <HAL_GPIO_Init+0x334>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d02b      	beq.n	8002972 <HAL_GPIO_Init+0x236>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a55      	ldr	r2, [pc, #340]	; (8002a74 <HAL_GPIO_Init+0x338>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d025      	beq.n	800296e <HAL_GPIO_Init+0x232>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a54      	ldr	r2, [pc, #336]	; (8002a78 <HAL_GPIO_Init+0x33c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d01f      	beq.n	800296a <HAL_GPIO_Init+0x22e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a53      	ldr	r2, [pc, #332]	; (8002a7c <HAL_GPIO_Init+0x340>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d019      	beq.n	8002966 <HAL_GPIO_Init+0x22a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a52      	ldr	r2, [pc, #328]	; (8002a80 <HAL_GPIO_Init+0x344>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d013      	beq.n	8002962 <HAL_GPIO_Init+0x226>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a51      	ldr	r2, [pc, #324]	; (8002a84 <HAL_GPIO_Init+0x348>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00d      	beq.n	800295e <HAL_GPIO_Init+0x222>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a50      	ldr	r2, [pc, #320]	; (8002a88 <HAL_GPIO_Init+0x34c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d007      	beq.n	800295a <HAL_GPIO_Init+0x21e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a4f      	ldr	r2, [pc, #316]	; (8002a8c <HAL_GPIO_Init+0x350>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d101      	bne.n	8002956 <HAL_GPIO_Init+0x21a>
 8002952:	2309      	movs	r3, #9
 8002954:	e012      	b.n	800297c <HAL_GPIO_Init+0x240>
 8002956:	230a      	movs	r3, #10
 8002958:	e010      	b.n	800297c <HAL_GPIO_Init+0x240>
 800295a:	2308      	movs	r3, #8
 800295c:	e00e      	b.n	800297c <HAL_GPIO_Init+0x240>
 800295e:	2307      	movs	r3, #7
 8002960:	e00c      	b.n	800297c <HAL_GPIO_Init+0x240>
 8002962:	2306      	movs	r3, #6
 8002964:	e00a      	b.n	800297c <HAL_GPIO_Init+0x240>
 8002966:	2305      	movs	r3, #5
 8002968:	e008      	b.n	800297c <HAL_GPIO_Init+0x240>
 800296a:	2304      	movs	r3, #4
 800296c:	e006      	b.n	800297c <HAL_GPIO_Init+0x240>
 800296e:	2303      	movs	r3, #3
 8002970:	e004      	b.n	800297c <HAL_GPIO_Init+0x240>
 8002972:	2302      	movs	r3, #2
 8002974:	e002      	b.n	800297c <HAL_GPIO_Init+0x240>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_GPIO_Init+0x240>
 800297a:	2300      	movs	r3, #0
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	f002 0203 	and.w	r2, r2, #3
 8002982:	0092      	lsls	r2, r2, #2
 8002984:	4093      	lsls	r3, r2
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800298c:	4935      	ldr	r1, [pc, #212]	; (8002a64 <HAL_GPIO_Init+0x328>)
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	3302      	adds	r3, #2
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800299a:	4b3d      	ldr	r3, [pc, #244]	; (8002a90 <HAL_GPIO_Init+0x354>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029be:	4a34      	ldr	r2, [pc, #208]	; (8002a90 <HAL_GPIO_Init+0x354>)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029c4:	4b32      	ldr	r3, [pc, #200]	; (8002a90 <HAL_GPIO_Init+0x354>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029e8:	4a29      	ldr	r2, [pc, #164]	; (8002a90 <HAL_GPIO_Init+0x354>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ee:	4b28      	ldr	r3, [pc, #160]	; (8002a90 <HAL_GPIO_Init+0x354>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a12:	4a1f      	ldr	r2, [pc, #124]	; (8002a90 <HAL_GPIO_Init+0x354>)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a18:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <HAL_GPIO_Init+0x354>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a3c:	4a14      	ldr	r2, [pc, #80]	; (8002a90 <HAL_GPIO_Init+0x354>)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3301      	adds	r3, #1
 8002a46:	61fb      	str	r3, [r7, #28]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	2b0f      	cmp	r3, #15
 8002a4c:	f67f ae84 	bls.w	8002758 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	3724      	adds	r7, #36	; 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40013800 	.word	0x40013800
 8002a68:	40020000 	.word	0x40020000
 8002a6c:	40020400 	.word	0x40020400
 8002a70:	40020800 	.word	0x40020800
 8002a74:	40020c00 	.word	0x40020c00
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40021400 	.word	0x40021400
 8002a80:	40021800 	.word	0x40021800
 8002a84:	40021c00 	.word	0x40021c00
 8002a88:	40022000 	.word	0x40022000
 8002a8c:	40022400 	.word	0x40022400
 8002a90:	40013c00 	.word	0x40013c00

08002a94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	887b      	ldrh	r3, [r7, #2]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
 8002ab0:	e001      	b.n	8002ab6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	807b      	strh	r3, [r7, #2]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ad4:	787b      	ldrb	r3, [r7, #1]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ada:	887a      	ldrh	r2, [r7, #2]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ae0:	e003      	b.n	8002aea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ae2:	887b      	ldrh	r3, [r7, #2]
 8002ae4:	041a      	lsls	r2, r3, #16
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	619a      	str	r2, [r3, #24]
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002af6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002af8:	b08f      	sub	sp, #60	; 0x3c
 8002afa:	af0a      	add	r7, sp, #40	; 0x28
 8002afc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e10f      	b.n	8002d28 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d106      	bne.n	8002b28 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff fade 	bl	80020e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d102      	bne.n	8002b42 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 f8a9 	bl	8005c9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	603b      	str	r3, [r7, #0]
 8002b52:	687e      	ldr	r6, [r7, #4]
 8002b54:	466d      	mov	r5, sp
 8002b56:	f106 0410 	add.w	r4, r6, #16
 8002b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b66:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b6a:	1d33      	adds	r3, r6, #4
 8002b6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b6e:	6838      	ldr	r0, [r7, #0]
 8002b70:	f003 f834 	bl	8005bdc <USB_CoreInit>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e0d0      	b.n	8002d28 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f003 f897 	bl	8005cc0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b92:	2300      	movs	r3, #0
 8002b94:	73fb      	strb	r3, [r7, #15]
 8002b96:	e04a      	b.n	8002c2e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b98:	7bfa      	ldrb	r2, [r7, #15]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	333d      	adds	r3, #61	; 0x3d
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bac:	7bfa      	ldrb	r2, [r7, #15]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	333c      	adds	r3, #60	; 0x3c
 8002bbc:	7bfa      	ldrb	r2, [r7, #15]
 8002bbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bc0:	7bfa      	ldrb	r2, [r7, #15]
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
 8002bc4:	b298      	uxth	r0, r3
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3344      	adds	r3, #68	; 0x44
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	3340      	adds	r3, #64	; 0x40
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	3348      	adds	r3, #72	; 0x48
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	334c      	adds	r3, #76	; 0x4c
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	3354      	adds	r3, #84	; 0x54
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d3af      	bcc.n	8002b98 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c38:	2300      	movs	r3, #0
 8002c3a:	73fb      	strb	r3, [r7, #15]
 8002c3c:	e044      	b.n	8002cc8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c3e:	7bfa      	ldrb	r2, [r7, #15]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c54:	7bfa      	ldrb	r2, [r7, #15]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c66:	7bfa      	ldrb	r2, [r7, #15]
 8002c68:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c6a:	7bfa      	ldrb	r2, [r7, #15]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c80:	7bfa      	ldrb	r2, [r7, #15]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cac:	7bfa      	ldrb	r2, [r7, #15]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
 8002cc8:	7bfa      	ldrb	r2, [r7, #15]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d3b5      	bcc.n	8002c3e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	687e      	ldr	r6, [r7, #4]
 8002cda:	466d      	mov	r5, sp
 8002cdc:	f106 0410 	add.w	r4, r6, #16
 8002ce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ce2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ce4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ce6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ce8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cec:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cf0:	1d33      	adds	r3, r6, #4
 8002cf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cf4:	6838      	ldr	r0, [r7, #0]
 8002cf6:	f003 f82f 	bl	8005d58 <USB_DevInit>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e00d      	b.n	8002d28 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f003 f9fa 	bl	800611a <USB_DevDisconnect>

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e267      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d075      	beq.n	8002e3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d4e:	4b88      	ldr	r3, [pc, #544]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d00c      	beq.n	8002d74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d5a:	4b85      	ldr	r3, [pc, #532]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d112      	bne.n	8002d8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d66:	4b82      	ldr	r3, [pc, #520]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d72:	d10b      	bne.n	8002d8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d74:	4b7e      	ldr	r3, [pc, #504]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d05b      	beq.n	8002e38 <HAL_RCC_OscConfig+0x108>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d157      	bne.n	8002e38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e242      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d94:	d106      	bne.n	8002da4 <HAL_RCC_OscConfig+0x74>
 8002d96:	4b76      	ldr	r3, [pc, #472]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a75      	ldr	r2, [pc, #468]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	e01d      	b.n	8002de0 <HAL_RCC_OscConfig+0xb0>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dac:	d10c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x98>
 8002dae:	4b70      	ldr	r3, [pc, #448]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a6f      	ldr	r2, [pc, #444]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	4b6d      	ldr	r3, [pc, #436]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a6c      	ldr	r2, [pc, #432]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	e00b      	b.n	8002de0 <HAL_RCC_OscConfig+0xb0>
 8002dc8:	4b69      	ldr	r3, [pc, #420]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a68      	ldr	r2, [pc, #416]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	4b66      	ldr	r3, [pc, #408]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a65      	ldr	r2, [pc, #404]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d013      	beq.n	8002e10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7ff fb04 	bl	80023f4 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df0:	f7ff fb00 	bl	80023f4 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	; 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e207      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	4b5b      	ldr	r3, [pc, #364]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0xc0>
 8002e0e:	e014      	b.n	8002e3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7ff faf0 	bl	80023f4 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e18:	f7ff faec 	bl	80023f4 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b64      	cmp	r3, #100	; 0x64
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e1f3      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e2a:	4b51      	ldr	r3, [pc, #324]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0xe8>
 8002e36:	e000      	b.n	8002e3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d063      	beq.n	8002f0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e46:	4b4a      	ldr	r3, [pc, #296]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00b      	beq.n	8002e6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e52:	4b47      	ldr	r3, [pc, #284]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d11c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e5e:	4b44      	ldr	r3, [pc, #272]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d116      	bne.n	8002e98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6a:	4b41      	ldr	r3, [pc, #260]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_RCC_OscConfig+0x152>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d001      	beq.n	8002e82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e1c7      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e82:	4b3b      	ldr	r3, [pc, #236]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4937      	ldr	r1, [pc, #220]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e96:	e03a      	b.n	8002f0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d020      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ea0:	4b34      	ldr	r3, [pc, #208]	; (8002f74 <HAL_RCC_OscConfig+0x244>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea6:	f7ff faa5 	bl	80023f4 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eae:	f7ff faa1 	bl	80023f4 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e1a8      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec0:	4b2b      	ldr	r3, [pc, #172]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ecc:	4b28      	ldr	r3, [pc, #160]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4925      	ldr	r1, [pc, #148]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	600b      	str	r3, [r1, #0]
 8002ee0:	e015      	b.n	8002f0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ee2:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <HAL_RCC_OscConfig+0x244>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7ff fa84 	bl	80023f4 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef0:	f7ff fa80 	bl	80023f4 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e187      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f02:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d036      	beq.n	8002f88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d016      	beq.n	8002f50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f22:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <HAL_RCC_OscConfig+0x248>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f28:	f7ff fa64 	bl	80023f4 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f30:	f7ff fa60 	bl	80023f4 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e167      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f42:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0x200>
 8002f4e:	e01b      	b.n	8002f88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f50:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <HAL_RCC_OscConfig+0x248>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f56:	f7ff fa4d 	bl	80023f4 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f5c:	e00e      	b.n	8002f7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f5e:	f7ff fa49 	bl	80023f4 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d907      	bls.n	8002f7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e150      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
 8002f70:	40023800 	.word	0x40023800
 8002f74:	42470000 	.word	0x42470000
 8002f78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f7c:	4b88      	ldr	r3, [pc, #544]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8002f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1ea      	bne.n	8002f5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 8097 	beq.w	80030c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f96:	2300      	movs	r3, #0
 8002f98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f9a:	4b81      	ldr	r3, [pc, #516]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10f      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	4b7d      	ldr	r3, [pc, #500]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	4a7c      	ldr	r2, [pc, #496]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8002fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb6:	4b7a      	ldr	r3, [pc, #488]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	60bb      	str	r3, [r7, #8]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc6:	4b77      	ldr	r3, [pc, #476]	; (80031a4 <HAL_RCC_OscConfig+0x474>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d118      	bne.n	8003004 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fd2:	4b74      	ldr	r3, [pc, #464]	; (80031a4 <HAL_RCC_OscConfig+0x474>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a73      	ldr	r2, [pc, #460]	; (80031a4 <HAL_RCC_OscConfig+0x474>)
 8002fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fde:	f7ff fa09 	bl	80023f4 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe6:	f7ff fa05 	bl	80023f4 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e10c      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff8:	4b6a      	ldr	r3, [pc, #424]	; (80031a4 <HAL_RCC_OscConfig+0x474>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f0      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d106      	bne.n	800301a <HAL_RCC_OscConfig+0x2ea>
 800300c:	4b64      	ldr	r3, [pc, #400]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003010:	4a63      	ldr	r2, [pc, #396]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	6713      	str	r3, [r2, #112]	; 0x70
 8003018:	e01c      	b.n	8003054 <HAL_RCC_OscConfig+0x324>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b05      	cmp	r3, #5
 8003020:	d10c      	bne.n	800303c <HAL_RCC_OscConfig+0x30c>
 8003022:	4b5f      	ldr	r3, [pc, #380]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	4a5e      	ldr	r2, [pc, #376]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003028:	f043 0304 	orr.w	r3, r3, #4
 800302c:	6713      	str	r3, [r2, #112]	; 0x70
 800302e:	4b5c      	ldr	r3, [pc, #368]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003032:	4a5b      	ldr	r2, [pc, #364]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6713      	str	r3, [r2, #112]	; 0x70
 800303a:	e00b      	b.n	8003054 <HAL_RCC_OscConfig+0x324>
 800303c:	4b58      	ldr	r3, [pc, #352]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003040:	4a57      	ldr	r2, [pc, #348]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003042:	f023 0301 	bic.w	r3, r3, #1
 8003046:	6713      	str	r3, [r2, #112]	; 0x70
 8003048:	4b55      	ldr	r3, [pc, #340]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	4a54      	ldr	r2, [pc, #336]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 800304e:	f023 0304 	bic.w	r3, r3, #4
 8003052:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d015      	beq.n	8003088 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305c:	f7ff f9ca 	bl	80023f4 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003062:	e00a      	b.n	800307a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003064:	f7ff f9c6 	bl	80023f4 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e0cb      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307a:	4b49      	ldr	r3, [pc, #292]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0ee      	beq.n	8003064 <HAL_RCC_OscConfig+0x334>
 8003086:	e014      	b.n	80030b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003088:	f7ff f9b4 	bl	80023f4 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003090:	f7ff f9b0 	bl	80023f4 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e0b5      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a6:	4b3e      	ldr	r3, [pc, #248]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1ee      	bne.n	8003090 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030b2:	7dfb      	ldrb	r3, [r7, #23]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d105      	bne.n	80030c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b8:	4b39      	ldr	r3, [pc, #228]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	4a38      	ldr	r2, [pc, #224]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 80030be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 80a1 	beq.w	8003210 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030ce:	4b34      	ldr	r3, [pc, #208]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d05c      	beq.n	8003194 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d141      	bne.n	8003166 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e2:	4b31      	ldr	r3, [pc, #196]	; (80031a8 <HAL_RCC_OscConfig+0x478>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7ff f984 	bl	80023f4 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f0:	f7ff f980 	bl	80023f4 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e087      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003102:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69da      	ldr	r2, [r3, #28]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	019b      	lsls	r3, r3, #6
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003124:	085b      	lsrs	r3, r3, #1
 8003126:	3b01      	subs	r3, #1
 8003128:	041b      	lsls	r3, r3, #16
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	061b      	lsls	r3, r3, #24
 8003132:	491b      	ldr	r1, [pc, #108]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003134:	4313      	orrs	r3, r2
 8003136:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003138:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <HAL_RCC_OscConfig+0x478>)
 800313a:	2201      	movs	r2, #1
 800313c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313e:	f7ff f959 	bl	80023f4 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003146:	f7ff f955 	bl	80023f4 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e05c      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003158:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0f0      	beq.n	8003146 <HAL_RCC_OscConfig+0x416>
 8003164:	e054      	b.n	8003210 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003166:	4b10      	ldr	r3, [pc, #64]	; (80031a8 <HAL_RCC_OscConfig+0x478>)
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316c:	f7ff f942 	bl	80023f4 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003174:	f7ff f93e 	bl	80023f4 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e045      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f0      	bne.n	8003174 <HAL_RCC_OscConfig+0x444>
 8003192:	e03d      	b.n	8003210 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d107      	bne.n	80031ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e038      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40007000 	.word	0x40007000
 80031a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031ac:	4b1b      	ldr	r3, [pc, #108]	; (800321c <HAL_RCC_OscConfig+0x4ec>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d028      	beq.n	800320c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d121      	bne.n	800320c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d11a      	bne.n	800320c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031dc:	4013      	ands	r3, r2
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d111      	bne.n	800320c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f2:	085b      	lsrs	r3, r3, #1
 80031f4:	3b01      	subs	r3, #1
 80031f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d107      	bne.n	800320c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003208:	429a      	cmp	r2, r3
 800320a:	d001      	beq.n	8003210 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e000      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40023800 	.word	0x40023800

08003220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0cc      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003234:	4b68      	ldr	r3, [pc, #416]	; (80033d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d90c      	bls.n	800325c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b65      	ldr	r3, [pc, #404]	; (80033d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b63      	ldr	r3, [pc, #396]	; (80033d8 <HAL_RCC_ClockConfig+0x1b8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0b8      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d020      	beq.n	80032aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003274:	4b59      	ldr	r3, [pc, #356]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	4a58      	ldr	r2, [pc, #352]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800327e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800328c:	4b53      	ldr	r3, [pc, #332]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	4a52      	ldr	r2, [pc, #328]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003296:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003298:	4b50      	ldr	r3, [pc, #320]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	494d      	ldr	r1, [pc, #308]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d044      	beq.n	8003340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d107      	bne.n	80032ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	4b47      	ldr	r3, [pc, #284]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d119      	bne.n	80032fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e07f      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d003      	beq.n	80032de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d107      	bne.n	80032ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032de:	4b3f      	ldr	r3, [pc, #252]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d109      	bne.n	80032fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e06f      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ee:	4b3b      	ldr	r3, [pc, #236]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e067      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032fe:	4b37      	ldr	r3, [pc, #220]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f023 0203 	bic.w	r2, r3, #3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4934      	ldr	r1, [pc, #208]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 800330c:	4313      	orrs	r3, r2
 800330e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003310:	f7ff f870 	bl	80023f4 <HAL_GetTick>
 8003314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003316:	e00a      	b.n	800332e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003318:	f7ff f86c 	bl	80023f4 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f241 3288 	movw	r2, #5000	; 0x1388
 8003326:	4293      	cmp	r3, r2
 8003328:	d901      	bls.n	800332e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e04f      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332e:	4b2b      	ldr	r3, [pc, #172]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 020c 	and.w	r2, r3, #12
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	429a      	cmp	r2, r3
 800333e:	d1eb      	bne.n	8003318 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003340:	4b25      	ldr	r3, [pc, #148]	; (80033d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d20c      	bcs.n	8003368 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334e:	4b22      	ldr	r3, [pc, #136]	; (80033d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003356:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d001      	beq.n	8003368 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e032      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003374:	4b19      	ldr	r3, [pc, #100]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4916      	ldr	r1, [pc, #88]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	4313      	orrs	r3, r2
 8003384:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d009      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003392:	4b12      	ldr	r3, [pc, #72]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	490e      	ldr	r1, [pc, #56]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033a6:	f000 f821 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 80033aa:	4602      	mov	r2, r0
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	091b      	lsrs	r3, r3, #4
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	490a      	ldr	r1, [pc, #40]	; (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 80033b8:	5ccb      	ldrb	r3, [r1, r3]
 80033ba:	fa22 f303 	lsr.w	r3, r2, r3
 80033be:	4a09      	ldr	r2, [pc, #36]	; (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033c2:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <HAL_RCC_ClockConfig+0x1c8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fe fee6 	bl	8002198 <HAL_InitTick>

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40023c00 	.word	0x40023c00
 80033dc:	40023800 	.word	0x40023800
 80033e0:	08008f64 	.word	0x08008f64
 80033e4:	20000000 	.word	0x20000000
 80033e8:	20000004 	.word	0x20000004

080033ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033f0:	b094      	sub	sp, #80	; 0x50
 80033f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	647b      	str	r3, [r7, #68]	; 0x44
 80033f8:	2300      	movs	r3, #0
 80033fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033fc:	2300      	movs	r3, #0
 80033fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003404:	4b79      	ldr	r3, [pc, #484]	; (80035ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 030c 	and.w	r3, r3, #12
 800340c:	2b08      	cmp	r3, #8
 800340e:	d00d      	beq.n	800342c <HAL_RCC_GetSysClockFreq+0x40>
 8003410:	2b08      	cmp	r3, #8
 8003412:	f200 80e1 	bhi.w	80035d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <HAL_RCC_GetSysClockFreq+0x34>
 800341a:	2b04      	cmp	r3, #4
 800341c:	d003      	beq.n	8003426 <HAL_RCC_GetSysClockFreq+0x3a>
 800341e:	e0db      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003420:	4b73      	ldr	r3, [pc, #460]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003422:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003424:	e0db      	b.n	80035de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003426:	4b73      	ldr	r3, [pc, #460]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003428:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800342a:	e0d8      	b.n	80035de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800342c:	4b6f      	ldr	r3, [pc, #444]	; (80035ec <HAL_RCC_GetSysClockFreq+0x200>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003434:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003436:	4b6d      	ldr	r3, [pc, #436]	; (80035ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d063      	beq.n	800350a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003442:	4b6a      	ldr	r3, [pc, #424]	; (80035ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	099b      	lsrs	r3, r3, #6
 8003448:	2200      	movs	r2, #0
 800344a:	63bb      	str	r3, [r7, #56]	; 0x38
 800344c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800344e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003454:	633b      	str	r3, [r7, #48]	; 0x30
 8003456:	2300      	movs	r3, #0
 8003458:	637b      	str	r3, [r7, #52]	; 0x34
 800345a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800345e:	4622      	mov	r2, r4
 8003460:	462b      	mov	r3, r5
 8003462:	f04f 0000 	mov.w	r0, #0
 8003466:	f04f 0100 	mov.w	r1, #0
 800346a:	0159      	lsls	r1, r3, #5
 800346c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003470:	0150      	lsls	r0, r2, #5
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4621      	mov	r1, r4
 8003478:	1a51      	subs	r1, r2, r1
 800347a:	6139      	str	r1, [r7, #16]
 800347c:	4629      	mov	r1, r5
 800347e:	eb63 0301 	sbc.w	r3, r3, r1
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003490:	4659      	mov	r1, fp
 8003492:	018b      	lsls	r3, r1, #6
 8003494:	4651      	mov	r1, sl
 8003496:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800349a:	4651      	mov	r1, sl
 800349c:	018a      	lsls	r2, r1, #6
 800349e:	4651      	mov	r1, sl
 80034a0:	ebb2 0801 	subs.w	r8, r2, r1
 80034a4:	4659      	mov	r1, fp
 80034a6:	eb63 0901 	sbc.w	r9, r3, r1
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034be:	4690      	mov	r8, r2
 80034c0:	4699      	mov	r9, r3
 80034c2:	4623      	mov	r3, r4
 80034c4:	eb18 0303 	adds.w	r3, r8, r3
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	462b      	mov	r3, r5
 80034cc:	eb49 0303 	adc.w	r3, r9, r3
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034de:	4629      	mov	r1, r5
 80034e0:	024b      	lsls	r3, r1, #9
 80034e2:	4621      	mov	r1, r4
 80034e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034e8:	4621      	mov	r1, r4
 80034ea:	024a      	lsls	r2, r1, #9
 80034ec:	4610      	mov	r0, r2
 80034ee:	4619      	mov	r1, r3
 80034f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034f2:	2200      	movs	r2, #0
 80034f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034fc:	f7fc fed0 	bl	80002a0 <__aeabi_uldivmod>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4613      	mov	r3, r2
 8003506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003508:	e058      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800350a:	4b38      	ldr	r3, [pc, #224]	; (80035ec <HAL_RCC_GetSysClockFreq+0x200>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	099b      	lsrs	r3, r3, #6
 8003510:	2200      	movs	r2, #0
 8003512:	4618      	mov	r0, r3
 8003514:	4611      	mov	r1, r2
 8003516:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800351a:	623b      	str	r3, [r7, #32]
 800351c:	2300      	movs	r3, #0
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
 8003520:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003524:	4642      	mov	r2, r8
 8003526:	464b      	mov	r3, r9
 8003528:	f04f 0000 	mov.w	r0, #0
 800352c:	f04f 0100 	mov.w	r1, #0
 8003530:	0159      	lsls	r1, r3, #5
 8003532:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003536:	0150      	lsls	r0, r2, #5
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4641      	mov	r1, r8
 800353e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003542:	4649      	mov	r1, r9
 8003544:	eb63 0b01 	sbc.w	fp, r3, r1
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003554:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003558:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800355c:	ebb2 040a 	subs.w	r4, r2, sl
 8003560:	eb63 050b 	sbc.w	r5, r3, fp
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	f04f 0300 	mov.w	r3, #0
 800356c:	00eb      	lsls	r3, r5, #3
 800356e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003572:	00e2      	lsls	r2, r4, #3
 8003574:	4614      	mov	r4, r2
 8003576:	461d      	mov	r5, r3
 8003578:	4643      	mov	r3, r8
 800357a:	18e3      	adds	r3, r4, r3
 800357c:	603b      	str	r3, [r7, #0]
 800357e:	464b      	mov	r3, r9
 8003580:	eb45 0303 	adc.w	r3, r5, r3
 8003584:	607b      	str	r3, [r7, #4]
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003592:	4629      	mov	r1, r5
 8003594:	028b      	lsls	r3, r1, #10
 8003596:	4621      	mov	r1, r4
 8003598:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800359c:	4621      	mov	r1, r4
 800359e:	028a      	lsls	r2, r1, #10
 80035a0:	4610      	mov	r0, r2
 80035a2:	4619      	mov	r1, r3
 80035a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035a6:	2200      	movs	r2, #0
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	61fa      	str	r2, [r7, #28]
 80035ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035b0:	f7fc fe76 	bl	80002a0 <__aeabi_uldivmod>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4613      	mov	r3, r2
 80035ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035bc:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_RCC_GetSysClockFreq+0x200>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	0c1b      	lsrs	r3, r3, #16
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	3301      	adds	r3, #1
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80035cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035d6:	e002      	b.n	80035de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80035da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3750      	adds	r7, #80	; 0x50
 80035e4:	46bd      	mov	sp, r7
 80035e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ea:	bf00      	nop
 80035ec:	40023800 	.word	0x40023800
 80035f0:	00f42400 	.word	0x00f42400
 80035f4:	007a1200 	.word	0x007a1200

080035f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035fc:	4b03      	ldr	r3, [pc, #12]	; (800360c <HAL_RCC_GetHCLKFreq+0x14>)
 80035fe:	681b      	ldr	r3, [r3, #0]
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	20000000 	.word	0x20000000

08003610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003614:	f7ff fff0 	bl	80035f8 <HAL_RCC_GetHCLKFreq>
 8003618:	4602      	mov	r2, r0
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	0a9b      	lsrs	r3, r3, #10
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4903      	ldr	r1, [pc, #12]	; (8003634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003626:	5ccb      	ldrb	r3, [r1, r3]
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40023800 	.word	0x40023800
 8003634:	08008f74 	.word	0x08008f74

08003638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800363c:	f7ff ffdc 	bl	80035f8 <HAL_RCC_GetHCLKFreq>
 8003640:	4602      	mov	r2, r0
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	0b5b      	lsrs	r3, r3, #13
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	4903      	ldr	r1, [pc, #12]	; (800365c <HAL_RCC_GetPCLK2Freq+0x24>)
 800364e:	5ccb      	ldrb	r3, [r1, r3]
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40023800 	.word	0x40023800
 800365c:	08008f74 	.word	0x08008f74

08003660 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	220f      	movs	r2, #15
 800366e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003670:	4b12      	ldr	r3, [pc, #72]	; (80036bc <HAL_RCC_GetClockConfig+0x5c>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 0203 	and.w	r2, r3, #3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800367c:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <HAL_RCC_GetClockConfig+0x5c>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003688:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <HAL_RCC_GetClockConfig+0x5c>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003694:	4b09      	ldr	r3, [pc, #36]	; (80036bc <HAL_RCC_GetClockConfig+0x5c>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	08db      	lsrs	r3, r3, #3
 800369a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036a2:	4b07      	ldr	r3, [pc, #28]	; (80036c0 <HAL_RCC_GetClockConfig+0x60>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 020f 	and.w	r2, r3, #15
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	601a      	str	r2, [r3, #0]
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40023c00 	.word	0x40023c00

080036c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10b      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d105      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d075      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036f8:	4b91      	ldr	r3, [pc, #580]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80036fe:	f7fe fe79 	bl	80023f4 <HAL_GetTick>
 8003702:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003704:	e008      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003706:	f7fe fe75 	bl	80023f4 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e189      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003718:	4b8a      	ldr	r3, [pc, #552]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1f0      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d009      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	019a      	lsls	r2, r3, #6
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	071b      	lsls	r3, r3, #28
 800373c:	4981      	ldr	r1, [pc, #516]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d01f      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003750:	4b7c      	ldr	r3, [pc, #496]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003756:	0f1b      	lsrs	r3, r3, #28
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	019a      	lsls	r2, r3, #6
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	061b      	lsls	r3, r3, #24
 800376a:	431a      	orrs	r2, r3
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	071b      	lsls	r3, r3, #28
 8003770:	4974      	ldr	r1, [pc, #464]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003778:	4b72      	ldr	r3, [pc, #456]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800377a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800377e:	f023 021f 	bic.w	r2, r3, #31
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	3b01      	subs	r3, #1
 8003788:	496e      	ldr	r1, [pc, #440]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00d      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	019a      	lsls	r2, r3, #6
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	061b      	lsls	r3, r3, #24
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	071b      	lsls	r3, r3, #28
 80037b0:	4964      	ldr	r1, [pc, #400]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037b8:	4b61      	ldr	r3, [pc, #388]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80037be:	f7fe fe19 	bl	80023f4 <HAL_GetTick>
 80037c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037c4:	e008      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80037c6:	f7fe fe15 	bl	80023f4 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e129      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037d8:	4b5a      	ldr	r3, [pc, #360]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d105      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d079      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80037fc:	4b52      	ldr	r3, [pc, #328]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003802:	f7fe fdf7 	bl	80023f4 <HAL_GetTick>
 8003806:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003808:	e008      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800380a:	f7fe fdf3 	bl	80023f4 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e107      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800381c:	4b49      	ldr	r3, [pc, #292]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003828:	d0ef      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	d020      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003836:	4b43      	ldr	r3, [pc, #268]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383c:	0f1b      	lsrs	r3, r3, #28
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	019a      	lsls	r2, r3, #6
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	061b      	lsls	r3, r3, #24
 8003850:	431a      	orrs	r2, r3
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	071b      	lsls	r3, r3, #28
 8003856:	493b      	ldr	r1, [pc, #236]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800385e:	4b39      	ldr	r3, [pc, #228]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003864:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	3b01      	subs	r3, #1
 800386e:	021b      	lsls	r3, r3, #8
 8003870:	4934      	ldr	r1, [pc, #208]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b00      	cmp	r3, #0
 8003882:	d01e      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003884:	4b2f      	ldr	r3, [pc, #188]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388a:	0e1b      	lsrs	r3, r3, #24
 800388c:	f003 030f 	and.w	r3, r3, #15
 8003890:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	019a      	lsls	r2, r3, #6
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	061b      	lsls	r3, r3, #24
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	071b      	lsls	r3, r3, #28
 80038a4:	4927      	ldr	r1, [pc, #156]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80038ac:	4b25      	ldr	r3, [pc, #148]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	4922      	ldr	r1, [pc, #136]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80038c2:	4b21      	ldr	r3, [pc, #132]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80038c4:	2201      	movs	r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038c8:	f7fe fd94 	bl	80023f4 <HAL_GetTick>
 80038cc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80038d0:	f7fe fd90 	bl	80023f4 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e0a4      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038e2:	4b18      	ldr	r3, [pc, #96]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038ee:	d1ef      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 808b 	beq.w	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	4b10      	ldr	r3, [pc, #64]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	4a0f      	ldr	r2, [pc, #60]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390c:	6413      	str	r3, [r2, #64]	; 0x40
 800390e:	4b0d      	ldr	r3, [pc, #52]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800391a:	4b0c      	ldr	r3, [pc, #48]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a0b      	ldr	r2, [pc, #44]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003924:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003926:	f7fe fd65 	bl	80023f4 <HAL_GetTick>
 800392a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800392c:	e010      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800392e:	f7fe fd61 	bl	80023f4 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d909      	bls.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e075      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003940:	42470068 	.word	0x42470068
 8003944:	40023800 	.word	0x40023800
 8003948:	42470070 	.word	0x42470070
 800394c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003950:	4b38      	ldr	r3, [pc, #224]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0e8      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800395c:	4b36      	ldr	r3, [pc, #216]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003964:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d02f      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	429a      	cmp	r2, r3
 8003978:	d028      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800397a:	4b2f      	ldr	r3, [pc, #188]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003982:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003984:	4b2d      	ldr	r3, [pc, #180]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003986:	2201      	movs	r2, #1
 8003988:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800398a:	4b2c      	ldr	r3, [pc, #176]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003990:	4a29      	ldr	r2, [pc, #164]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003996:	4b28      	ldr	r3, [pc, #160]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d114      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80039a2:	f7fe fd27 	bl	80023f4 <HAL_GetTick>
 80039a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a8:	e00a      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039aa:	f7fe fd23 	bl	80023f4 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e035      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c0:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0ee      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039d8:	d10d      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80039da:	4b17      	ldr	r3, [pc, #92]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80039ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ee:	4912      	ldr	r1, [pc, #72]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	608b      	str	r3, [r1, #8]
 80039f4:	e005      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80039f6:	4b10      	ldr	r3, [pc, #64]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	4a0f      	ldr	r2, [pc, #60]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80039fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a00:	6093      	str	r3, [r2, #8]
 8003a02:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003a04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a0e:	490a      	ldr	r1, [pc, #40]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d004      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003a26:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003a28:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40007000 	.word	0x40007000
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	42470e40 	.word	0x42470e40
 8003a40:	424711e0 	.word	0x424711e0

08003a44 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e066      	b.n	8003b28 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	7f5b      	ldrb	r3, [r3, #29]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d105      	bne.n	8003a70 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fe fac0 	bl	8001ff0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	22ca      	movs	r2, #202	; 0xca
 8003a7c:	625a      	str	r2, [r3, #36]	; 0x24
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2253      	movs	r2, #83	; 0x53
 8003a84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fcb2 	bl	80043f0 <RTC_EnterInitMode>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d12c      	bne.n	8003af0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6812      	ldr	r2, [r2, #0]
 8003aa0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aa8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6899      	ldr	r1, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	68d2      	ldr	r2, [r2, #12]
 8003ad0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6919      	ldr	r1, [r3, #16]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	041a      	lsls	r2, r3, #16
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fcb9 	bl	800445e <RTC_ExitInitMode>
 8003aec:	4603      	mov	r3, r0
 8003aee:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d113      	bne.n	8003b1e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b04:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699a      	ldr	r2, [r3, #24]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	22ff      	movs	r2, #255	; 0xff
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003b30:	b590      	push	{r4, r7, lr}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	7f1b      	ldrb	r3, [r3, #28]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_RTC_SetTime+0x1c>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e087      	b.n	8003c5c <HAL_RTC_SetTime+0x12c>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2202      	movs	r2, #2
 8003b56:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d126      	bne.n	8003bac <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d102      	bne.n	8003b72 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fc96 	bl	80044a8 <RTC_ByteToBcd2>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	785b      	ldrb	r3, [r3, #1]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 fc8f 	bl	80044a8 <RTC_ByteToBcd2>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003b8e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	789b      	ldrb	r3, [r3, #2]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 fc87 	bl	80044a8 <RTC_ByteToBcd2>
 8003b9a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003b9c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	78db      	ldrb	r3, [r3, #3]
 8003ba4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	e018      	b.n	8003bde <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d102      	bne.n	8003bc0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	785b      	ldrb	r3, [r3, #1]
 8003bca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003bcc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003bd2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	78db      	ldrb	r3, [r3, #3]
 8003bd8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	22ca      	movs	r2, #202	; 0xca
 8003be4:	625a      	str	r2, [r3, #36]	; 0x24
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2253      	movs	r2, #83	; 0x53
 8003bec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 fbfe 	bl	80043f0 <RTC_EnterInitMode>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003bf8:	7cfb      	ldrb	r3, [r7, #19]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d120      	bne.n	8003c40 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003c08:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003c0c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c1c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6899      	ldr	r1, [r3, #8]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 fc11 	bl	800445e <RTC_ExitInitMode>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003c40:	7cfb      	ldrb	r3, [r7, #19]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d102      	bne.n	8003c4c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	22ff      	movs	r2, #255	; 0xff
 8003c52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	771a      	strb	r2, [r3, #28]

  return status;
 8003c5a:	7cfb      	ldrb	r3, [r7, #19]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	371c      	adds	r7, #28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd90      	pop	{r4, r7, pc}

08003c64 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003c96:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003c9a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	0c1b      	lsrs	r3, r3, #16
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	0a1b      	lsrs	r3, r3, #8
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	0d9b      	lsrs	r3, r3, #22
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d11a      	bne.n	8003d16 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fbfc 	bl	80044e2 <RTC_Bcd2ToByte>
 8003cea:	4603      	mov	r3, r0
 8003cec:	461a      	mov	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	785b      	ldrb	r3, [r3, #1]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fbf3 	bl	80044e2 <RTC_Bcd2ToByte>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	461a      	mov	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	789b      	ldrb	r3, [r3, #2]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fbea 	bl	80044e2 <RTC_Bcd2ToByte>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	461a      	mov	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003d20:	b590      	push	{r4, r7, lr}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	7f1b      	ldrb	r3, [r3, #28]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_RTC_SetDate+0x1c>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e071      	b.n	8003e20 <HAL_RTC_SetDate+0x100>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2202      	movs	r2, #2
 8003d46:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10e      	bne.n	8003d6c <HAL_RTC_SetDate+0x4c>
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	785b      	ldrb	r3, [r3, #1]
 8003d52:	f003 0310 	and.w	r3, r3, #16
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d008      	beq.n	8003d6c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	785b      	ldrb	r3, [r3, #1]
 8003d5e:	f023 0310 	bic.w	r3, r3, #16
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	330a      	adds	r3, #10
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d11c      	bne.n	8003dac <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	78db      	ldrb	r3, [r3, #3]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fb96 	bl	80044a8 <RTC_ByteToBcd2>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	785b      	ldrb	r3, [r3, #1]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fb8f 	bl	80044a8 <RTC_ByteToBcd2>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003d8e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	789b      	ldrb	r3, [r3, #2]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fb87 	bl	80044a8 <RTC_ByteToBcd2>
 8003d9a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003d9c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	e00e      	b.n	8003dca <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	78db      	ldrb	r3, [r3, #3]
 8003db0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	785b      	ldrb	r3, [r3, #1]
 8003db6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003db8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003dbe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	22ca      	movs	r2, #202	; 0xca
 8003dd0:	625a      	str	r2, [r3, #36]	; 0x24
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2253      	movs	r2, #83	; 0x53
 8003dd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 fb08 	bl	80043f0 <RTC_EnterInitMode>
 8003de0:	4603      	mov	r3, r0
 8003de2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003de4:	7cfb      	ldrb	r3, [r7, #19]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10c      	bne.n	8003e04 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003df4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003df8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 fb2f 	bl	800445e <RTC_ExitInitMode>
 8003e00:	4603      	mov	r3, r0
 8003e02:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003e04:	7cfb      	ldrb	r3, [r7, #19]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d102      	bne.n	8003e10 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	22ff      	movs	r2, #255	; 0xff
 8003e16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	771a      	strb	r2, [r3, #28]

  return status;
 8003e1e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	371c      	adds	r7, #28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd90      	pop	{r4, r7, pc}

08003e28 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e42:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003e46:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	0c1b      	lsrs	r3, r3, #16
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	0a1b      	lsrs	r3, r3, #8
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	f003 031f 	and.w	r3, r3, #31
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	0b5b      	lsrs	r3, r3, #13
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d11a      	bne.n	8003ebc <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	78db      	ldrb	r3, [r3, #3]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fb29 	bl	80044e2 <RTC_Bcd2ToByte>
 8003e90:	4603      	mov	r3, r0
 8003e92:	461a      	mov	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	785b      	ldrb	r3, [r3, #1]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fb20 	bl	80044e2 <RTC_Bcd2ToByte>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	789b      	ldrb	r3, [r3, #2]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fb17 	bl	80044e2 <RTC_Bcd2ToByte>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003ec6:	b590      	push	{r4, r7, lr}
 8003ec8:	b089      	sub	sp, #36	; 0x24
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	7f1b      	ldrb	r3, [r3, #28]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <HAL_RTC_SetAlarm+0x24>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e113      	b.n	8004112 <HAL_RTC_SetAlarm+0x24c>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d137      	bne.n	8003f6c <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d102      	bne.n	8003f10 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 fac7 	bl	80044a8 <RTC_ByteToBcd2>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	785b      	ldrb	r3, [r3, #1]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fac0 	bl	80044a8 <RTC_ByteToBcd2>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003f2c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	789b      	ldrb	r3, [r3, #2]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fab8 	bl	80044a8 <RTC_ByteToBcd2>
 8003f38:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003f3a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	78db      	ldrb	r3, [r3, #3]
 8003f42:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003f44:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 faaa 	bl	80044a8 <RTC_ByteToBcd2>
 8003f54:	4603      	mov	r3, r0
 8003f56:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003f58:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003f60:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61fb      	str	r3, [r7, #28]
 8003f6a:	e023      	b.n	8003fb4 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d102      	bne.n	8003f80 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	785b      	ldrb	r3, [r3, #1]
 8003f8a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003f8c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003f92:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	78db      	ldrb	r3, [r3, #3]
 8003f98:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003f9a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fa2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003fa4:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003faa:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	22ca      	movs	r2, #202	; 0xca
 8003fc6:	625a      	str	r2, [r3, #36]	; 0x24
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2253      	movs	r2, #83	; 0x53
 8003fce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fd8:	d148      	bne.n	800406c <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fe8:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ff8:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	b2da      	uxtb	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800400a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800400c:	f7fe f9f2 	bl	80023f4 <HAL_GetTick>
 8004010:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004012:	e013      	b.n	800403c <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004014:	f7fe f9ee 	bl	80023f4 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004022:	d90b      	bls.n	800403c <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	22ff      	movs	r2, #255	; 0xff
 800402a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2203      	movs	r2, #3
 8004030:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e06a      	b.n	8004112 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0e4      	beq.n	8004014 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69fa      	ldr	r2, [r7, #28]
 8004050:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004068:	609a      	str	r2, [r3, #8]
 800406a:	e047      	b.n	80040fc <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800407a:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800408a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	b2da      	uxtb	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f462 7220 	orn	r2, r2, #640	; 0x280
 800409c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800409e:	f7fe f9a9 	bl	80023f4 <HAL_GetTick>
 80040a2:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80040a4:	e013      	b.n	80040ce <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040a6:	f7fe f9a5 	bl	80023f4 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040b4:	d90b      	bls.n	80040ce <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	22ff      	movs	r2, #255	; 0xff
 80040bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2203      	movs	r2, #3
 80040c2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e021      	b.n	8004112 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0e4      	beq.n	80040a6 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	69fa      	ldr	r2, [r7, #28]
 80040e2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040fa:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	22ff      	movs	r2, #255	; 0xff
 8004102:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2201      	movs	r2, #1
 8004108:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3724      	adds	r7, #36	; 0x24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd90      	pop	{r4, r7, pc}
	...

0800411c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800411c:	b590      	push	{r4, r7, lr}
 800411e:	b089      	sub	sp, #36	; 0x24
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004128:	4b9a      	ldr	r3, [pc, #616]	; (8004394 <HAL_RTC_SetAlarm_IT+0x278>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a9a      	ldr	r2, [pc, #616]	; (8004398 <HAL_RTC_SetAlarm_IT+0x27c>)
 800412e:	fba2 2303 	umull	r2, r3, r2, r3
 8004132:	0adb      	lsrs	r3, r3, #11
 8004134:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004138:	fb02 f303 	mul.w	r3, r2, r3
 800413c:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	7f1b      	ldrb	r3, [r3, #28]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_RTC_SetAlarm_IT+0x36>
 800414e:	2302      	movs	r3, #2
 8004150:	e11c      	b.n	800438c <HAL_RTC_SetAlarm_IT+0x270>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2202      	movs	r2, #2
 800415c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d137      	bne.n	80041d4 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416e:	2b00      	cmp	r3, #0
 8004170:	d102      	bne.n	8004178 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2200      	movs	r2, #0
 8004176:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f000 f993 	bl	80044a8 <RTC_ByteToBcd2>
 8004182:	4603      	mov	r3, r0
 8004184:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	785b      	ldrb	r3, [r3, #1]
 800418a:	4618      	mov	r0, r3
 800418c:	f000 f98c 	bl	80044a8 <RTC_ByteToBcd2>
 8004190:	4603      	mov	r3, r0
 8004192:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004194:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	789b      	ldrb	r3, [r3, #2]
 800419a:	4618      	mov	r0, r3
 800419c:	f000 f984 	bl	80044a8 <RTC_ByteToBcd2>
 80041a0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80041a2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	78db      	ldrb	r3, [r3, #3]
 80041aa:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80041ac:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 f976 	bl	80044a8 <RTC_ByteToBcd2>
 80041bc:	4603      	mov	r3, r0
 80041be:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80041c0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80041c8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80041ce:	4313      	orrs	r3, r2
 80041d0:	61fb      	str	r3, [r7, #28]
 80041d2:	e023      	b.n	800421c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d102      	bne.n	80041e8 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	2200      	movs	r2, #0
 80041e6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	785b      	ldrb	r3, [r3, #1]
 80041f2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80041f4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80041fa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	78db      	ldrb	r3, [r3, #3]
 8004200:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004202:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f893 3020 	ldrb.w	r3, [r3, #32]
 800420a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800420c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004212:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004218:	4313      	orrs	r3, r2
 800421a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004224:	4313      	orrs	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	22ca      	movs	r2, #202	; 0xca
 800422e:	625a      	str	r2, [r3, #36]	; 0x24
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2253      	movs	r2, #83	; 0x53
 8004236:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004240:	d141      	bne.n	80042c6 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004250:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	b2da      	uxtb	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004262:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	1e5a      	subs	r2, r3, #1
 8004268:	617a      	str	r2, [r7, #20]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10b      	bne.n	8004286 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	22ff      	movs	r2, #255	; 0xff
 8004274:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2203      	movs	r2, #3
 800427a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e082      	b.n	800438c <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0e7      	beq.n	8004264 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	69fa      	ldr	r2, [r7, #28]
 800429a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042b2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042c2:	609a      	str	r2, [r3, #8]
 80042c4:	e04b      	b.n	800435e <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80042d4:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f462 7220 	orn	r2, r2, #640	; 0x280
 80042e6:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80042e8:	4b2a      	ldr	r3, [pc, #168]	; (8004394 <HAL_RTC_SetAlarm_IT+0x278>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a2a      	ldr	r2, [pc, #168]	; (8004398 <HAL_RTC_SetAlarm_IT+0x27c>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	0adb      	lsrs	r3, r3, #11
 80042f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042f8:	fb02 f303 	mul.w	r3, r2, r3
 80042fc:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	1e5a      	subs	r2, r3, #1
 8004302:	617a      	str	r2, [r7, #20]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10b      	bne.n	8004320 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	22ff      	movs	r2, #255	; 0xff
 800430e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2203      	movs	r2, #3
 8004314:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e035      	b.n	800438c <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0e7      	beq.n	80042fe <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800435c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800435e:	4b0f      	ldr	r3, [pc, #60]	; (800439c <HAL_RTC_SetAlarm_IT+0x280>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a0e      	ldr	r2, [pc, #56]	; (800439c <HAL_RTC_SetAlarm_IT+0x280>)
 8004364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004368:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800436a:	4b0c      	ldr	r3, [pc, #48]	; (800439c <HAL_RTC_SetAlarm_IT+0x280>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	4a0b      	ldr	r2, [pc, #44]	; (800439c <HAL_RTC_SetAlarm_IT+0x280>)
 8004370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004374:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	22ff      	movs	r2, #255	; 0xff
 800437c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2201      	movs	r2, #1
 8004382:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3724      	adds	r7, #36	; 0x24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd90      	pop	{r4, r7, pc}
 8004394:	20000000 	.word	0x20000000
 8004398:	10624dd3 	.word	0x10624dd3
 800439c:	40013c00 	.word	0x40013c00

080043a0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043ba:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043bc:	f7fe f81a 	bl	80023f4 <HAL_GetTick>
 80043c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80043c2:	e009      	b.n	80043d8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80043c4:	f7fe f816 	bl	80023f4 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043d2:	d901      	bls.n	80043d8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e007      	b.n	80043e8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f003 0320 	and.w	r3, r3, #32
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0ee      	beq.n	80043c4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440a:	2b00      	cmp	r3, #0
 800440c:	d122      	bne.n	8004454 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800441c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800441e:	f7fd ffe9 	bl	80023f4 <HAL_GetTick>
 8004422:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004424:	e00c      	b.n	8004440 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004426:	f7fd ffe5 	bl	80023f4 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004434:	d904      	bls.n	8004440 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2204      	movs	r2, #4
 800443a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	d102      	bne.n	8004454 <RTC_EnterInitMode+0x64>
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d1e8      	bne.n	8004426 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004454:	7bfb      	ldrb	r3, [r7, #15]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b084      	sub	sp, #16
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004478:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10a      	bne.n	800449e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7ff ff89 	bl	80043a0 <HAL_RTC_WaitForSynchro>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d004      	beq.n	800449e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2204      	movs	r2, #4
 8004498:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800449e:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	4603      	mov	r3, r0
 80044b0:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80044b6:	e005      	b.n	80044c4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	3301      	adds	r3, #1
 80044bc:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	3b0a      	subs	r3, #10
 80044c2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80044c4:	79fb      	ldrb	r3, [r7, #7]
 80044c6:	2b09      	cmp	r3, #9
 80044c8:	d8f6      	bhi.n	80044b8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	b2db      	uxtb	r3, r3
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b085      	sub	sp, #20
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	4603      	mov	r3, r0
 80044ea:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80044f0:	79fb      	ldrb	r3, [r7, #7]
 80044f2:	091b      	lsrs	r3, r3, #4
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	461a      	mov	r2, r3
 80044f8:	0092      	lsls	r2, r2, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8004500:	79fb      	ldrb	r3, [r7, #7]
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	b2da      	uxtb	r2, r3
 8004508:	7bfb      	ldrb	r3, [r7, #15]
 800450a:	4413      	add	r3, r2
 800450c:	b2db      	uxtb	r3, r3
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800451a:	b480      	push	{r7}
 800451c:	b087      	sub	sp, #28
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3350      	adds	r3, #80	; 0x50
 8004530:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4413      	add	r3, r2
 800453a:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	601a      	str	r2, [r3, #0]
}
 8004542:	bf00      	nop
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800454e:	b480      	push	{r7}
 8004550:	b085      	sub	sp, #20
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3350      	adds	r3, #80	; 0x50
 8004562:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4413      	add	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b082      	sub	sp, #8
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e041      	b.n	8004614 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d106      	bne.n	80045aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f839 	bl	800461c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2202      	movs	r2, #2
 80045ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	3304      	adds	r3, #4
 80045ba:	4619      	mov	r1, r3
 80045bc:	4610      	mov	r0, r2
 80045be:	f000 f9d7 	bl	8004970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b01      	cmp	r3, #1
 8004642:	d001      	beq.n	8004648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e04e      	b.n	80046e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a23      	ldr	r2, [pc, #140]	; (80046f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d022      	beq.n	80046b0 <HAL_TIM_Base_Start_IT+0x80>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004672:	d01d      	beq.n	80046b0 <HAL_TIM_Base_Start_IT+0x80>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a1f      	ldr	r2, [pc, #124]	; (80046f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d018      	beq.n	80046b0 <HAL_TIM_Base_Start_IT+0x80>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a1e      	ldr	r2, [pc, #120]	; (80046fc <HAL_TIM_Base_Start_IT+0xcc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d013      	beq.n	80046b0 <HAL_TIM_Base_Start_IT+0x80>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a1c      	ldr	r2, [pc, #112]	; (8004700 <HAL_TIM_Base_Start_IT+0xd0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d00e      	beq.n	80046b0 <HAL_TIM_Base_Start_IT+0x80>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a1b      	ldr	r2, [pc, #108]	; (8004704 <HAL_TIM_Base_Start_IT+0xd4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d009      	beq.n	80046b0 <HAL_TIM_Base_Start_IT+0x80>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a19      	ldr	r2, [pc, #100]	; (8004708 <HAL_TIM_Base_Start_IT+0xd8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d004      	beq.n	80046b0 <HAL_TIM_Base_Start_IT+0x80>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a18      	ldr	r2, [pc, #96]	; (800470c <HAL_TIM_Base_Start_IT+0xdc>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d111      	bne.n	80046d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b06      	cmp	r3, #6
 80046c0:	d010      	beq.n	80046e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f042 0201 	orr.w	r2, r2, #1
 80046d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d2:	e007      	b.n	80046e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40010000 	.word	0x40010000
 80046f8:	40000400 	.word	0x40000400
 80046fc:	40000800 	.word	0x40000800
 8004700:	40000c00 	.word	0x40000c00
 8004704:	40010400 	.word	0x40010400
 8004708:	40014000 	.word	0x40014000
 800470c:	40001800 	.word	0x40001800

08004710 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b02      	cmp	r3, #2
 8004724:	d122      	bne.n	800476c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b02      	cmp	r3, #2
 8004732:	d11b      	bne.n	800476c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f06f 0202 	mvn.w	r2, #2
 800473c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f8ee 	bl	8004934 <HAL_TIM_IC_CaptureCallback>
 8004758:	e005      	b.n	8004766 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f8e0 	bl	8004920 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f8f1 	bl	8004948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b04      	cmp	r3, #4
 8004778:	d122      	bne.n	80047c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b04      	cmp	r3, #4
 8004786:	d11b      	bne.n	80047c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f06f 0204 	mvn.w	r2, #4
 8004790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2202      	movs	r2, #2
 8004796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f8c4 	bl	8004934 <HAL_TIM_IC_CaptureCallback>
 80047ac:	e005      	b.n	80047ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f8b6 	bl	8004920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f8c7 	bl	8004948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d122      	bne.n	8004814 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d11b      	bne.n	8004814 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f06f 0208 	mvn.w	r2, #8
 80047e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2204      	movs	r2, #4
 80047ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f89a 	bl	8004934 <HAL_TIM_IC_CaptureCallback>
 8004800:	e005      	b.n	800480e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f88c 	bl	8004920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f89d 	bl	8004948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f003 0310 	and.w	r3, r3, #16
 800481e:	2b10      	cmp	r3, #16
 8004820:	d122      	bne.n	8004868 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f003 0310 	and.w	r3, r3, #16
 800482c:	2b10      	cmp	r3, #16
 800482e:	d11b      	bne.n	8004868 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f06f 0210 	mvn.w	r2, #16
 8004838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2208      	movs	r2, #8
 800483e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f870 	bl	8004934 <HAL_TIM_IC_CaptureCallback>
 8004854:	e005      	b.n	8004862 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f862 	bl	8004920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f873 	bl	8004948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b01      	cmp	r3, #1
 8004874:	d10e      	bne.n	8004894 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b01      	cmp	r3, #1
 8004882:	d107      	bne.n	8004894 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f06f 0201 	mvn.w	r2, #1
 800488c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7fd fa60 	bl	8001d54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489e:	2b80      	cmp	r3, #128	; 0x80
 80048a0:	d10e      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ac:	2b80      	cmp	r3, #128	; 0x80
 80048ae:	d107      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f902 	bl	8004ac4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ca:	2b40      	cmp	r3, #64	; 0x40
 80048cc:	d10e      	bne.n	80048ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d8:	2b40      	cmp	r3, #64	; 0x40
 80048da:	d107      	bne.n	80048ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f838 	bl	800495c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	d10e      	bne.n	8004918 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b20      	cmp	r3, #32
 8004906:	d107      	bne.n	8004918 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0220 	mvn.w	r2, #32
 8004910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f8cc 	bl	8004ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004918:	bf00      	nop
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a40      	ldr	r2, [pc, #256]	; (8004a84 <TIM_Base_SetConfig+0x114>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d013      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498e:	d00f      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a3d      	ldr	r2, [pc, #244]	; (8004a88 <TIM_Base_SetConfig+0x118>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00b      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a3c      	ldr	r2, [pc, #240]	; (8004a8c <TIM_Base_SetConfig+0x11c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d007      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a3b      	ldr	r2, [pc, #236]	; (8004a90 <TIM_Base_SetConfig+0x120>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d003      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a3a      	ldr	r2, [pc, #232]	; (8004a94 <TIM_Base_SetConfig+0x124>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d108      	bne.n	80049c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a2f      	ldr	r2, [pc, #188]	; (8004a84 <TIM_Base_SetConfig+0x114>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d02b      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d0:	d027      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a2c      	ldr	r2, [pc, #176]	; (8004a88 <TIM_Base_SetConfig+0x118>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d023      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a2b      	ldr	r2, [pc, #172]	; (8004a8c <TIM_Base_SetConfig+0x11c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d01f      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a2a      	ldr	r2, [pc, #168]	; (8004a90 <TIM_Base_SetConfig+0x120>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d01b      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a29      	ldr	r2, [pc, #164]	; (8004a94 <TIM_Base_SetConfig+0x124>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d017      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a28      	ldr	r2, [pc, #160]	; (8004a98 <TIM_Base_SetConfig+0x128>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d013      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a27      	ldr	r2, [pc, #156]	; (8004a9c <TIM_Base_SetConfig+0x12c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00f      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a26      	ldr	r2, [pc, #152]	; (8004aa0 <TIM_Base_SetConfig+0x130>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00b      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a25      	ldr	r2, [pc, #148]	; (8004aa4 <TIM_Base_SetConfig+0x134>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d007      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a24      	ldr	r2, [pc, #144]	; (8004aa8 <TIM_Base_SetConfig+0x138>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d003      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a23      	ldr	r2, [pc, #140]	; (8004aac <TIM_Base_SetConfig+0x13c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d108      	bne.n	8004a34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a0a      	ldr	r2, [pc, #40]	; (8004a84 <TIM_Base_SetConfig+0x114>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d003      	beq.n	8004a68 <TIM_Base_SetConfig+0xf8>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a0c      	ldr	r2, [pc, #48]	; (8004a94 <TIM_Base_SetConfig+0x124>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d103      	bne.n	8004a70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	615a      	str	r2, [r3, #20]
}
 8004a76:	bf00      	nop
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	40010000 	.word	0x40010000
 8004a88:	40000400 	.word	0x40000400
 8004a8c:	40000800 	.word	0x40000800
 8004a90:	40000c00 	.word	0x40000c00
 8004a94:	40010400 	.word	0x40010400
 8004a98:	40014000 	.word	0x40014000
 8004a9c:	40014400 	.word	0x40014400
 8004aa0:	40014800 	.word	0x40014800
 8004aa4:	40001800 	.word	0x40001800
 8004aa8:	40001c00 	.word	0x40001c00
 8004aac:	40002000 	.word	0x40002000

08004ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e03f      	b.n	8004b6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fd faa0 	bl	8002044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2224      	movs	r2, #36	; 0x24
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 fde9 	bl	80056f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695a      	ldr	r2, [r3, #20]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b08a      	sub	sp, #40	; 0x28
 8004b76:	af02      	add	r7, sp, #8
 8004b78:	60f8      	str	r0, [r7, #12]
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	603b      	str	r3, [r7, #0]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	d17c      	bne.n	8004c8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <HAL_UART_Transmit+0x2c>
 8004b98:	88fb      	ldrh	r3, [r7, #6]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e075      	b.n	8004c8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <HAL_UART_Transmit+0x3e>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e06e      	b.n	8004c8e <HAL_UART_Transmit+0x11c>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2221      	movs	r2, #33	; 0x21
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bc6:	f7fd fc15 	bl	80023f4 <HAL_GetTick>
 8004bca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	88fa      	ldrh	r2, [r7, #6]
 8004bd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	88fa      	ldrh	r2, [r7, #6]
 8004bd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be0:	d108      	bne.n	8004bf4 <HAL_UART_Transmit+0x82>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d104      	bne.n	8004bf4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	61bb      	str	r3, [r7, #24]
 8004bf2:	e003      	b.n	8004bfc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c04:	e02a      	b.n	8004c5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2180      	movs	r1, #128	; 0x80
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fb29 	bl	8005268 <UART_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e036      	b.n	8004c8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10b      	bne.n	8004c3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	3302      	adds	r3, #2
 8004c3a:	61bb      	str	r3, [r7, #24]
 8004c3c:	e007      	b.n	8004c4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	781a      	ldrb	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	3b01      	subs	r3, #1
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1cf      	bne.n	8004c06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2140      	movs	r1, #64	; 0x40
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 faf9 	bl	8005268 <UART_WaitOnFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e006      	b.n	8004c8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	e000      	b.n	8004c8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c8c:	2302      	movs	r3, #2
  }
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3720      	adds	r7, #32
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	60f8      	str	r0, [r7, #12]
 8004c9e:	60b9      	str	r1, [r7, #8]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b20      	cmp	r3, #32
 8004cae:	d11d      	bne.n	8004cec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <HAL_UART_Receive_IT+0x26>
 8004cb6:	88fb      	ldrh	r3, [r7, #6]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e016      	b.n	8004cee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d101      	bne.n	8004cce <HAL_UART_Receive_IT+0x38>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	e00f      	b.n	8004cee <HAL_UART_Receive_IT+0x58>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004cdc:	88fb      	ldrh	r3, [r7, #6]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 fb2e 	bl	8005344 <UART_Start_Receive_IT>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	e000      	b.n	8004cee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004cec:	2302      	movs	r3, #2
  }
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b0ba      	sub	sp, #232	; 0xe8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d2e:	f003 030f 	and.w	r3, r3, #15
 8004d32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004d36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10f      	bne.n	8004d5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <HAL_UART_IRQHandler+0x66>
 8004d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d4e:	f003 0320 	and.w	r3, r3, #32
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 fc11 	bl	800557e <UART_Receive_IT>
      return;
 8004d5c:	e256      	b.n	800520c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 80de 	beq.w	8004f24 <HAL_UART_IRQHandler+0x22c>
 8004d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d106      	bne.n	8004d82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d78:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 80d1 	beq.w	8004f24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00b      	beq.n	8004da6 <HAL_UART_IRQHandler+0xae>
 8004d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d005      	beq.n	8004da6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	f043 0201 	orr.w	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00b      	beq.n	8004dca <HAL_UART_IRQHandler+0xd2>
 8004db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	f043 0202 	orr.w	r2, r3, #2
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00b      	beq.n	8004dee <HAL_UART_IRQHandler+0xf6>
 8004dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d005      	beq.n	8004dee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	f043 0204 	orr.w	r2, r3, #4
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d011      	beq.n	8004e1e <HAL_UART_IRQHandler+0x126>
 8004dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d105      	bne.n	8004e12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d005      	beq.n	8004e1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	f043 0208 	orr.w	r2, r3, #8
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 81ed 	beq.w	8005202 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e2c:	f003 0320 	and.w	r3, r3, #32
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d008      	beq.n	8004e46 <HAL_UART_IRQHandler+0x14e>
 8004e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e38:	f003 0320 	and.w	r3, r3, #32
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fb9c 	bl	800557e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e50:	2b40      	cmp	r3, #64	; 0x40
 8004e52:	bf0c      	ite	eq
 8004e54:	2301      	moveq	r3, #1
 8004e56:	2300      	movne	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d103      	bne.n	8004e72 <HAL_UART_IRQHandler+0x17a>
 8004e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d04f      	beq.n	8004f12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 faa4 	bl	80053c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e82:	2b40      	cmp	r3, #64	; 0x40
 8004e84:	d141      	bne.n	8004f0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3314      	adds	r3, #20
 8004e8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3314      	adds	r3, #20
 8004eae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004eb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ebe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ec2:	e841 2300 	strex	r3, r2, [r1]
 8004ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004eca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1d9      	bne.n	8004e86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d013      	beq.n	8004f02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ede:	4a7d      	ldr	r2, [pc, #500]	; (80050d4 <HAL_UART_IRQHandler+0x3dc>)
 8004ee0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fd fc06 	bl	80026f8 <HAL_DMA_Abort_IT>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d016      	beq.n	8004f20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004efc:	4610      	mov	r0, r2
 8004efe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f00:	e00e      	b.n	8004f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f99a 	bl	800523c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f08:	e00a      	b.n	8004f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f996 	bl	800523c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f10:	e006      	b.n	8004f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f992 	bl	800523c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004f1e:	e170      	b.n	8005202 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f20:	bf00      	nop
    return;
 8004f22:	e16e      	b.n	8005202 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	f040 814a 	bne.w	80051c2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f32:	f003 0310 	and.w	r3, r3, #16
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 8143 	beq.w	80051c2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f40:	f003 0310 	and.w	r3, r3, #16
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 813c 	beq.w	80051c2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	60bb      	str	r3, [r7, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	60bb      	str	r3, [r7, #8]
 8004f5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6a:	2b40      	cmp	r3, #64	; 0x40
 8004f6c:	f040 80b4 	bne.w	80050d8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 8140 	beq.w	8005206 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	f080 8139 	bcs.w	8005206 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f9a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fa6:	f000 8088 	beq.w	80050ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	330c      	adds	r3, #12
 8004fb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fb8:	e853 3f00 	ldrex	r3, [r3]
 8004fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004fc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	330c      	adds	r3, #12
 8004fd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004fd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fde:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004fe2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004fe6:	e841 2300 	strex	r3, r2, [r1]
 8004fea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1d9      	bne.n	8004faa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3314      	adds	r3, #20
 8004ffc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005000:	e853 3f00 	ldrex	r3, [r3]
 8005004:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005006:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005008:	f023 0301 	bic.w	r3, r3, #1
 800500c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3314      	adds	r3, #20
 8005016:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800501a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800501e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005020:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005022:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005026:	e841 2300 	strex	r3, r2, [r1]
 800502a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800502c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1e1      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3314      	adds	r3, #20
 8005038:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800503c:	e853 3f00 	ldrex	r3, [r3]
 8005040:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005048:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3314      	adds	r3, #20
 8005052:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005056:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005058:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800505c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800505e:	e841 2300 	strex	r3, r2, [r1]
 8005062:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1e3      	bne.n	8005032 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	330c      	adds	r3, #12
 800507e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005082:	e853 3f00 	ldrex	r3, [r3]
 8005086:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800508a:	f023 0310 	bic.w	r3, r3, #16
 800508e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	330c      	adds	r3, #12
 8005098:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800509c:	65ba      	str	r2, [r7, #88]	; 0x58
 800509e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050a4:	e841 2300 	strex	r3, r2, [r1]
 80050a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1e3      	bne.n	8005078 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fd faaf 	bl	8002618 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	4619      	mov	r1, r3
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f8c0 	bl	8005250 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050d0:	e099      	b.n	8005206 <HAL_UART_IRQHandler+0x50e>
 80050d2:	bf00      	nop
 80050d4:	08005487 	.word	0x08005487
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 808b 	beq.w	800520a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80050f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 8086 	beq.w	800520a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	330c      	adds	r3, #12
 8005104:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800510e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005110:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005114:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	330c      	adds	r3, #12
 800511e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005122:	647a      	str	r2, [r7, #68]	; 0x44
 8005124:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005126:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005128:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800512a:	e841 2300 	strex	r3, r2, [r1]
 800512e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1e3      	bne.n	80050fe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	3314      	adds	r3, #20
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	e853 3f00 	ldrex	r3, [r3]
 8005144:	623b      	str	r3, [r7, #32]
   return(result);
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	f023 0301 	bic.w	r3, r3, #1
 800514c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3314      	adds	r3, #20
 8005156:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800515a:	633a      	str	r2, [r7, #48]	; 0x30
 800515c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005162:	e841 2300 	strex	r3, r2, [r1]
 8005166:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1e3      	bne.n	8005136 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	330c      	adds	r3, #12
 8005182:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	e853 3f00 	ldrex	r3, [r3]
 800518a:	60fb      	str	r3, [r7, #12]
   return(result);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0310 	bic.w	r3, r3, #16
 8005192:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	330c      	adds	r3, #12
 800519c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80051a0:	61fa      	str	r2, [r7, #28]
 80051a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	69b9      	ldr	r1, [r7, #24]
 80051a6:	69fa      	ldr	r2, [r7, #28]
 80051a8:	e841 2300 	strex	r3, r2, [r1]
 80051ac:	617b      	str	r3, [r7, #20]
   return(result);
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e3      	bne.n	800517c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051b8:	4619      	mov	r1, r3
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f848 	bl	8005250 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051c0:	e023      	b.n	800520a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d009      	beq.n	80051e2 <HAL_UART_IRQHandler+0x4ea>
 80051ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f967 	bl	80054ae <UART_Transmit_IT>
    return;
 80051e0:	e014      	b.n	800520c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00e      	beq.n	800520c <HAL_UART_IRQHandler+0x514>
 80051ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d008      	beq.n	800520c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f9a7 	bl	800554e <UART_EndTransmit_IT>
    return;
 8005200:	e004      	b.n	800520c <HAL_UART_IRQHandler+0x514>
    return;
 8005202:	bf00      	nop
 8005204:	e002      	b.n	800520c <HAL_UART_IRQHandler+0x514>
      return;
 8005206:	bf00      	nop
 8005208:	e000      	b.n	800520c <HAL_UART_IRQHandler+0x514>
      return;
 800520a:	bf00      	nop
  }
}
 800520c:	37e8      	adds	r7, #232	; 0xe8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop

08005214 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	460b      	mov	r3, r1
 800525a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b090      	sub	sp, #64	; 0x40
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	603b      	str	r3, [r7, #0]
 8005274:	4613      	mov	r3, r2
 8005276:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005278:	e050      	b.n	800531c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800527a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800527c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005280:	d04c      	beq.n	800531c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005284:	2b00      	cmp	r3, #0
 8005286:	d007      	beq.n	8005298 <UART_WaitOnFlagUntilTimeout+0x30>
 8005288:	f7fd f8b4 	bl	80023f4 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005294:	429a      	cmp	r2, r3
 8005296:	d241      	bcs.n	800531c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	330c      	adds	r3, #12
 800529e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a2:	e853 3f00 	ldrex	r3, [r3]
 80052a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	330c      	adds	r3, #12
 80052b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052b8:	637a      	str	r2, [r7, #52]	; 0x34
 80052ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052c0:	e841 2300 	strex	r3, r2, [r1]
 80052c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e5      	bne.n	8005298 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3314      	adds	r3, #20
 80052d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	e853 3f00 	ldrex	r3, [r3]
 80052da:	613b      	str	r3, [r7, #16]
   return(result);
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	f023 0301 	bic.w	r3, r3, #1
 80052e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3314      	adds	r3, #20
 80052ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052ec:	623a      	str	r2, [r7, #32]
 80052ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	69f9      	ldr	r1, [r7, #28]
 80052f2:	6a3a      	ldr	r2, [r7, #32]
 80052f4:	e841 2300 	strex	r3, r2, [r1]
 80052f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e5      	bne.n	80052cc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2220      	movs	r2, #32
 800530c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e00f      	b.n	800533c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	4013      	ands	r3, r2
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	429a      	cmp	r2, r3
 800532a:	bf0c      	ite	eq
 800532c:	2301      	moveq	r3, #1
 800532e:	2300      	movne	r3, #0
 8005330:	b2db      	uxtb	r3, r3
 8005332:	461a      	mov	r2, r3
 8005334:	79fb      	ldrb	r3, [r7, #7]
 8005336:	429a      	cmp	r2, r3
 8005338:	d09f      	beq.n	800527a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3740      	adds	r7, #64	; 0x40
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	4613      	mov	r3, r2
 8005350:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	88fa      	ldrh	r2, [r7, #6]
 800535c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	88fa      	ldrh	r2, [r7, #6]
 8005362:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2222      	movs	r2, #34	; 0x22
 800536e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d007      	beq.n	8005392 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005390:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695a      	ldr	r2, [r3, #20]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f042 0201 	orr.w	r2, r2, #1
 80053a0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68da      	ldr	r2, [r3, #12]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f042 0220 	orr.w	r2, r2, #32
 80053b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b095      	sub	sp, #84	; 0x54
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	330c      	adds	r3, #12
 80053ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d2:	e853 3f00 	ldrex	r3, [r3]
 80053d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	330c      	adds	r3, #12
 80053e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053e8:	643a      	str	r2, [r7, #64]	; 0x40
 80053ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053f0:	e841 2300 	strex	r3, r2, [r1]
 80053f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1e5      	bne.n	80053c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	3314      	adds	r3, #20
 8005402:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005404:	6a3b      	ldr	r3, [r7, #32]
 8005406:	e853 3f00 	ldrex	r3, [r3]
 800540a:	61fb      	str	r3, [r7, #28]
   return(result);
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	f023 0301 	bic.w	r3, r3, #1
 8005412:	64bb      	str	r3, [r7, #72]	; 0x48
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3314      	adds	r3, #20
 800541a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800541c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800541e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005420:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005422:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005424:	e841 2300 	strex	r3, r2, [r1]
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1e5      	bne.n	80053fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005434:	2b01      	cmp	r3, #1
 8005436:	d119      	bne.n	800546c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	330c      	adds	r3, #12
 800543e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	e853 3f00 	ldrex	r3, [r3]
 8005446:	60bb      	str	r3, [r7, #8]
   return(result);
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f023 0310 	bic.w	r3, r3, #16
 800544e:	647b      	str	r3, [r7, #68]	; 0x44
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	330c      	adds	r3, #12
 8005456:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005458:	61ba      	str	r2, [r7, #24]
 800545a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545c:	6979      	ldr	r1, [r7, #20]
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	e841 2300 	strex	r3, r2, [r1]
 8005464:	613b      	str	r3, [r7, #16]
   return(result);
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1e5      	bne.n	8005438 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	631a      	str	r2, [r3, #48]	; 0x30
}
 800547a:	bf00      	nop
 800547c:	3754      	adds	r7, #84	; 0x54
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b084      	sub	sp, #16
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005492:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f7ff fecb 	bl	800523c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054a6:	bf00      	nop
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b085      	sub	sp, #20
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b21      	cmp	r3, #33	; 0x21
 80054c0:	d13e      	bne.n	8005540 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ca:	d114      	bne.n	80054f6 <UART_Transmit_IT+0x48>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d110      	bne.n	80054f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	881b      	ldrh	r3, [r3, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	1c9a      	adds	r2, r3, #2
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	621a      	str	r2, [r3, #32]
 80054f4:	e008      	b.n	8005508 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	1c59      	adds	r1, r3, #1
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6211      	str	r1, [r2, #32]
 8005500:	781a      	ldrb	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800550c:	b29b      	uxth	r3, r3
 800550e:	3b01      	subs	r3, #1
 8005510:	b29b      	uxth	r3, r3
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	4619      	mov	r1, r3
 8005516:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10f      	bne.n	800553c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800552a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800553a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800553c:	2300      	movs	r3, #0
 800553e:	e000      	b.n	8005542 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005540:	2302      	movs	r3, #2
  }
}
 8005542:	4618      	mov	r0, r3
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b082      	sub	sp, #8
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005564:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2220      	movs	r2, #32
 800556a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7ff fe50 	bl	8005214 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b08c      	sub	sp, #48	; 0x30
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b22      	cmp	r3, #34	; 0x22
 8005590:	f040 80ab 	bne.w	80056ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559c:	d117      	bne.n	80055ce <UART_Receive_IT+0x50>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d113      	bne.n	80055ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055a6:	2300      	movs	r3, #0
 80055a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055bc:	b29a      	uxth	r2, r3
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c6:	1c9a      	adds	r2, r3, #2
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	629a      	str	r2, [r3, #40]	; 0x28
 80055cc:	e026      	b.n	800561c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e0:	d007      	beq.n	80055f2 <UART_Receive_IT+0x74>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10a      	bne.n	8005600 <UART_Receive_IT+0x82>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	e008      	b.n	8005612 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	b2db      	uxtb	r3, r3
 8005608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800560c:	b2da      	uxtb	r2, r3
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005620:	b29b      	uxth	r3, r3
 8005622:	3b01      	subs	r3, #1
 8005624:	b29b      	uxth	r3, r3
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	4619      	mov	r1, r3
 800562a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800562c:	2b00      	cmp	r3, #0
 800562e:	d15a      	bne.n	80056e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0220 	bic.w	r2, r2, #32
 800563e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800564e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	695a      	ldr	r2, [r3, #20]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0201 	bic.w	r2, r2, #1
 800565e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566c:	2b01      	cmp	r3, #1
 800566e:	d135      	bne.n	80056dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	330c      	adds	r3, #12
 800567c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	613b      	str	r3, [r7, #16]
   return(result);
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f023 0310 	bic.w	r3, r3, #16
 800568c:	627b      	str	r3, [r7, #36]	; 0x24
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	330c      	adds	r3, #12
 8005694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005696:	623a      	str	r2, [r7, #32]
 8005698:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569a:	69f9      	ldr	r1, [r7, #28]
 800569c:	6a3a      	ldr	r2, [r7, #32]
 800569e:	e841 2300 	strex	r3, r2, [r1]
 80056a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1e5      	bne.n	8005676 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0310 	and.w	r3, r3, #16
 80056b4:	2b10      	cmp	r3, #16
 80056b6:	d10a      	bne.n	80056ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056b8:	2300      	movs	r3, #0
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056d2:	4619      	mov	r1, r3
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7ff fdbb 	bl	8005250 <HAL_UARTEx_RxEventCallback>
 80056da:	e002      	b.n	80056e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7ff fda3 	bl	8005228 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	e002      	b.n	80056ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80056e6:	2300      	movs	r3, #0
 80056e8:	e000      	b.n	80056ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80056ea:	2302      	movs	r3, #2
  }
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3730      	adds	r7, #48	; 0x30
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056f8:	b0c0      	sub	sp, #256	; 0x100
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800570c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005710:	68d9      	ldr	r1, [r3, #12]
 8005712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	ea40 0301 	orr.w	r3, r0, r1
 800571c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800571e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	431a      	orrs	r2, r3
 800572c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	431a      	orrs	r2, r3
 8005734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	4313      	orrs	r3, r2
 800573c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800574c:	f021 010c 	bic.w	r1, r1, #12
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800575a:	430b      	orrs	r3, r1
 800575c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800575e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800576a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576e:	6999      	ldr	r1, [r3, #24]
 8005770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	ea40 0301 	orr.w	r3, r0, r1
 800577a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800577c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	4b8f      	ldr	r3, [pc, #572]	; (80059c0 <UART_SetConfig+0x2cc>)
 8005784:	429a      	cmp	r2, r3
 8005786:	d005      	beq.n	8005794 <UART_SetConfig+0xa0>
 8005788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	4b8d      	ldr	r3, [pc, #564]	; (80059c4 <UART_SetConfig+0x2d0>)
 8005790:	429a      	cmp	r2, r3
 8005792:	d104      	bne.n	800579e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005794:	f7fd ff50 	bl	8003638 <HAL_RCC_GetPCLK2Freq>
 8005798:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800579c:	e003      	b.n	80057a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800579e:	f7fd ff37 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 80057a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b0:	f040 810c 	bne.w	80059cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057b8:	2200      	movs	r2, #0
 80057ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80057c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80057c6:	4622      	mov	r2, r4
 80057c8:	462b      	mov	r3, r5
 80057ca:	1891      	adds	r1, r2, r2
 80057cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80057ce:	415b      	adcs	r3, r3
 80057d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80057d6:	4621      	mov	r1, r4
 80057d8:	eb12 0801 	adds.w	r8, r2, r1
 80057dc:	4629      	mov	r1, r5
 80057de:	eb43 0901 	adc.w	r9, r3, r1
 80057e2:	f04f 0200 	mov.w	r2, #0
 80057e6:	f04f 0300 	mov.w	r3, #0
 80057ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057f6:	4690      	mov	r8, r2
 80057f8:	4699      	mov	r9, r3
 80057fa:	4623      	mov	r3, r4
 80057fc:	eb18 0303 	adds.w	r3, r8, r3
 8005800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005804:	462b      	mov	r3, r5
 8005806:	eb49 0303 	adc.w	r3, r9, r3
 800580a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800580e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800581a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800581e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005822:	460b      	mov	r3, r1
 8005824:	18db      	adds	r3, r3, r3
 8005826:	653b      	str	r3, [r7, #80]	; 0x50
 8005828:	4613      	mov	r3, r2
 800582a:	eb42 0303 	adc.w	r3, r2, r3
 800582e:	657b      	str	r3, [r7, #84]	; 0x54
 8005830:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005834:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005838:	f7fa fd32 	bl	80002a0 <__aeabi_uldivmod>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4b61      	ldr	r3, [pc, #388]	; (80059c8 <UART_SetConfig+0x2d4>)
 8005842:	fba3 2302 	umull	r2, r3, r3, r2
 8005846:	095b      	lsrs	r3, r3, #5
 8005848:	011c      	lsls	r4, r3, #4
 800584a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800584e:	2200      	movs	r2, #0
 8005850:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005854:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005858:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800585c:	4642      	mov	r2, r8
 800585e:	464b      	mov	r3, r9
 8005860:	1891      	adds	r1, r2, r2
 8005862:	64b9      	str	r1, [r7, #72]	; 0x48
 8005864:	415b      	adcs	r3, r3
 8005866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005868:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800586c:	4641      	mov	r1, r8
 800586e:	eb12 0a01 	adds.w	sl, r2, r1
 8005872:	4649      	mov	r1, r9
 8005874:	eb43 0b01 	adc.w	fp, r3, r1
 8005878:	f04f 0200 	mov.w	r2, #0
 800587c:	f04f 0300 	mov.w	r3, #0
 8005880:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005884:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005888:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800588c:	4692      	mov	sl, r2
 800588e:	469b      	mov	fp, r3
 8005890:	4643      	mov	r3, r8
 8005892:	eb1a 0303 	adds.w	r3, sl, r3
 8005896:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800589a:	464b      	mov	r3, r9
 800589c:	eb4b 0303 	adc.w	r3, fp, r3
 80058a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80058b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80058b8:	460b      	mov	r3, r1
 80058ba:	18db      	adds	r3, r3, r3
 80058bc:	643b      	str	r3, [r7, #64]	; 0x40
 80058be:	4613      	mov	r3, r2
 80058c0:	eb42 0303 	adc.w	r3, r2, r3
 80058c4:	647b      	str	r3, [r7, #68]	; 0x44
 80058c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80058ce:	f7fa fce7 	bl	80002a0 <__aeabi_uldivmod>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4611      	mov	r1, r2
 80058d8:	4b3b      	ldr	r3, [pc, #236]	; (80059c8 <UART_SetConfig+0x2d4>)
 80058da:	fba3 2301 	umull	r2, r3, r3, r1
 80058de:	095b      	lsrs	r3, r3, #5
 80058e0:	2264      	movs	r2, #100	; 0x64
 80058e2:	fb02 f303 	mul.w	r3, r2, r3
 80058e6:	1acb      	subs	r3, r1, r3
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80058ee:	4b36      	ldr	r3, [pc, #216]	; (80059c8 <UART_SetConfig+0x2d4>)
 80058f0:	fba3 2302 	umull	r2, r3, r3, r2
 80058f4:	095b      	lsrs	r3, r3, #5
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058fc:	441c      	add	r4, r3
 80058fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005902:	2200      	movs	r2, #0
 8005904:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005908:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800590c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005910:	4642      	mov	r2, r8
 8005912:	464b      	mov	r3, r9
 8005914:	1891      	adds	r1, r2, r2
 8005916:	63b9      	str	r1, [r7, #56]	; 0x38
 8005918:	415b      	adcs	r3, r3
 800591a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800591c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005920:	4641      	mov	r1, r8
 8005922:	1851      	adds	r1, r2, r1
 8005924:	6339      	str	r1, [r7, #48]	; 0x30
 8005926:	4649      	mov	r1, r9
 8005928:	414b      	adcs	r3, r1
 800592a:	637b      	str	r3, [r7, #52]	; 0x34
 800592c:	f04f 0200 	mov.w	r2, #0
 8005930:	f04f 0300 	mov.w	r3, #0
 8005934:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005938:	4659      	mov	r1, fp
 800593a:	00cb      	lsls	r3, r1, #3
 800593c:	4651      	mov	r1, sl
 800593e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005942:	4651      	mov	r1, sl
 8005944:	00ca      	lsls	r2, r1, #3
 8005946:	4610      	mov	r0, r2
 8005948:	4619      	mov	r1, r3
 800594a:	4603      	mov	r3, r0
 800594c:	4642      	mov	r2, r8
 800594e:	189b      	adds	r3, r3, r2
 8005950:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005954:	464b      	mov	r3, r9
 8005956:	460a      	mov	r2, r1
 8005958:	eb42 0303 	adc.w	r3, r2, r3
 800595c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800596c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005970:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005974:	460b      	mov	r3, r1
 8005976:	18db      	adds	r3, r3, r3
 8005978:	62bb      	str	r3, [r7, #40]	; 0x28
 800597a:	4613      	mov	r3, r2
 800597c:	eb42 0303 	adc.w	r3, r2, r3
 8005980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005982:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005986:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800598a:	f7fa fc89 	bl	80002a0 <__aeabi_uldivmod>
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	4b0d      	ldr	r3, [pc, #52]	; (80059c8 <UART_SetConfig+0x2d4>)
 8005994:	fba3 1302 	umull	r1, r3, r3, r2
 8005998:	095b      	lsrs	r3, r3, #5
 800599a:	2164      	movs	r1, #100	; 0x64
 800599c:	fb01 f303 	mul.w	r3, r1, r3
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	3332      	adds	r3, #50	; 0x32
 80059a6:	4a08      	ldr	r2, [pc, #32]	; (80059c8 <UART_SetConfig+0x2d4>)
 80059a8:	fba2 2303 	umull	r2, r3, r2, r3
 80059ac:	095b      	lsrs	r3, r3, #5
 80059ae:	f003 0207 	and.w	r2, r3, #7
 80059b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4422      	add	r2, r4
 80059ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059bc:	e105      	b.n	8005bca <UART_SetConfig+0x4d6>
 80059be:	bf00      	nop
 80059c0:	40011000 	.word	0x40011000
 80059c4:	40011400 	.word	0x40011400
 80059c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059d0:	2200      	movs	r2, #0
 80059d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80059da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80059de:	4642      	mov	r2, r8
 80059e0:	464b      	mov	r3, r9
 80059e2:	1891      	adds	r1, r2, r2
 80059e4:	6239      	str	r1, [r7, #32]
 80059e6:	415b      	adcs	r3, r3
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24
 80059ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059ee:	4641      	mov	r1, r8
 80059f0:	1854      	adds	r4, r2, r1
 80059f2:	4649      	mov	r1, r9
 80059f4:	eb43 0501 	adc.w	r5, r3, r1
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	00eb      	lsls	r3, r5, #3
 8005a02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a06:	00e2      	lsls	r2, r4, #3
 8005a08:	4614      	mov	r4, r2
 8005a0a:	461d      	mov	r5, r3
 8005a0c:	4643      	mov	r3, r8
 8005a0e:	18e3      	adds	r3, r4, r3
 8005a10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a14:	464b      	mov	r3, r9
 8005a16:	eb45 0303 	adc.w	r3, r5, r3
 8005a1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a2e:	f04f 0200 	mov.w	r2, #0
 8005a32:	f04f 0300 	mov.w	r3, #0
 8005a36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	008b      	lsls	r3, r1, #2
 8005a3e:	4621      	mov	r1, r4
 8005a40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a44:	4621      	mov	r1, r4
 8005a46:	008a      	lsls	r2, r1, #2
 8005a48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a4c:	f7fa fc28 	bl	80002a0 <__aeabi_uldivmod>
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	4b60      	ldr	r3, [pc, #384]	; (8005bd8 <UART_SetConfig+0x4e4>)
 8005a56:	fba3 2302 	umull	r2, r3, r3, r2
 8005a5a:	095b      	lsrs	r3, r3, #5
 8005a5c:	011c      	lsls	r4, r3, #4
 8005a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a70:	4642      	mov	r2, r8
 8005a72:	464b      	mov	r3, r9
 8005a74:	1891      	adds	r1, r2, r2
 8005a76:	61b9      	str	r1, [r7, #24]
 8005a78:	415b      	adcs	r3, r3
 8005a7a:	61fb      	str	r3, [r7, #28]
 8005a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a80:	4641      	mov	r1, r8
 8005a82:	1851      	adds	r1, r2, r1
 8005a84:	6139      	str	r1, [r7, #16]
 8005a86:	4649      	mov	r1, r9
 8005a88:	414b      	adcs	r3, r1
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a98:	4659      	mov	r1, fp
 8005a9a:	00cb      	lsls	r3, r1, #3
 8005a9c:	4651      	mov	r1, sl
 8005a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aa2:	4651      	mov	r1, sl
 8005aa4:	00ca      	lsls	r2, r1, #3
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4603      	mov	r3, r0
 8005aac:	4642      	mov	r2, r8
 8005aae:	189b      	adds	r3, r3, r2
 8005ab0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ab4:	464b      	mov	r3, r9
 8005ab6:	460a      	mov	r2, r1
 8005ab8:	eb42 0303 	adc.w	r3, r2, r3
 8005abc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005aca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005acc:	f04f 0200 	mov.w	r2, #0
 8005ad0:	f04f 0300 	mov.w	r3, #0
 8005ad4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ad8:	4649      	mov	r1, r9
 8005ada:	008b      	lsls	r3, r1, #2
 8005adc:	4641      	mov	r1, r8
 8005ade:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ae2:	4641      	mov	r1, r8
 8005ae4:	008a      	lsls	r2, r1, #2
 8005ae6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005aea:	f7fa fbd9 	bl	80002a0 <__aeabi_uldivmod>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4b39      	ldr	r3, [pc, #228]	; (8005bd8 <UART_SetConfig+0x4e4>)
 8005af4:	fba3 1302 	umull	r1, r3, r3, r2
 8005af8:	095b      	lsrs	r3, r3, #5
 8005afa:	2164      	movs	r1, #100	; 0x64
 8005afc:	fb01 f303 	mul.w	r3, r1, r3
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	3332      	adds	r3, #50	; 0x32
 8005b06:	4a34      	ldr	r2, [pc, #208]	; (8005bd8 <UART_SetConfig+0x4e4>)
 8005b08:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0c:	095b      	lsrs	r3, r3, #5
 8005b0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b12:	441c      	add	r4, r3
 8005b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b18:	2200      	movs	r2, #0
 8005b1a:	673b      	str	r3, [r7, #112]	; 0x70
 8005b1c:	677a      	str	r2, [r7, #116]	; 0x74
 8005b1e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005b22:	4642      	mov	r2, r8
 8005b24:	464b      	mov	r3, r9
 8005b26:	1891      	adds	r1, r2, r2
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	415b      	adcs	r3, r3
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b32:	4641      	mov	r1, r8
 8005b34:	1851      	adds	r1, r2, r1
 8005b36:	6039      	str	r1, [r7, #0]
 8005b38:	4649      	mov	r1, r9
 8005b3a:	414b      	adcs	r3, r1
 8005b3c:	607b      	str	r3, [r7, #4]
 8005b3e:	f04f 0200 	mov.w	r2, #0
 8005b42:	f04f 0300 	mov.w	r3, #0
 8005b46:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b4a:	4659      	mov	r1, fp
 8005b4c:	00cb      	lsls	r3, r1, #3
 8005b4e:	4651      	mov	r1, sl
 8005b50:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b54:	4651      	mov	r1, sl
 8005b56:	00ca      	lsls	r2, r1, #3
 8005b58:	4610      	mov	r0, r2
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	4642      	mov	r2, r8
 8005b60:	189b      	adds	r3, r3, r2
 8005b62:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b64:	464b      	mov	r3, r9
 8005b66:	460a      	mov	r2, r1
 8005b68:	eb42 0303 	adc.w	r3, r2, r3
 8005b6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	663b      	str	r3, [r7, #96]	; 0x60
 8005b78:	667a      	str	r2, [r7, #100]	; 0x64
 8005b7a:	f04f 0200 	mov.w	r2, #0
 8005b7e:	f04f 0300 	mov.w	r3, #0
 8005b82:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005b86:	4649      	mov	r1, r9
 8005b88:	008b      	lsls	r3, r1, #2
 8005b8a:	4641      	mov	r1, r8
 8005b8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b90:	4641      	mov	r1, r8
 8005b92:	008a      	lsls	r2, r1, #2
 8005b94:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b98:	f7fa fb82 	bl	80002a0 <__aeabi_uldivmod>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4b0d      	ldr	r3, [pc, #52]	; (8005bd8 <UART_SetConfig+0x4e4>)
 8005ba2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ba6:	095b      	lsrs	r3, r3, #5
 8005ba8:	2164      	movs	r1, #100	; 0x64
 8005baa:	fb01 f303 	mul.w	r3, r1, r3
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	011b      	lsls	r3, r3, #4
 8005bb2:	3332      	adds	r3, #50	; 0x32
 8005bb4:	4a08      	ldr	r2, [pc, #32]	; (8005bd8 <UART_SetConfig+0x4e4>)
 8005bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bba:	095b      	lsrs	r3, r3, #5
 8005bbc:	f003 020f 	and.w	r2, r3, #15
 8005bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4422      	add	r2, r4
 8005bc8:	609a      	str	r2, [r3, #8]
}
 8005bca:	bf00      	nop
 8005bcc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bd6:	bf00      	nop
 8005bd8:	51eb851f 	.word	0x51eb851f

08005bdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bdc:	b084      	sub	sp, #16
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b084      	sub	sp, #16
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	f107 001c 	add.w	r0, r7, #28
 8005bea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d122      	bne.n	8005c3a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005c08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d105      	bne.n	8005c2e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 faa2 	bl	8006178 <USB_CoreReset>
 8005c34:	4603      	mov	r3, r0
 8005c36:	73fb      	strb	r3, [r7, #15]
 8005c38:	e01a      	b.n	8005c70 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fa96 	bl	8006178 <USB_CoreReset>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	639a      	str	r2, [r3, #56]	; 0x38
 8005c62:	e005      	b.n	8005c70 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d10b      	bne.n	8005c8e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f043 0206 	orr.w	r2, r3, #6
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f043 0220 	orr.w	r2, r3, #32
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c9a:	b004      	add	sp, #16
 8005c9c:	4770      	bx	lr

08005c9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f023 0201 	bic.w	r2, r3, #1
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d115      	bne.n	8005d0e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005cee:	2001      	movs	r0, #1
 8005cf0:	f7fc fb8c 	bl	800240c <HAL_Delay>
      ms++;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fa2e 	bl	800615c <USB_GetMode>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d01e      	beq.n	8005d44 <USB_SetCurrentMode+0x84>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b31      	cmp	r3, #49	; 0x31
 8005d0a:	d9f0      	bls.n	8005cee <USB_SetCurrentMode+0x2e>
 8005d0c:	e01a      	b.n	8005d44 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d0e:	78fb      	ldrb	r3, [r7, #3]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d115      	bne.n	8005d40 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d20:	2001      	movs	r0, #1
 8005d22:	f7fc fb73 	bl	800240c <HAL_Delay>
      ms++;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fa15 	bl	800615c <USB_GetMode>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d005      	beq.n	8005d44 <USB_SetCurrentMode+0x84>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b31      	cmp	r3, #49	; 0x31
 8005d3c:	d9f0      	bls.n	8005d20 <USB_SetCurrentMode+0x60>
 8005d3e:	e001      	b.n	8005d44 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e005      	b.n	8005d50 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b32      	cmp	r3, #50	; 0x32
 8005d48:	d101      	bne.n	8005d4e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e000      	b.n	8005d50 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d58:	b084      	sub	sp, #16
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b086      	sub	sp, #24
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005d66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d72:	2300      	movs	r3, #0
 8005d74:	613b      	str	r3, [r7, #16]
 8005d76:	e009      	b.n	8005d8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	3340      	adds	r3, #64	; 0x40
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	2200      	movs	r2, #0
 8005d84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	613b      	str	r3, [r7, #16]
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	2b0e      	cmp	r3, #14
 8005d90:	d9f2      	bls.n	8005d78 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d11c      	bne.n	8005dd2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005da6:	f043 0302 	orr.w	r3, r3, #2
 8005daa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	639a      	str	r2, [r3, #56]	; 0x38
 8005dd0:	e00b      	b.n	8005dea <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005df0:	461a      	mov	r2, r3
 8005df2:	2300      	movs	r3, #0
 8005df4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e04:	461a      	mov	r2, r3
 8005e06:	680b      	ldr	r3, [r1, #0]
 8005e08:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d10c      	bne.n	8005e2a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d104      	bne.n	8005e20 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e16:	2100      	movs	r1, #0
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f965 	bl	80060e8 <USB_SetDevSpeed>
 8005e1e:	e008      	b.n	8005e32 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e20:	2101      	movs	r1, #1
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f960 	bl	80060e8 <USB_SetDevSpeed>
 8005e28:	e003      	b.n	8005e32 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e2a:	2103      	movs	r1, #3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 f95b 	bl	80060e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e32:	2110      	movs	r1, #16
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f8f3 	bl	8006020 <USB_FlushTxFifo>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f91f 	bl	8006088 <USB_FlushRxFifo>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e66:	461a      	mov	r2, r3
 8005e68:	2300      	movs	r3, #0
 8005e6a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e72:	461a      	mov	r2, r3
 8005e74:	2300      	movs	r3, #0
 8005e76:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e78:	2300      	movs	r3, #0
 8005e7a:	613b      	str	r3, [r7, #16]
 8005e7c:	e043      	b.n	8005f06 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e94:	d118      	bne.n	8005ec8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10a      	bne.n	8005eb2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	e013      	b.n	8005eda <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	e008      	b.n	8005eda <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	2300      	movs	r3, #0
 8005eea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef8:	461a      	mov	r2, r3
 8005efa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005efe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	3301      	adds	r3, #1
 8005f04:	613b      	str	r3, [r7, #16]
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d3b7      	bcc.n	8005e7e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f0e:	2300      	movs	r3, #0
 8005f10:	613b      	str	r3, [r7, #16]
 8005f12:	e043      	b.n	8005f9c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f2a:	d118      	bne.n	8005f5e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10a      	bne.n	8005f48 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f44:	6013      	str	r3, [r2, #0]
 8005f46:	e013      	b.n	8005f70 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f54:	461a      	mov	r2, r3
 8005f56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f5a:	6013      	str	r3, [r2, #0]
 8005f5c:	e008      	b.n	8005f70 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	2300      	movs	r3, #0
 8005f80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f94:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	613b      	str	r3, [r7, #16]
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d3b7      	bcc.n	8005f14 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fb6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005fc4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d105      	bne.n	8005fd8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	f043 0210 	orr.w	r2, r3, #16
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	699a      	ldr	r2, [r3, #24]
 8005fdc:	4b0f      	ldr	r3, [pc, #60]	; (800601c <USB_DevInit+0x2c4>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d005      	beq.n	8005ff6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	f043 0208 	orr.w	r2, r3, #8
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d107      	bne.n	800600c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006004:	f043 0304 	orr.w	r3, r3, #4
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800600c:	7dfb      	ldrb	r3, [r7, #23]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006018:	b004      	add	sp, #16
 800601a:	4770      	bx	lr
 800601c:	803c3800 	.word	0x803c3800

08006020 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800602a:	2300      	movs	r3, #0
 800602c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3301      	adds	r3, #1
 8006032:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4a13      	ldr	r2, [pc, #76]	; (8006084 <USB_FlushTxFifo+0x64>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d901      	bls.n	8006040 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e01b      	b.n	8006078 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	daf2      	bge.n	800602e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006048:	2300      	movs	r3, #0
 800604a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	019b      	lsls	r3, r3, #6
 8006050:	f043 0220 	orr.w	r2, r3, #32
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	3301      	adds	r3, #1
 800605c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4a08      	ldr	r2, [pc, #32]	; (8006084 <USB_FlushTxFifo+0x64>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d901      	bls.n	800606a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e006      	b.n	8006078 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f003 0320 	and.w	r3, r3, #32
 8006072:	2b20      	cmp	r3, #32
 8006074:	d0f0      	beq.n	8006058 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	00030d40 	.word	0x00030d40

08006088 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	3301      	adds	r3, #1
 8006098:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4a11      	ldr	r2, [pc, #68]	; (80060e4 <USB_FlushRxFifo+0x5c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d901      	bls.n	80060a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e018      	b.n	80060d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	daf2      	bge.n	8006094 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2210      	movs	r2, #16
 80060b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	3301      	adds	r3, #1
 80060bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4a08      	ldr	r2, [pc, #32]	; (80060e4 <USB_FlushRxFifo+0x5c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d901      	bls.n	80060ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e006      	b.n	80060d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	f003 0310 	and.w	r3, r3, #16
 80060d2:	2b10      	cmp	r3, #16
 80060d4:	d0f0      	beq.n	80060b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3714      	adds	r7, #20
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	00030d40 	.word	0x00030d40

080060e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	460b      	mov	r3, r1
 80060f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	78fb      	ldrb	r3, [r7, #3]
 8006102:	68f9      	ldr	r1, [r7, #12]
 8006104:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006108:	4313      	orrs	r3, r2
 800610a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800611a:	b480      	push	{r7}
 800611c:	b085      	sub	sp, #20
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006134:	f023 0303 	bic.w	r3, r3, #3
 8006138:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006148:	f043 0302 	orr.w	r3, r3, #2
 800614c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	f003 0301 	and.w	r3, r3, #1
}
 800616c:	4618      	mov	r0, r3
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3301      	adds	r3, #1
 8006188:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4a13      	ldr	r2, [pc, #76]	; (80061dc <USB_CoreReset+0x64>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d901      	bls.n	8006196 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e01b      	b.n	80061ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	daf2      	bge.n	8006184 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f043 0201 	orr.w	r2, r3, #1
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	3301      	adds	r3, #1
 80061b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4a09      	ldr	r2, [pc, #36]	; (80061dc <USB_CoreReset+0x64>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d901      	bls.n	80061c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e006      	b.n	80061ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d0f0      	beq.n	80061ae <USB_CoreReset+0x36>

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	00030d40 	.word	0x00030d40

080061e0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	4603      	mov	r3, r0
 80061e8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80061ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061f2:	2b84      	cmp	r3, #132	; 0x84
 80061f4:	d005      	beq.n	8006202 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80061f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	4413      	add	r3, r2
 80061fe:	3303      	adds	r3, #3
 8006200:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006202:	68fb      	ldr	r3, [r7, #12]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006214:	f000 fade 	bl	80067d4 <vTaskStartScheduler>
  
  return osOK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	bd80      	pop	{r7, pc}

0800621e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800621e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006220:	b089      	sub	sp, #36	; 0x24
 8006222:	af04      	add	r7, sp, #16
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d020      	beq.n	8006272 <osThreadCreate+0x54>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d01c      	beq.n	8006272 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685c      	ldr	r4, [r3, #4]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681d      	ldr	r5, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691e      	ldr	r6, [r3, #16]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff ffc8 	bl	80061e0 <makeFreeRtosPriority>
 8006250:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800625a:	9202      	str	r2, [sp, #8]
 800625c:	9301      	str	r3, [sp, #4]
 800625e:	9100      	str	r1, [sp, #0]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	4632      	mov	r2, r6
 8006264:	4629      	mov	r1, r5
 8006266:	4620      	mov	r0, r4
 8006268:	f000 f8ed 	bl	8006446 <xTaskCreateStatic>
 800626c:	4603      	mov	r3, r0
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	e01c      	b.n	80062ac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685c      	ldr	r4, [r3, #4]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800627e:	b29e      	uxth	r6, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006286:	4618      	mov	r0, r3
 8006288:	f7ff ffaa 	bl	80061e0 <makeFreeRtosPriority>
 800628c:	4602      	mov	r2, r0
 800628e:	f107 030c 	add.w	r3, r7, #12
 8006292:	9301      	str	r3, [sp, #4]
 8006294:	9200      	str	r2, [sp, #0]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	4632      	mov	r2, r6
 800629a:	4629      	mov	r1, r5
 800629c:	4620      	mov	r0, r4
 800629e:	f000 f92f 	bl	8006500 <xTaskCreate>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d001      	beq.n	80062ac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80062a8:	2300      	movs	r3, #0
 80062aa:	e000      	b.n	80062ae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80062ac:	68fb      	ldr	r3, [r7, #12]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080062b6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b084      	sub	sp, #16
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <osDelay+0x16>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	e000      	b.n	80062ce <osDelay+0x18>
 80062cc:	2301      	movs	r3, #1
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fa4c 	bl	800676c <vTaskDelay>
  
  return osOK;
 80062d4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80062de:	b480      	push	{r7}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f103 0208 	add.w	r2, r3, #8
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f04f 32ff 	mov.w	r2, #4294967295
 80062f6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f103 0208 	add.w	r2, r3, #8
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f103 0208 	add.w	r2, r3, #8
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006312:	bf00      	nop
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	689a      	ldr	r2, [r3, #8]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	601a      	str	r2, [r3, #0]
}
 8006374:	bf00      	nop
 8006376:	3714      	adds	r7, #20
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006396:	d103      	bne.n	80063a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	e00c      	b.n	80063ba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3308      	adds	r3, #8
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	e002      	b.n	80063ae <vListInsert+0x2e>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d2f6      	bcs.n	80063a8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	1c5a      	adds	r2, r3, #1
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	601a      	str	r2, [r3, #0]
}
 80063e6:	bf00      	nop
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063f2:	b480      	push	{r7}
 80063f4:	b085      	sub	sp, #20
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6892      	ldr	r2, [r2, #8]
 8006408:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	6852      	ldr	r2, [r2, #4]
 8006412:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	429a      	cmp	r2, r3
 800641c:	d103      	bne.n	8006426 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	1e5a      	subs	r2, r3, #1
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006446:	b580      	push	{r7, lr}
 8006448:	b08e      	sub	sp, #56	; 0x38
 800644a:	af04      	add	r7, sp, #16
 800644c:	60f8      	str	r0, [r7, #12]
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	607a      	str	r2, [r7, #4]
 8006452:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10a      	bne.n	8006470 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800646c:	bf00      	nop
 800646e:	e7fe      	b.n	800646e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10a      	bne.n	800648c <xTaskCreateStatic+0x46>
	__asm volatile
 8006476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	61fb      	str	r3, [r7, #28]
}
 8006488:	bf00      	nop
 800648a:	e7fe      	b.n	800648a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800648c:	2354      	movs	r3, #84	; 0x54
 800648e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	2b54      	cmp	r3, #84	; 0x54
 8006494:	d00a      	beq.n	80064ac <xTaskCreateStatic+0x66>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	61bb      	str	r3, [r7, #24]
}
 80064a8:	bf00      	nop
 80064aa:	e7fe      	b.n	80064aa <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80064ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80064ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01e      	beq.n	80064f2 <xTaskCreateStatic+0xac>
 80064b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d01b      	beq.n	80064f2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064bc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064c2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	2202      	movs	r2, #2
 80064c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80064cc:	2300      	movs	r3, #0
 80064ce:	9303      	str	r3, [sp, #12]
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	9302      	str	r3, [sp, #8]
 80064d4:	f107 0314 	add.w	r3, r7, #20
 80064d8:	9301      	str	r3, [sp, #4]
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	68b9      	ldr	r1, [r7, #8]
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 f850 	bl	800658a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064ec:	f000 f8d4 	bl	8006698 <prvAddNewTaskToReadyList>
 80064f0:	e001      	b.n	80064f6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80064f2:	2300      	movs	r3, #0
 80064f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80064f6:	697b      	ldr	r3, [r7, #20]
	}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3728      	adds	r7, #40	; 0x28
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006500:	b580      	push	{r7, lr}
 8006502:	b08c      	sub	sp, #48	; 0x30
 8006504:	af04      	add	r7, sp, #16
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	603b      	str	r3, [r7, #0]
 800650c:	4613      	mov	r3, r2
 800650e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006510:	88fb      	ldrh	r3, [r7, #6]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4618      	mov	r0, r3
 8006516:	f000 fec7 	bl	80072a8 <pvPortMalloc>
 800651a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00e      	beq.n	8006540 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006522:	2054      	movs	r0, #84	; 0x54
 8006524:	f000 fec0 	bl	80072a8 <pvPortMalloc>
 8006528:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	631a      	str	r2, [r3, #48]	; 0x30
 8006536:	e005      	b.n	8006544 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006538:	6978      	ldr	r0, [r7, #20]
 800653a:	f000 ff81 	bl	8007440 <vPortFree>
 800653e:	e001      	b.n	8006544 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006540:	2300      	movs	r3, #0
 8006542:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d017      	beq.n	800657a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006552:	88fa      	ldrh	r2, [r7, #6]
 8006554:	2300      	movs	r3, #0
 8006556:	9303      	str	r3, [sp, #12]
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	9302      	str	r3, [sp, #8]
 800655c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655e:	9301      	str	r3, [sp, #4]
 8006560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	68b9      	ldr	r1, [r7, #8]
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 f80e 	bl	800658a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800656e:	69f8      	ldr	r0, [r7, #28]
 8006570:	f000 f892 	bl	8006698 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006574:	2301      	movs	r3, #1
 8006576:	61bb      	str	r3, [r7, #24]
 8006578:	e002      	b.n	8006580 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800657a:	f04f 33ff 	mov.w	r3, #4294967295
 800657e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006580:	69bb      	ldr	r3, [r7, #24]
	}
 8006582:	4618      	mov	r0, r3
 8006584:	3720      	adds	r7, #32
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b088      	sub	sp, #32
 800658e:	af00      	add	r7, sp, #0
 8006590:	60f8      	str	r0, [r7, #12]
 8006592:	60b9      	str	r1, [r7, #8]
 8006594:	607a      	str	r2, [r7, #4]
 8006596:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80065a2:	3b01      	subs	r3, #1
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	f023 0307 	bic.w	r3, r3, #7
 80065b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	f003 0307 	and.w	r3, r3, #7
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00a      	beq.n	80065d2 <prvInitialiseNewTask+0x48>
	__asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	617b      	str	r3, [r7, #20]
}
 80065ce:	bf00      	nop
 80065d0:	e7fe      	b.n	80065d0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d01f      	beq.n	8006618 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065d8:	2300      	movs	r3, #0
 80065da:	61fb      	str	r3, [r7, #28]
 80065dc:	e012      	b.n	8006604 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	4413      	add	r3, r2
 80065e4:	7819      	ldrb	r1, [r3, #0]
 80065e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	4413      	add	r3, r2
 80065ec:	3334      	adds	r3, #52	; 0x34
 80065ee:	460a      	mov	r2, r1
 80065f0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	4413      	add	r3, r2
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d006      	beq.n	800660c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	3301      	adds	r3, #1
 8006602:	61fb      	str	r3, [r7, #28]
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	2b0f      	cmp	r3, #15
 8006608:	d9e9      	bls.n	80065de <prvInitialiseNewTask+0x54>
 800660a:	e000      	b.n	800660e <prvInitialiseNewTask+0x84>
			{
				break;
 800660c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006616:	e003      	b.n	8006620 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661a:	2200      	movs	r2, #0
 800661c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	2b06      	cmp	r3, #6
 8006624:	d901      	bls.n	800662a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006626:	2306      	movs	r3, #6
 8006628:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800662a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800662e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006634:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006638:	2200      	movs	r2, #0
 800663a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	3304      	adds	r3, #4
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff fe6c 	bl	800631e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	3318      	adds	r3, #24
 800664a:	4618      	mov	r0, r3
 800664c:	f7ff fe67 	bl	800631e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006654:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006658:	f1c3 0207 	rsb	r2, r3, #7
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006664:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006668:	2200      	movs	r2, #0
 800666a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800666c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666e:	2200      	movs	r2, #0
 8006670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	68f9      	ldr	r1, [r7, #12]
 8006678:	69b8      	ldr	r0, [r7, #24]
 800667a:	f000 fc05 	bl	8006e88 <pxPortInitialiseStack>
 800667e:	4602      	mov	r2, r0
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006686:	2b00      	cmp	r3, #0
 8006688:	d002      	beq.n	8006690 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800668e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006690:	bf00      	nop
 8006692:	3720      	adds	r7, #32
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80066a0:	f000 fd20 	bl	80070e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80066a4:	4b2a      	ldr	r3, [pc, #168]	; (8006750 <prvAddNewTaskToReadyList+0xb8>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3301      	adds	r3, #1
 80066aa:	4a29      	ldr	r2, [pc, #164]	; (8006750 <prvAddNewTaskToReadyList+0xb8>)
 80066ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80066ae:	4b29      	ldr	r3, [pc, #164]	; (8006754 <prvAddNewTaskToReadyList+0xbc>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d109      	bne.n	80066ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80066b6:	4a27      	ldr	r2, [pc, #156]	; (8006754 <prvAddNewTaskToReadyList+0xbc>)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066bc:	4b24      	ldr	r3, [pc, #144]	; (8006750 <prvAddNewTaskToReadyList+0xb8>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d110      	bne.n	80066e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066c4:	f000 fabc 	bl	8006c40 <prvInitialiseTaskLists>
 80066c8:	e00d      	b.n	80066e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80066ca:	4b23      	ldr	r3, [pc, #140]	; (8006758 <prvAddNewTaskToReadyList+0xc0>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d109      	bne.n	80066e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066d2:	4b20      	ldr	r3, [pc, #128]	; (8006754 <prvAddNewTaskToReadyList+0xbc>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066dc:	429a      	cmp	r2, r3
 80066de:	d802      	bhi.n	80066e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066e0:	4a1c      	ldr	r2, [pc, #112]	; (8006754 <prvAddNewTaskToReadyList+0xbc>)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066e6:	4b1d      	ldr	r3, [pc, #116]	; (800675c <prvAddNewTaskToReadyList+0xc4>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	3301      	adds	r3, #1
 80066ec:	4a1b      	ldr	r2, [pc, #108]	; (800675c <prvAddNewTaskToReadyList+0xc4>)
 80066ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f4:	2201      	movs	r2, #1
 80066f6:	409a      	lsls	r2, r3
 80066f8:	4b19      	ldr	r3, [pc, #100]	; (8006760 <prvAddNewTaskToReadyList+0xc8>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	4a18      	ldr	r2, [pc, #96]	; (8006760 <prvAddNewTaskToReadyList+0xc8>)
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006706:	4613      	mov	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4a15      	ldr	r2, [pc, #84]	; (8006764 <prvAddNewTaskToReadyList+0xcc>)
 8006710:	441a      	add	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	3304      	adds	r3, #4
 8006716:	4619      	mov	r1, r3
 8006718:	4610      	mov	r0, r2
 800671a:	f7ff fe0d 	bl	8006338 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800671e:	f000 fd11 	bl	8007144 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006722:	4b0d      	ldr	r3, [pc, #52]	; (8006758 <prvAddNewTaskToReadyList+0xc0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00e      	beq.n	8006748 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800672a:	4b0a      	ldr	r3, [pc, #40]	; (8006754 <prvAddNewTaskToReadyList+0xbc>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	429a      	cmp	r2, r3
 8006736:	d207      	bcs.n	8006748 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006738:	4b0b      	ldr	r3, [pc, #44]	; (8006768 <prvAddNewTaskToReadyList+0xd0>)
 800673a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800673e:	601a      	str	r2, [r3, #0]
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006748:	bf00      	nop
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	20000cf4 	.word	0x20000cf4
 8006754:	20000bf4 	.word	0x20000bf4
 8006758:	20000d00 	.word	0x20000d00
 800675c:	20000d10 	.word	0x20000d10
 8006760:	20000cfc 	.word	0x20000cfc
 8006764:	20000bf8 	.word	0x20000bf8
 8006768:	e000ed04 	.word	0xe000ed04

0800676c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006774:	2300      	movs	r3, #0
 8006776:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d017      	beq.n	80067ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800677e:	4b13      	ldr	r3, [pc, #76]	; (80067cc <vTaskDelay+0x60>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <vTaskDelay+0x30>
	__asm volatile
 8006786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678a:	f383 8811 	msr	BASEPRI, r3
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	f3bf 8f4f 	dsb	sy
 8006796:	60bb      	str	r3, [r7, #8]
}
 8006798:	bf00      	nop
 800679a:	e7fe      	b.n	800679a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800679c:	f000 f87a 	bl	8006894 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80067a0:	2100      	movs	r1, #0
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fb0a 	bl	8006dbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067a8:	f000 f882 	bl	80068b0 <xTaskResumeAll>
 80067ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d107      	bne.n	80067c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80067b4:	4b06      	ldr	r3, [pc, #24]	; (80067d0 <vTaskDelay+0x64>)
 80067b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067c4:	bf00      	nop
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	20000d1c 	.word	0x20000d1c
 80067d0:	e000ed04 	.word	0xe000ed04

080067d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08a      	sub	sp, #40	; 0x28
 80067d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067da:	2300      	movs	r3, #0
 80067dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80067de:	2300      	movs	r3, #0
 80067e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067e2:	463a      	mov	r2, r7
 80067e4:	1d39      	adds	r1, r7, #4
 80067e6:	f107 0308 	add.w	r3, r7, #8
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7fa ff82 	bl	80016f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	9202      	str	r2, [sp, #8]
 80067f8:	9301      	str	r3, [sp, #4]
 80067fa:	2300      	movs	r3, #0
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	2300      	movs	r3, #0
 8006800:	460a      	mov	r2, r1
 8006802:	491e      	ldr	r1, [pc, #120]	; (800687c <vTaskStartScheduler+0xa8>)
 8006804:	481e      	ldr	r0, [pc, #120]	; (8006880 <vTaskStartScheduler+0xac>)
 8006806:	f7ff fe1e 	bl	8006446 <xTaskCreateStatic>
 800680a:	4603      	mov	r3, r0
 800680c:	4a1d      	ldr	r2, [pc, #116]	; (8006884 <vTaskStartScheduler+0xb0>)
 800680e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006810:	4b1c      	ldr	r3, [pc, #112]	; (8006884 <vTaskStartScheduler+0xb0>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d002      	beq.n	800681e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006818:	2301      	movs	r3, #1
 800681a:	617b      	str	r3, [r7, #20]
 800681c:	e001      	b.n	8006822 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800681e:	2300      	movs	r3, #0
 8006820:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d116      	bne.n	8006856 <vTaskStartScheduler+0x82>
	__asm volatile
 8006828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682c:	f383 8811 	msr	BASEPRI, r3
 8006830:	f3bf 8f6f 	isb	sy
 8006834:	f3bf 8f4f 	dsb	sy
 8006838:	613b      	str	r3, [r7, #16]
}
 800683a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800683c:	4b12      	ldr	r3, [pc, #72]	; (8006888 <vTaskStartScheduler+0xb4>)
 800683e:	f04f 32ff 	mov.w	r2, #4294967295
 8006842:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006844:	4b11      	ldr	r3, [pc, #68]	; (800688c <vTaskStartScheduler+0xb8>)
 8006846:	2201      	movs	r2, #1
 8006848:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800684a:	4b11      	ldr	r3, [pc, #68]	; (8006890 <vTaskStartScheduler+0xbc>)
 800684c:	2200      	movs	r2, #0
 800684e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006850:	f000 fba6 	bl	8006fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006854:	e00e      	b.n	8006874 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685c:	d10a      	bne.n	8006874 <vTaskStartScheduler+0xa0>
	__asm volatile
 800685e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	60fb      	str	r3, [r7, #12]
}
 8006870:	bf00      	nop
 8006872:	e7fe      	b.n	8006872 <vTaskStartScheduler+0x9e>
}
 8006874:	bf00      	nop
 8006876:	3718      	adds	r7, #24
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	08008ecc 	.word	0x08008ecc
 8006880:	08006c11 	.word	0x08006c11
 8006884:	20000d18 	.word	0x20000d18
 8006888:	20000d14 	.word	0x20000d14
 800688c:	20000d00 	.word	0x20000d00
 8006890:	20000cf8 	.word	0x20000cf8

08006894 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006898:	4b04      	ldr	r3, [pc, #16]	; (80068ac <vTaskSuspendAll+0x18>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3301      	adds	r3, #1
 800689e:	4a03      	ldr	r2, [pc, #12]	; (80068ac <vTaskSuspendAll+0x18>)
 80068a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80068a2:	bf00      	nop
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	20000d1c 	.word	0x20000d1c

080068b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80068b6:	2300      	movs	r3, #0
 80068b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80068ba:	2300      	movs	r3, #0
 80068bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80068be:	4b41      	ldr	r3, [pc, #260]	; (80069c4 <xTaskResumeAll+0x114>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10a      	bne.n	80068dc <xTaskResumeAll+0x2c>
	__asm volatile
 80068c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ca:	f383 8811 	msr	BASEPRI, r3
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f3bf 8f4f 	dsb	sy
 80068d6:	603b      	str	r3, [r7, #0]
}
 80068d8:	bf00      	nop
 80068da:	e7fe      	b.n	80068da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80068dc:	f000 fc02 	bl	80070e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80068e0:	4b38      	ldr	r3, [pc, #224]	; (80069c4 <xTaskResumeAll+0x114>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	4a37      	ldr	r2, [pc, #220]	; (80069c4 <xTaskResumeAll+0x114>)
 80068e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068ea:	4b36      	ldr	r3, [pc, #216]	; (80069c4 <xTaskResumeAll+0x114>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d161      	bne.n	80069b6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80068f2:	4b35      	ldr	r3, [pc, #212]	; (80069c8 <xTaskResumeAll+0x118>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d05d      	beq.n	80069b6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068fa:	e02e      	b.n	800695a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068fc:	4b33      	ldr	r3, [pc, #204]	; (80069cc <xTaskResumeAll+0x11c>)
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	3318      	adds	r3, #24
 8006908:	4618      	mov	r0, r3
 800690a:	f7ff fd72 	bl	80063f2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	3304      	adds	r3, #4
 8006912:	4618      	mov	r0, r3
 8006914:	f7ff fd6d 	bl	80063f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691c:	2201      	movs	r2, #1
 800691e:	409a      	lsls	r2, r3
 8006920:	4b2b      	ldr	r3, [pc, #172]	; (80069d0 <xTaskResumeAll+0x120>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4313      	orrs	r3, r2
 8006926:	4a2a      	ldr	r2, [pc, #168]	; (80069d0 <xTaskResumeAll+0x120>)
 8006928:	6013      	str	r3, [r2, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800692e:	4613      	mov	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4a27      	ldr	r2, [pc, #156]	; (80069d4 <xTaskResumeAll+0x124>)
 8006938:	441a      	add	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3304      	adds	r3, #4
 800693e:	4619      	mov	r1, r3
 8006940:	4610      	mov	r0, r2
 8006942:	f7ff fcf9 	bl	8006338 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694a:	4b23      	ldr	r3, [pc, #140]	; (80069d8 <xTaskResumeAll+0x128>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006950:	429a      	cmp	r2, r3
 8006952:	d302      	bcc.n	800695a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006954:	4b21      	ldr	r3, [pc, #132]	; (80069dc <xTaskResumeAll+0x12c>)
 8006956:	2201      	movs	r2, #1
 8006958:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800695a:	4b1c      	ldr	r3, [pc, #112]	; (80069cc <xTaskResumeAll+0x11c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1cc      	bne.n	80068fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006968:	f000 fa08 	bl	8006d7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800696c:	4b1c      	ldr	r3, [pc, #112]	; (80069e0 <xTaskResumeAll+0x130>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d010      	beq.n	800699a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006978:	f000 f836 	bl	80069e8 <xTaskIncrementTick>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006982:	4b16      	ldr	r3, [pc, #88]	; (80069dc <xTaskResumeAll+0x12c>)
 8006984:	2201      	movs	r2, #1
 8006986:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	3b01      	subs	r3, #1
 800698c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1f1      	bne.n	8006978 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006994:	4b12      	ldr	r3, [pc, #72]	; (80069e0 <xTaskResumeAll+0x130>)
 8006996:	2200      	movs	r2, #0
 8006998:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800699a:	4b10      	ldr	r3, [pc, #64]	; (80069dc <xTaskResumeAll+0x12c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d009      	beq.n	80069b6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069a2:	2301      	movs	r3, #1
 80069a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069a6:	4b0f      	ldr	r3, [pc, #60]	; (80069e4 <xTaskResumeAll+0x134>)
 80069a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069b6:	f000 fbc5 	bl	8007144 <vPortExitCritical>

	return xAlreadyYielded;
 80069ba:	68bb      	ldr	r3, [r7, #8]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	20000d1c 	.word	0x20000d1c
 80069c8:	20000cf4 	.word	0x20000cf4
 80069cc:	20000cb4 	.word	0x20000cb4
 80069d0:	20000cfc 	.word	0x20000cfc
 80069d4:	20000bf8 	.word	0x20000bf8
 80069d8:	20000bf4 	.word	0x20000bf4
 80069dc:	20000d08 	.word	0x20000d08
 80069e0:	20000d04 	.word	0x20000d04
 80069e4:	e000ed04 	.word	0xe000ed04

080069e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80069ee:	2300      	movs	r3, #0
 80069f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069f2:	4b4e      	ldr	r3, [pc, #312]	; (8006b2c <xTaskIncrementTick+0x144>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f040 808e 	bne.w	8006b18 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80069fc:	4b4c      	ldr	r3, [pc, #304]	; (8006b30 <xTaskIncrementTick+0x148>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3301      	adds	r3, #1
 8006a02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a04:	4a4a      	ldr	r2, [pc, #296]	; (8006b30 <xTaskIncrementTick+0x148>)
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d120      	bne.n	8006a52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a10:	4b48      	ldr	r3, [pc, #288]	; (8006b34 <xTaskIncrementTick+0x14c>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00a      	beq.n	8006a30 <xTaskIncrementTick+0x48>
	__asm volatile
 8006a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	603b      	str	r3, [r7, #0]
}
 8006a2c:	bf00      	nop
 8006a2e:	e7fe      	b.n	8006a2e <xTaskIncrementTick+0x46>
 8006a30:	4b40      	ldr	r3, [pc, #256]	; (8006b34 <xTaskIncrementTick+0x14c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	60fb      	str	r3, [r7, #12]
 8006a36:	4b40      	ldr	r3, [pc, #256]	; (8006b38 <xTaskIncrementTick+0x150>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a3e      	ldr	r2, [pc, #248]	; (8006b34 <xTaskIncrementTick+0x14c>)
 8006a3c:	6013      	str	r3, [r2, #0]
 8006a3e:	4a3e      	ldr	r2, [pc, #248]	; (8006b38 <xTaskIncrementTick+0x150>)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6013      	str	r3, [r2, #0]
 8006a44:	4b3d      	ldr	r3, [pc, #244]	; (8006b3c <xTaskIncrementTick+0x154>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	4a3c      	ldr	r2, [pc, #240]	; (8006b3c <xTaskIncrementTick+0x154>)
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	f000 f995 	bl	8006d7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a52:	4b3b      	ldr	r3, [pc, #236]	; (8006b40 <xTaskIncrementTick+0x158>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d348      	bcc.n	8006aee <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a5c:	4b35      	ldr	r3, [pc, #212]	; (8006b34 <xTaskIncrementTick+0x14c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d104      	bne.n	8006a70 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a66:	4b36      	ldr	r3, [pc, #216]	; (8006b40 <xTaskIncrementTick+0x158>)
 8006a68:	f04f 32ff 	mov.w	r2, #4294967295
 8006a6c:	601a      	str	r2, [r3, #0]
					break;
 8006a6e:	e03e      	b.n	8006aee <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a70:	4b30      	ldr	r3, [pc, #192]	; (8006b34 <xTaskIncrementTick+0x14c>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d203      	bcs.n	8006a90 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a88:	4a2d      	ldr	r2, [pc, #180]	; (8006b40 <xTaskIncrementTick+0x158>)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006a8e:	e02e      	b.n	8006aee <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	3304      	adds	r3, #4
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7ff fcac 	bl	80063f2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	3318      	adds	r3, #24
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7ff fca3 	bl	80063f2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	409a      	lsls	r2, r3
 8006ab4:	4b23      	ldr	r3, [pc, #140]	; (8006b44 <xTaskIncrementTick+0x15c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	4a22      	ldr	r2, [pc, #136]	; (8006b44 <xTaskIncrementTick+0x15c>)
 8006abc:	6013      	str	r3, [r2, #0]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4a1f      	ldr	r2, [pc, #124]	; (8006b48 <xTaskIncrementTick+0x160>)
 8006acc:	441a      	add	r2, r3
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	f7ff fc2f 	bl	8006338 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ade:	4b1b      	ldr	r3, [pc, #108]	; (8006b4c <xTaskIncrementTick+0x164>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d3b9      	bcc.n	8006a5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006aec:	e7b6      	b.n	8006a5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006aee:	4b17      	ldr	r3, [pc, #92]	; (8006b4c <xTaskIncrementTick+0x164>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af4:	4914      	ldr	r1, [pc, #80]	; (8006b48 <xTaskIncrementTick+0x160>)
 8006af6:	4613      	mov	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	440b      	add	r3, r1
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d901      	bls.n	8006b0a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006b06:	2301      	movs	r3, #1
 8006b08:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b0a:	4b11      	ldr	r3, [pc, #68]	; (8006b50 <xTaskIncrementTick+0x168>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d007      	beq.n	8006b22 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006b12:	2301      	movs	r3, #1
 8006b14:	617b      	str	r3, [r7, #20]
 8006b16:	e004      	b.n	8006b22 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b18:	4b0e      	ldr	r3, [pc, #56]	; (8006b54 <xTaskIncrementTick+0x16c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	4a0d      	ldr	r2, [pc, #52]	; (8006b54 <xTaskIncrementTick+0x16c>)
 8006b20:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b22:	697b      	ldr	r3, [r7, #20]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	20000d1c 	.word	0x20000d1c
 8006b30:	20000cf8 	.word	0x20000cf8
 8006b34:	20000cac 	.word	0x20000cac
 8006b38:	20000cb0 	.word	0x20000cb0
 8006b3c:	20000d0c 	.word	0x20000d0c
 8006b40:	20000d14 	.word	0x20000d14
 8006b44:	20000cfc 	.word	0x20000cfc
 8006b48:	20000bf8 	.word	0x20000bf8
 8006b4c:	20000bf4 	.word	0x20000bf4
 8006b50:	20000d08 	.word	0x20000d08
 8006b54:	20000d04 	.word	0x20000d04

08006b58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b5e:	4b27      	ldr	r3, [pc, #156]	; (8006bfc <vTaskSwitchContext+0xa4>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b66:	4b26      	ldr	r3, [pc, #152]	; (8006c00 <vTaskSwitchContext+0xa8>)
 8006b68:	2201      	movs	r2, #1
 8006b6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b6c:	e03f      	b.n	8006bee <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006b6e:	4b24      	ldr	r3, [pc, #144]	; (8006c00 <vTaskSwitchContext+0xa8>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b74:	4b23      	ldr	r3, [pc, #140]	; (8006c04 <vTaskSwitchContext+0xac>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	fab3 f383 	clz	r3, r3
 8006b80:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006b82:	7afb      	ldrb	r3, [r7, #11]
 8006b84:	f1c3 031f 	rsb	r3, r3, #31
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	491f      	ldr	r1, [pc, #124]	; (8006c08 <vTaskSwitchContext+0xb0>)
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	440b      	add	r3, r1
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10a      	bne.n	8006bb4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	607b      	str	r3, [r7, #4]
}
 8006bb0:	bf00      	nop
 8006bb2:	e7fe      	b.n	8006bb2 <vTaskSwitchContext+0x5a>
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4a12      	ldr	r2, [pc, #72]	; (8006c08 <vTaskSwitchContext+0xb0>)
 8006bc0:	4413      	add	r3, r2
 8006bc2:	613b      	str	r3, [r7, #16]
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	605a      	str	r2, [r3, #4]
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	3308      	adds	r3, #8
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d104      	bne.n	8006be4 <vTaskSwitchContext+0x8c>
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	605a      	str	r2, [r3, #4]
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	4a08      	ldr	r2, [pc, #32]	; (8006c0c <vTaskSwitchContext+0xb4>)
 8006bec:	6013      	str	r3, [r2, #0]
}
 8006bee:	bf00      	nop
 8006bf0:	371c      	adds	r7, #28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	20000d1c 	.word	0x20000d1c
 8006c00:	20000d08 	.word	0x20000d08
 8006c04:	20000cfc 	.word	0x20000cfc
 8006c08:	20000bf8 	.word	0x20000bf8
 8006c0c:	20000bf4 	.word	0x20000bf4

08006c10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c18:	f000 f852 	bl	8006cc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c1c:	4b06      	ldr	r3, [pc, #24]	; (8006c38 <prvIdleTask+0x28>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d9f9      	bls.n	8006c18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c24:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <prvIdleTask+0x2c>)
 8006c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c34:	e7f0      	b.n	8006c18 <prvIdleTask+0x8>
 8006c36:	bf00      	nop
 8006c38:	20000bf8 	.word	0x20000bf8
 8006c3c:	e000ed04 	.word	0xe000ed04

08006c40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c46:	2300      	movs	r3, #0
 8006c48:	607b      	str	r3, [r7, #4]
 8006c4a:	e00c      	b.n	8006c66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4a12      	ldr	r2, [pc, #72]	; (8006ca0 <prvInitialiseTaskLists+0x60>)
 8006c58:	4413      	add	r3, r2
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7ff fb3f 	bl	80062de <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3301      	adds	r3, #1
 8006c64:	607b      	str	r3, [r7, #4]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b06      	cmp	r3, #6
 8006c6a:	d9ef      	bls.n	8006c4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c6c:	480d      	ldr	r0, [pc, #52]	; (8006ca4 <prvInitialiseTaskLists+0x64>)
 8006c6e:	f7ff fb36 	bl	80062de <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c72:	480d      	ldr	r0, [pc, #52]	; (8006ca8 <prvInitialiseTaskLists+0x68>)
 8006c74:	f7ff fb33 	bl	80062de <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c78:	480c      	ldr	r0, [pc, #48]	; (8006cac <prvInitialiseTaskLists+0x6c>)
 8006c7a:	f7ff fb30 	bl	80062de <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c7e:	480c      	ldr	r0, [pc, #48]	; (8006cb0 <prvInitialiseTaskLists+0x70>)
 8006c80:	f7ff fb2d 	bl	80062de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c84:	480b      	ldr	r0, [pc, #44]	; (8006cb4 <prvInitialiseTaskLists+0x74>)
 8006c86:	f7ff fb2a 	bl	80062de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c8a:	4b0b      	ldr	r3, [pc, #44]	; (8006cb8 <prvInitialiseTaskLists+0x78>)
 8006c8c:	4a05      	ldr	r2, [pc, #20]	; (8006ca4 <prvInitialiseTaskLists+0x64>)
 8006c8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c90:	4b0a      	ldr	r3, [pc, #40]	; (8006cbc <prvInitialiseTaskLists+0x7c>)
 8006c92:	4a05      	ldr	r2, [pc, #20]	; (8006ca8 <prvInitialiseTaskLists+0x68>)
 8006c94:	601a      	str	r2, [r3, #0]
}
 8006c96:	bf00      	nop
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20000bf8 	.word	0x20000bf8
 8006ca4:	20000c84 	.word	0x20000c84
 8006ca8:	20000c98 	.word	0x20000c98
 8006cac:	20000cb4 	.word	0x20000cb4
 8006cb0:	20000cc8 	.word	0x20000cc8
 8006cb4:	20000ce0 	.word	0x20000ce0
 8006cb8:	20000cac 	.word	0x20000cac
 8006cbc:	20000cb0 	.word	0x20000cb0

08006cc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cc6:	e019      	b.n	8006cfc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006cc8:	f000 fa0c 	bl	80070e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ccc:	4b10      	ldr	r3, [pc, #64]	; (8006d10 <prvCheckTasksWaitingTermination+0x50>)
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7ff fb8a 	bl	80063f2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006cde:	4b0d      	ldr	r3, [pc, #52]	; (8006d14 <prvCheckTasksWaitingTermination+0x54>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	4a0b      	ldr	r2, [pc, #44]	; (8006d14 <prvCheckTasksWaitingTermination+0x54>)
 8006ce6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ce8:	4b0b      	ldr	r3, [pc, #44]	; (8006d18 <prvCheckTasksWaitingTermination+0x58>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3b01      	subs	r3, #1
 8006cee:	4a0a      	ldr	r2, [pc, #40]	; (8006d18 <prvCheckTasksWaitingTermination+0x58>)
 8006cf0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006cf2:	f000 fa27 	bl	8007144 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f810 	bl	8006d1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cfc:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <prvCheckTasksWaitingTermination+0x58>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1e1      	bne.n	8006cc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	20000cc8 	.word	0x20000cc8
 8006d14:	20000cf4 	.word	0x20000cf4
 8006d18:	20000cdc 	.word	0x20000cdc

08006d1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d108      	bne.n	8006d40 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 fb84 	bl	8007440 <vPortFree>
				vPortFree( pxTCB );
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fb81 	bl	8007440 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d3e:	e018      	b.n	8006d72 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d103      	bne.n	8006d52 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fb78 	bl	8007440 <vPortFree>
	}
 8006d50:	e00f      	b.n	8006d72 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d00a      	beq.n	8006d72 <prvDeleteTCB+0x56>
	__asm volatile
 8006d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	60fb      	str	r3, [r7, #12]
}
 8006d6e:	bf00      	nop
 8006d70:	e7fe      	b.n	8006d70 <prvDeleteTCB+0x54>
	}
 8006d72:	bf00      	nop
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
	...

08006d7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d82:	4b0c      	ldr	r3, [pc, #48]	; (8006db4 <prvResetNextTaskUnblockTime+0x38>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d104      	bne.n	8006d96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d8c:	4b0a      	ldr	r3, [pc, #40]	; (8006db8 <prvResetNextTaskUnblockTime+0x3c>)
 8006d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d94:	e008      	b.n	8006da8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d96:	4b07      	ldr	r3, [pc, #28]	; (8006db4 <prvResetNextTaskUnblockTime+0x38>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	4a04      	ldr	r2, [pc, #16]	; (8006db8 <prvResetNextTaskUnblockTime+0x3c>)
 8006da6:	6013      	str	r3, [r2, #0]
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	20000cac 	.word	0x20000cac
 8006db8:	20000d14 	.word	0x20000d14

08006dbc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006dc6:	4b29      	ldr	r3, [pc, #164]	; (8006e6c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dcc:	4b28      	ldr	r3, [pc, #160]	; (8006e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	3304      	adds	r3, #4
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7ff fb0d 	bl	80063f2 <uxListRemove>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10b      	bne.n	8006df6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006dde:	4b24      	ldr	r3, [pc, #144]	; (8006e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de4:	2201      	movs	r2, #1
 8006de6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dea:	43da      	mvns	r2, r3
 8006dec:	4b21      	ldr	r3, [pc, #132]	; (8006e74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4013      	ands	r3, r2
 8006df2:	4a20      	ldr	r2, [pc, #128]	; (8006e74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006df4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfc:	d10a      	bne.n	8006e14 <prvAddCurrentTaskToDelayedList+0x58>
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d007      	beq.n	8006e14 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e04:	4b1a      	ldr	r3, [pc, #104]	; (8006e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3304      	adds	r3, #4
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	481a      	ldr	r0, [pc, #104]	; (8006e78 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006e0e:	f7ff fa93 	bl	8006338 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e12:	e026      	b.n	8006e62 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4413      	add	r3, r2
 8006e1a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e1c:	4b14      	ldr	r3, [pc, #80]	; (8006e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d209      	bcs.n	8006e40 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e2c:	4b13      	ldr	r3, [pc, #76]	; (8006e7c <prvAddCurrentTaskToDelayedList+0xc0>)
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	4b0f      	ldr	r3, [pc, #60]	; (8006e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3304      	adds	r3, #4
 8006e36:	4619      	mov	r1, r3
 8006e38:	4610      	mov	r0, r2
 8006e3a:	f7ff faa1 	bl	8006380 <vListInsert>
}
 8006e3e:	e010      	b.n	8006e62 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e40:	4b0f      	ldr	r3, [pc, #60]	; (8006e80 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	4b0a      	ldr	r3, [pc, #40]	; (8006e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	f7ff fa97 	bl	8006380 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e52:	4b0c      	ldr	r3, [pc, #48]	; (8006e84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d202      	bcs.n	8006e62 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006e5c:	4a09      	ldr	r2, [pc, #36]	; (8006e84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	6013      	str	r3, [r2, #0]
}
 8006e62:	bf00      	nop
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	20000cf8 	.word	0x20000cf8
 8006e70:	20000bf4 	.word	0x20000bf4
 8006e74:	20000cfc 	.word	0x20000cfc
 8006e78:	20000ce0 	.word	0x20000ce0
 8006e7c:	20000cb0 	.word	0x20000cb0
 8006e80:	20000cac 	.word	0x20000cac
 8006e84:	20000d14 	.word	0x20000d14

08006e88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	3b04      	subs	r3, #4
 8006e98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	3b04      	subs	r3, #4
 8006ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	f023 0201 	bic.w	r2, r3, #1
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3b04      	subs	r3, #4
 8006eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006eb8:	4a0c      	ldr	r2, [pc, #48]	; (8006eec <pxPortInitialiseStack+0x64>)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	3b14      	subs	r3, #20
 8006ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3b04      	subs	r3, #4
 8006ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f06f 0202 	mvn.w	r2, #2
 8006ed6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	3b20      	subs	r3, #32
 8006edc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ede:	68fb      	ldr	r3, [r7, #12]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	08006ef1 	.word	0x08006ef1

08006ef0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006efa:	4b12      	ldr	r3, [pc, #72]	; (8006f44 <prvTaskExitError+0x54>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f02:	d00a      	beq.n	8006f1a <prvTaskExitError+0x2a>
	__asm volatile
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	60fb      	str	r3, [r7, #12]
}
 8006f16:	bf00      	nop
 8006f18:	e7fe      	b.n	8006f18 <prvTaskExitError+0x28>
	__asm volatile
 8006f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1e:	f383 8811 	msr	BASEPRI, r3
 8006f22:	f3bf 8f6f 	isb	sy
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	60bb      	str	r3, [r7, #8]
}
 8006f2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f2e:	bf00      	nop
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d0fc      	beq.n	8006f30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f36:	bf00      	nop
 8006f38:	bf00      	nop
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	2000000c 	.word	0x2000000c
	...

08006f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f50:	4b07      	ldr	r3, [pc, #28]	; (8006f70 <pxCurrentTCBConst2>)
 8006f52:	6819      	ldr	r1, [r3, #0]
 8006f54:	6808      	ldr	r0, [r1, #0]
 8006f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5a:	f380 8809 	msr	PSP, r0
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f04f 0000 	mov.w	r0, #0
 8006f66:	f380 8811 	msr	BASEPRI, r0
 8006f6a:	4770      	bx	lr
 8006f6c:	f3af 8000 	nop.w

08006f70 <pxCurrentTCBConst2>:
 8006f70:	20000bf4 	.word	0x20000bf4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f74:	bf00      	nop
 8006f76:	bf00      	nop

08006f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f78:	4808      	ldr	r0, [pc, #32]	; (8006f9c <prvPortStartFirstTask+0x24>)
 8006f7a:	6800      	ldr	r0, [r0, #0]
 8006f7c:	6800      	ldr	r0, [r0, #0]
 8006f7e:	f380 8808 	msr	MSP, r0
 8006f82:	f04f 0000 	mov.w	r0, #0
 8006f86:	f380 8814 	msr	CONTROL, r0
 8006f8a:	b662      	cpsie	i
 8006f8c:	b661      	cpsie	f
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	df00      	svc	0
 8006f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f9a:	bf00      	nop
 8006f9c:	e000ed08 	.word	0xe000ed08

08006fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fa6:	4b46      	ldr	r3, [pc, #280]	; (80070c0 <xPortStartScheduler+0x120>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a46      	ldr	r2, [pc, #280]	; (80070c4 <xPortStartScheduler+0x124>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d10a      	bne.n	8006fc6 <xPortStartScheduler+0x26>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	613b      	str	r3, [r7, #16]
}
 8006fc2:	bf00      	nop
 8006fc4:	e7fe      	b.n	8006fc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006fc6:	4b3e      	ldr	r3, [pc, #248]	; (80070c0 <xPortStartScheduler+0x120>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a3f      	ldr	r2, [pc, #252]	; (80070c8 <xPortStartScheduler+0x128>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d10a      	bne.n	8006fe6 <xPortStartScheduler+0x46>
	__asm volatile
 8006fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	60fb      	str	r3, [r7, #12]
}
 8006fe2:	bf00      	nop
 8006fe4:	e7fe      	b.n	8006fe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006fe6:	4b39      	ldr	r3, [pc, #228]	; (80070cc <xPortStartScheduler+0x12c>)
 8006fe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	22ff      	movs	r2, #255	; 0xff
 8006ff6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007000:	78fb      	ldrb	r3, [r7, #3]
 8007002:	b2db      	uxtb	r3, r3
 8007004:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007008:	b2da      	uxtb	r2, r3
 800700a:	4b31      	ldr	r3, [pc, #196]	; (80070d0 <xPortStartScheduler+0x130>)
 800700c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800700e:	4b31      	ldr	r3, [pc, #196]	; (80070d4 <xPortStartScheduler+0x134>)
 8007010:	2207      	movs	r2, #7
 8007012:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007014:	e009      	b.n	800702a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007016:	4b2f      	ldr	r3, [pc, #188]	; (80070d4 <xPortStartScheduler+0x134>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3b01      	subs	r3, #1
 800701c:	4a2d      	ldr	r2, [pc, #180]	; (80070d4 <xPortStartScheduler+0x134>)
 800701e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007020:	78fb      	ldrb	r3, [r7, #3]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	005b      	lsls	r3, r3, #1
 8007026:	b2db      	uxtb	r3, r3
 8007028:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800702a:	78fb      	ldrb	r3, [r7, #3]
 800702c:	b2db      	uxtb	r3, r3
 800702e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007032:	2b80      	cmp	r3, #128	; 0x80
 8007034:	d0ef      	beq.n	8007016 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007036:	4b27      	ldr	r3, [pc, #156]	; (80070d4 <xPortStartScheduler+0x134>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f1c3 0307 	rsb	r3, r3, #7
 800703e:	2b04      	cmp	r3, #4
 8007040:	d00a      	beq.n	8007058 <xPortStartScheduler+0xb8>
	__asm volatile
 8007042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007046:	f383 8811 	msr	BASEPRI, r3
 800704a:	f3bf 8f6f 	isb	sy
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	60bb      	str	r3, [r7, #8]
}
 8007054:	bf00      	nop
 8007056:	e7fe      	b.n	8007056 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007058:	4b1e      	ldr	r3, [pc, #120]	; (80070d4 <xPortStartScheduler+0x134>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	021b      	lsls	r3, r3, #8
 800705e:	4a1d      	ldr	r2, [pc, #116]	; (80070d4 <xPortStartScheduler+0x134>)
 8007060:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007062:	4b1c      	ldr	r3, [pc, #112]	; (80070d4 <xPortStartScheduler+0x134>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800706a:	4a1a      	ldr	r2, [pc, #104]	; (80070d4 <xPortStartScheduler+0x134>)
 800706c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	b2da      	uxtb	r2, r3
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007076:	4b18      	ldr	r3, [pc, #96]	; (80070d8 <xPortStartScheduler+0x138>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a17      	ldr	r2, [pc, #92]	; (80070d8 <xPortStartScheduler+0x138>)
 800707c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007080:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007082:	4b15      	ldr	r3, [pc, #84]	; (80070d8 <xPortStartScheduler+0x138>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a14      	ldr	r2, [pc, #80]	; (80070d8 <xPortStartScheduler+0x138>)
 8007088:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800708c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800708e:	f000 f8dd 	bl	800724c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007092:	4b12      	ldr	r3, [pc, #72]	; (80070dc <xPortStartScheduler+0x13c>)
 8007094:	2200      	movs	r2, #0
 8007096:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007098:	f000 f8fc 	bl	8007294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800709c:	4b10      	ldr	r3, [pc, #64]	; (80070e0 <xPortStartScheduler+0x140>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a0f      	ldr	r2, [pc, #60]	; (80070e0 <xPortStartScheduler+0x140>)
 80070a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80070a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070a8:	f7ff ff66 	bl	8006f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070ac:	f7ff fd54 	bl	8006b58 <vTaskSwitchContext>
	prvTaskExitError();
 80070b0:	f7ff ff1e 	bl	8006ef0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3718      	adds	r7, #24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	e000ed00 	.word	0xe000ed00
 80070c4:	410fc271 	.word	0x410fc271
 80070c8:	410fc270 	.word	0x410fc270
 80070cc:	e000e400 	.word	0xe000e400
 80070d0:	20000d20 	.word	0x20000d20
 80070d4:	20000d24 	.word	0x20000d24
 80070d8:	e000ed20 	.word	0xe000ed20
 80070dc:	2000000c 	.word	0x2000000c
 80070e0:	e000ef34 	.word	0xe000ef34

080070e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
	__asm volatile
 80070ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ee:	f383 8811 	msr	BASEPRI, r3
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	f3bf 8f4f 	dsb	sy
 80070fa:	607b      	str	r3, [r7, #4]
}
 80070fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80070fe:	4b0f      	ldr	r3, [pc, #60]	; (800713c <vPortEnterCritical+0x58>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3301      	adds	r3, #1
 8007104:	4a0d      	ldr	r2, [pc, #52]	; (800713c <vPortEnterCritical+0x58>)
 8007106:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007108:	4b0c      	ldr	r3, [pc, #48]	; (800713c <vPortEnterCritical+0x58>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d10f      	bne.n	8007130 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007110:	4b0b      	ldr	r3, [pc, #44]	; (8007140 <vPortEnterCritical+0x5c>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00a      	beq.n	8007130 <vPortEnterCritical+0x4c>
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	603b      	str	r3, [r7, #0]
}
 800712c:	bf00      	nop
 800712e:	e7fe      	b.n	800712e <vPortEnterCritical+0x4a>
	}
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	2000000c 	.word	0x2000000c
 8007140:	e000ed04 	.word	0xe000ed04

08007144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800714a:	4b12      	ldr	r3, [pc, #72]	; (8007194 <vPortExitCritical+0x50>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10a      	bne.n	8007168 <vPortExitCritical+0x24>
	__asm volatile
 8007152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	607b      	str	r3, [r7, #4]
}
 8007164:	bf00      	nop
 8007166:	e7fe      	b.n	8007166 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007168:	4b0a      	ldr	r3, [pc, #40]	; (8007194 <vPortExitCritical+0x50>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3b01      	subs	r3, #1
 800716e:	4a09      	ldr	r2, [pc, #36]	; (8007194 <vPortExitCritical+0x50>)
 8007170:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007172:	4b08      	ldr	r3, [pc, #32]	; (8007194 <vPortExitCritical+0x50>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d105      	bne.n	8007186 <vPortExitCritical+0x42>
 800717a:	2300      	movs	r3, #0
 800717c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007184:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	2000000c 	.word	0x2000000c
	...

080071a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071a0:	f3ef 8009 	mrs	r0, PSP
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	4b15      	ldr	r3, [pc, #84]	; (8007200 <pxCurrentTCBConst>)
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	f01e 0f10 	tst.w	lr, #16
 80071b0:	bf08      	it	eq
 80071b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ba:	6010      	str	r0, [r2, #0]
 80071bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80071c4:	f380 8811 	msr	BASEPRI, r0
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f7ff fcc2 	bl	8006b58 <vTaskSwitchContext>
 80071d4:	f04f 0000 	mov.w	r0, #0
 80071d8:	f380 8811 	msr	BASEPRI, r0
 80071dc:	bc09      	pop	{r0, r3}
 80071de:	6819      	ldr	r1, [r3, #0]
 80071e0:	6808      	ldr	r0, [r1, #0]
 80071e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e6:	f01e 0f10 	tst.w	lr, #16
 80071ea:	bf08      	it	eq
 80071ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071f0:	f380 8809 	msr	PSP, r0
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	f3af 8000 	nop.w

08007200 <pxCurrentTCBConst>:
 8007200:	20000bf4 	.word	0x20000bf4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop

08007208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	607b      	str	r3, [r7, #4]
}
 8007220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007222:	f7ff fbe1 	bl	80069e8 <xTaskIncrementTick>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800722c:	4b06      	ldr	r3, [pc, #24]	; (8007248 <SysTick_Handler+0x40>)
 800722e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	2300      	movs	r3, #0
 8007236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	f383 8811 	msr	BASEPRI, r3
}
 800723e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007240:	bf00      	nop
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	e000ed04 	.word	0xe000ed04

0800724c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800724c:	b480      	push	{r7}
 800724e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007250:	4b0b      	ldr	r3, [pc, #44]	; (8007280 <vPortSetupTimerInterrupt+0x34>)
 8007252:	2200      	movs	r2, #0
 8007254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007256:	4b0b      	ldr	r3, [pc, #44]	; (8007284 <vPortSetupTimerInterrupt+0x38>)
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800725c:	4b0a      	ldr	r3, [pc, #40]	; (8007288 <vPortSetupTimerInterrupt+0x3c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a0a      	ldr	r2, [pc, #40]	; (800728c <vPortSetupTimerInterrupt+0x40>)
 8007262:	fba2 2303 	umull	r2, r3, r2, r3
 8007266:	099b      	lsrs	r3, r3, #6
 8007268:	4a09      	ldr	r2, [pc, #36]	; (8007290 <vPortSetupTimerInterrupt+0x44>)
 800726a:	3b01      	subs	r3, #1
 800726c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800726e:	4b04      	ldr	r3, [pc, #16]	; (8007280 <vPortSetupTimerInterrupt+0x34>)
 8007270:	2207      	movs	r2, #7
 8007272:	601a      	str	r2, [r3, #0]
}
 8007274:	bf00      	nop
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	e000e010 	.word	0xe000e010
 8007284:	e000e018 	.word	0xe000e018
 8007288:	20000000 	.word	0x20000000
 800728c:	10624dd3 	.word	0x10624dd3
 8007290:	e000e014 	.word	0xe000e014

08007294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007294:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80072a4 <vPortEnableVFP+0x10>
 8007298:	6801      	ldr	r1, [r0, #0]
 800729a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800729e:	6001      	str	r1, [r0, #0]
 80072a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072a2:	bf00      	nop
 80072a4:	e000ed88 	.word	0xe000ed88

080072a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b08a      	sub	sp, #40	; 0x28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072b0:	2300      	movs	r3, #0
 80072b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072b4:	f7ff faee 	bl	8006894 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072b8:	4b5b      	ldr	r3, [pc, #364]	; (8007428 <pvPortMalloc+0x180>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80072c0:	f000 f920 	bl	8007504 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80072c4:	4b59      	ldr	r3, [pc, #356]	; (800742c <pvPortMalloc+0x184>)
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4013      	ands	r3, r2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f040 8093 	bne.w	80073f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d01d      	beq.n	8007314 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80072d8:	2208      	movs	r2, #8
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4413      	add	r3, r2
 80072de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f003 0307 	and.w	r3, r3, #7
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d014      	beq.n	8007314 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f023 0307 	bic.w	r3, r3, #7
 80072f0:	3308      	adds	r3, #8
 80072f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00a      	beq.n	8007314 <pvPortMalloc+0x6c>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	617b      	str	r3, [r7, #20]
}
 8007310:	bf00      	nop
 8007312:	e7fe      	b.n	8007312 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d06e      	beq.n	80073f8 <pvPortMalloc+0x150>
 800731a:	4b45      	ldr	r3, [pc, #276]	; (8007430 <pvPortMalloc+0x188>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	429a      	cmp	r2, r3
 8007322:	d869      	bhi.n	80073f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007324:	4b43      	ldr	r3, [pc, #268]	; (8007434 <pvPortMalloc+0x18c>)
 8007326:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007328:	4b42      	ldr	r3, [pc, #264]	; (8007434 <pvPortMalloc+0x18c>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800732e:	e004      	b.n	800733a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	429a      	cmp	r2, r3
 8007342:	d903      	bls.n	800734c <pvPortMalloc+0xa4>
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1f1      	bne.n	8007330 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800734c:	4b36      	ldr	r3, [pc, #216]	; (8007428 <pvPortMalloc+0x180>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007352:	429a      	cmp	r2, r3
 8007354:	d050      	beq.n	80073f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2208      	movs	r2, #8
 800735c:	4413      	add	r3, r2
 800735e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	1ad2      	subs	r2, r2, r3
 8007370:	2308      	movs	r3, #8
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	429a      	cmp	r2, r3
 8007376:	d91f      	bls.n	80073b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4413      	add	r3, r2
 800737e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	f003 0307 	and.w	r3, r3, #7
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <pvPortMalloc+0xf8>
	__asm volatile
 800738a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738e:	f383 8811 	msr	BASEPRI, r3
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	613b      	str	r3, [r7, #16]
}
 800739c:	bf00      	nop
 800739e:	e7fe      	b.n	800739e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	1ad2      	subs	r2, r2, r3
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073b2:	69b8      	ldr	r0, [r7, #24]
 80073b4:	f000 f908 	bl	80075c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073b8:	4b1d      	ldr	r3, [pc, #116]	; (8007430 <pvPortMalloc+0x188>)
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	4a1b      	ldr	r2, [pc, #108]	; (8007430 <pvPortMalloc+0x188>)
 80073c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073c6:	4b1a      	ldr	r3, [pc, #104]	; (8007430 <pvPortMalloc+0x188>)
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	4b1b      	ldr	r3, [pc, #108]	; (8007438 <pvPortMalloc+0x190>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d203      	bcs.n	80073da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80073d2:	4b17      	ldr	r3, [pc, #92]	; (8007430 <pvPortMalloc+0x188>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a18      	ldr	r2, [pc, #96]	; (8007438 <pvPortMalloc+0x190>)
 80073d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	4b13      	ldr	r3, [pc, #76]	; (800742c <pvPortMalloc+0x184>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	431a      	orrs	r2, r3
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80073e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ea:	2200      	movs	r2, #0
 80073ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80073ee:	4b13      	ldr	r3, [pc, #76]	; (800743c <pvPortMalloc+0x194>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3301      	adds	r3, #1
 80073f4:	4a11      	ldr	r2, [pc, #68]	; (800743c <pvPortMalloc+0x194>)
 80073f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80073f8:	f7ff fa5a 	bl	80068b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	f003 0307 	and.w	r3, r3, #7
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00a      	beq.n	800741c <pvPortMalloc+0x174>
	__asm volatile
 8007406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	60fb      	str	r3, [r7, #12]
}
 8007418:	bf00      	nop
 800741a:	e7fe      	b.n	800741a <pvPortMalloc+0x172>
	return pvReturn;
 800741c:	69fb      	ldr	r3, [r7, #28]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3728      	adds	r7, #40	; 0x28
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	20004930 	.word	0x20004930
 800742c:	20004944 	.word	0x20004944
 8007430:	20004934 	.word	0x20004934
 8007434:	20004928 	.word	0x20004928
 8007438:	20004938 	.word	0x20004938
 800743c:	2000493c 	.word	0x2000493c

08007440 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d04d      	beq.n	80074ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007452:	2308      	movs	r3, #8
 8007454:	425b      	negs	r3, r3
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	4413      	add	r3, r2
 800745a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	4b24      	ldr	r3, [pc, #144]	; (80074f8 <vPortFree+0xb8>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4013      	ands	r3, r2
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10a      	bne.n	8007484 <vPortFree+0x44>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	60fb      	str	r3, [r7, #12]
}
 8007480:	bf00      	nop
 8007482:	e7fe      	b.n	8007482 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00a      	beq.n	80074a2 <vPortFree+0x62>
	__asm volatile
 800748c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007490:	f383 8811 	msr	BASEPRI, r3
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	60bb      	str	r3, [r7, #8]
}
 800749e:	bf00      	nop
 80074a0:	e7fe      	b.n	80074a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	4b14      	ldr	r3, [pc, #80]	; (80074f8 <vPortFree+0xb8>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4013      	ands	r3, r2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d01e      	beq.n	80074ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d11a      	bne.n	80074ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	685a      	ldr	r2, [r3, #4]
 80074bc:	4b0e      	ldr	r3, [pc, #56]	; (80074f8 <vPortFree+0xb8>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	43db      	mvns	r3, r3
 80074c2:	401a      	ands	r2, r3
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80074c8:	f7ff f9e4 	bl	8006894 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	4b0a      	ldr	r3, [pc, #40]	; (80074fc <vPortFree+0xbc>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4413      	add	r3, r2
 80074d6:	4a09      	ldr	r2, [pc, #36]	; (80074fc <vPortFree+0xbc>)
 80074d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074da:	6938      	ldr	r0, [r7, #16]
 80074dc:	f000 f874 	bl	80075c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80074e0:	4b07      	ldr	r3, [pc, #28]	; (8007500 <vPortFree+0xc0>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3301      	adds	r3, #1
 80074e6:	4a06      	ldr	r2, [pc, #24]	; (8007500 <vPortFree+0xc0>)
 80074e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80074ea:	f7ff f9e1 	bl	80068b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80074ee:	bf00      	nop
 80074f0:	3718      	adds	r7, #24
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20004944 	.word	0x20004944
 80074fc:	20004934 	.word	0x20004934
 8007500:	20004940 	.word	0x20004940

08007504 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800750a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800750e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007510:	4b27      	ldr	r3, [pc, #156]	; (80075b0 <prvHeapInit+0xac>)
 8007512:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f003 0307 	and.w	r3, r3, #7
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00c      	beq.n	8007538 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3307      	adds	r3, #7
 8007522:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f023 0307 	bic.w	r3, r3, #7
 800752a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	4a1f      	ldr	r2, [pc, #124]	; (80075b0 <prvHeapInit+0xac>)
 8007534:	4413      	add	r3, r2
 8007536:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800753c:	4a1d      	ldr	r2, [pc, #116]	; (80075b4 <prvHeapInit+0xb0>)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007542:	4b1c      	ldr	r3, [pc, #112]	; (80075b4 <prvHeapInit+0xb0>)
 8007544:	2200      	movs	r2, #0
 8007546:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	4413      	add	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007550:	2208      	movs	r2, #8
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	1a9b      	subs	r3, r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 0307 	bic.w	r3, r3, #7
 800755e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4a15      	ldr	r2, [pc, #84]	; (80075b8 <prvHeapInit+0xb4>)
 8007564:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007566:	4b14      	ldr	r3, [pc, #80]	; (80075b8 <prvHeapInit+0xb4>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2200      	movs	r2, #0
 800756c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800756e:	4b12      	ldr	r3, [pc, #72]	; (80075b8 <prvHeapInit+0xb4>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	1ad2      	subs	r2, r2, r3
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007584:	4b0c      	ldr	r3, [pc, #48]	; (80075b8 <prvHeapInit+0xb4>)
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	4a0a      	ldr	r2, [pc, #40]	; (80075bc <prvHeapInit+0xb8>)
 8007592:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	4a09      	ldr	r2, [pc, #36]	; (80075c0 <prvHeapInit+0xbc>)
 800759a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800759c:	4b09      	ldr	r3, [pc, #36]	; (80075c4 <prvHeapInit+0xc0>)
 800759e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80075a2:	601a      	str	r2, [r3, #0]
}
 80075a4:	bf00      	nop
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	20000d28 	.word	0x20000d28
 80075b4:	20004928 	.word	0x20004928
 80075b8:	20004930 	.word	0x20004930
 80075bc:	20004938 	.word	0x20004938
 80075c0:	20004934 	.word	0x20004934
 80075c4:	20004944 	.word	0x20004944

080075c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075d0:	4b28      	ldr	r3, [pc, #160]	; (8007674 <prvInsertBlockIntoFreeList+0xac>)
 80075d2:	60fb      	str	r3, [r7, #12]
 80075d4:	e002      	b.n	80075dc <prvInsertBlockIntoFreeList+0x14>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	60fb      	str	r3, [r7, #12]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d8f7      	bhi.n	80075d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	4413      	add	r3, r2
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d108      	bne.n	800760a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	441a      	add	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	441a      	add	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d118      	bne.n	8007650 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	4b15      	ldr	r3, [pc, #84]	; (8007678 <prvInsertBlockIntoFreeList+0xb0>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	429a      	cmp	r2, r3
 8007628:	d00d      	beq.n	8007646 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	441a      	add	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	e008      	b.n	8007658 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007646:	4b0c      	ldr	r3, [pc, #48]	; (8007678 <prvInsertBlockIntoFreeList+0xb0>)
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	e003      	b.n	8007658 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	429a      	cmp	r2, r3
 800765e:	d002      	beq.n	8007666 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007666:	bf00      	nop
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	20004928 	.word	0x20004928
 8007678:	20004930 	.word	0x20004930

0800767c <__errno>:
 800767c:	4b01      	ldr	r3, [pc, #4]	; (8007684 <__errno+0x8>)
 800767e:	6818      	ldr	r0, [r3, #0]
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	20000010 	.word	0x20000010

08007688 <__libc_init_array>:
 8007688:	b570      	push	{r4, r5, r6, lr}
 800768a:	4d0d      	ldr	r5, [pc, #52]	; (80076c0 <__libc_init_array+0x38>)
 800768c:	4c0d      	ldr	r4, [pc, #52]	; (80076c4 <__libc_init_array+0x3c>)
 800768e:	1b64      	subs	r4, r4, r5
 8007690:	10a4      	asrs	r4, r4, #2
 8007692:	2600      	movs	r6, #0
 8007694:	42a6      	cmp	r6, r4
 8007696:	d109      	bne.n	80076ac <__libc_init_array+0x24>
 8007698:	4d0b      	ldr	r5, [pc, #44]	; (80076c8 <__libc_init_array+0x40>)
 800769a:	4c0c      	ldr	r4, [pc, #48]	; (80076cc <__libc_init_array+0x44>)
 800769c:	f001 f94a 	bl	8008934 <_init>
 80076a0:	1b64      	subs	r4, r4, r5
 80076a2:	10a4      	asrs	r4, r4, #2
 80076a4:	2600      	movs	r6, #0
 80076a6:	42a6      	cmp	r6, r4
 80076a8:	d105      	bne.n	80076b6 <__libc_init_array+0x2e>
 80076aa:	bd70      	pop	{r4, r5, r6, pc}
 80076ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80076b0:	4798      	blx	r3
 80076b2:	3601      	adds	r6, #1
 80076b4:	e7ee      	b.n	8007694 <__libc_init_array+0xc>
 80076b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ba:	4798      	blx	r3
 80076bc:	3601      	adds	r6, #1
 80076be:	e7f2      	b.n	80076a6 <__libc_init_array+0x1e>
 80076c0:	08009134 	.word	0x08009134
 80076c4:	08009134 	.word	0x08009134
 80076c8:	08009134 	.word	0x08009134
 80076cc:	08009138 	.word	0x08009138

080076d0 <memcpy>:
 80076d0:	440a      	add	r2, r1
 80076d2:	4291      	cmp	r1, r2
 80076d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80076d8:	d100      	bne.n	80076dc <memcpy+0xc>
 80076da:	4770      	bx	lr
 80076dc:	b510      	push	{r4, lr}
 80076de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076e6:	4291      	cmp	r1, r2
 80076e8:	d1f9      	bne.n	80076de <memcpy+0xe>
 80076ea:	bd10      	pop	{r4, pc}

080076ec <memset>:
 80076ec:	4402      	add	r2, r0
 80076ee:	4603      	mov	r3, r0
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d100      	bne.n	80076f6 <memset+0xa>
 80076f4:	4770      	bx	lr
 80076f6:	f803 1b01 	strb.w	r1, [r3], #1
 80076fa:	e7f9      	b.n	80076f0 <memset+0x4>

080076fc <siscanf>:
 80076fc:	b40e      	push	{r1, r2, r3}
 80076fe:	b510      	push	{r4, lr}
 8007700:	b09f      	sub	sp, #124	; 0x7c
 8007702:	ac21      	add	r4, sp, #132	; 0x84
 8007704:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007708:	f854 2b04 	ldr.w	r2, [r4], #4
 800770c:	9201      	str	r2, [sp, #4]
 800770e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007712:	9004      	str	r0, [sp, #16]
 8007714:	9008      	str	r0, [sp, #32]
 8007716:	f7f8 fd6b 	bl	80001f0 <strlen>
 800771a:	4b0c      	ldr	r3, [pc, #48]	; (800774c <siscanf+0x50>)
 800771c:	9005      	str	r0, [sp, #20]
 800771e:	9009      	str	r0, [sp, #36]	; 0x24
 8007720:	930d      	str	r3, [sp, #52]	; 0x34
 8007722:	480b      	ldr	r0, [pc, #44]	; (8007750 <siscanf+0x54>)
 8007724:	9a01      	ldr	r2, [sp, #4]
 8007726:	6800      	ldr	r0, [r0, #0]
 8007728:	9403      	str	r4, [sp, #12]
 800772a:	2300      	movs	r3, #0
 800772c:	9311      	str	r3, [sp, #68]	; 0x44
 800772e:	9316      	str	r3, [sp, #88]	; 0x58
 8007730:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007734:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007738:	a904      	add	r1, sp, #16
 800773a:	4623      	mov	r3, r4
 800773c:	f000 f9e2 	bl	8007b04 <__ssvfiscanf_r>
 8007740:	b01f      	add	sp, #124	; 0x7c
 8007742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007746:	b003      	add	sp, #12
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	08007755 	.word	0x08007755
 8007750:	20000010 	.word	0x20000010

08007754 <__seofread>:
 8007754:	2000      	movs	r0, #0
 8007756:	4770      	bx	lr

08007758 <_vsiprintf_r>:
 8007758:	b500      	push	{lr}
 800775a:	b09b      	sub	sp, #108	; 0x6c
 800775c:	9100      	str	r1, [sp, #0]
 800775e:	9104      	str	r1, [sp, #16]
 8007760:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007764:	9105      	str	r1, [sp, #20]
 8007766:	9102      	str	r1, [sp, #8]
 8007768:	4905      	ldr	r1, [pc, #20]	; (8007780 <_vsiprintf_r+0x28>)
 800776a:	9103      	str	r1, [sp, #12]
 800776c:	4669      	mov	r1, sp
 800776e:	f000 f86f 	bl	8007850 <_svfiprintf_r>
 8007772:	9b00      	ldr	r3, [sp, #0]
 8007774:	2200      	movs	r2, #0
 8007776:	701a      	strb	r2, [r3, #0]
 8007778:	b01b      	add	sp, #108	; 0x6c
 800777a:	f85d fb04 	ldr.w	pc, [sp], #4
 800777e:	bf00      	nop
 8007780:	ffff0208 	.word	0xffff0208

08007784 <vsiprintf>:
 8007784:	4613      	mov	r3, r2
 8007786:	460a      	mov	r2, r1
 8007788:	4601      	mov	r1, r0
 800778a:	4802      	ldr	r0, [pc, #8]	; (8007794 <vsiprintf+0x10>)
 800778c:	6800      	ldr	r0, [r0, #0]
 800778e:	f7ff bfe3 	b.w	8007758 <_vsiprintf_r>
 8007792:	bf00      	nop
 8007794:	20000010 	.word	0x20000010

08007798 <__ssputs_r>:
 8007798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800779c:	688e      	ldr	r6, [r1, #8]
 800779e:	429e      	cmp	r6, r3
 80077a0:	4682      	mov	sl, r0
 80077a2:	460c      	mov	r4, r1
 80077a4:	4690      	mov	r8, r2
 80077a6:	461f      	mov	r7, r3
 80077a8:	d838      	bhi.n	800781c <__ssputs_r+0x84>
 80077aa:	898a      	ldrh	r2, [r1, #12]
 80077ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077b0:	d032      	beq.n	8007818 <__ssputs_r+0x80>
 80077b2:	6825      	ldr	r5, [r4, #0]
 80077b4:	6909      	ldr	r1, [r1, #16]
 80077b6:	eba5 0901 	sub.w	r9, r5, r1
 80077ba:	6965      	ldr	r5, [r4, #20]
 80077bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077c4:	3301      	adds	r3, #1
 80077c6:	444b      	add	r3, r9
 80077c8:	106d      	asrs	r5, r5, #1
 80077ca:	429d      	cmp	r5, r3
 80077cc:	bf38      	it	cc
 80077ce:	461d      	movcc	r5, r3
 80077d0:	0553      	lsls	r3, r2, #21
 80077d2:	d531      	bpl.n	8007838 <__ssputs_r+0xa0>
 80077d4:	4629      	mov	r1, r5
 80077d6:	f000 ffe5 	bl	80087a4 <_malloc_r>
 80077da:	4606      	mov	r6, r0
 80077dc:	b950      	cbnz	r0, 80077f4 <__ssputs_r+0x5c>
 80077de:	230c      	movs	r3, #12
 80077e0:	f8ca 3000 	str.w	r3, [sl]
 80077e4:	89a3      	ldrh	r3, [r4, #12]
 80077e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ea:	81a3      	strh	r3, [r4, #12]
 80077ec:	f04f 30ff 	mov.w	r0, #4294967295
 80077f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077f4:	6921      	ldr	r1, [r4, #16]
 80077f6:	464a      	mov	r2, r9
 80077f8:	f7ff ff6a 	bl	80076d0 <memcpy>
 80077fc:	89a3      	ldrh	r3, [r4, #12]
 80077fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007806:	81a3      	strh	r3, [r4, #12]
 8007808:	6126      	str	r6, [r4, #16]
 800780a:	6165      	str	r5, [r4, #20]
 800780c:	444e      	add	r6, r9
 800780e:	eba5 0509 	sub.w	r5, r5, r9
 8007812:	6026      	str	r6, [r4, #0]
 8007814:	60a5      	str	r5, [r4, #8]
 8007816:	463e      	mov	r6, r7
 8007818:	42be      	cmp	r6, r7
 800781a:	d900      	bls.n	800781e <__ssputs_r+0x86>
 800781c:	463e      	mov	r6, r7
 800781e:	6820      	ldr	r0, [r4, #0]
 8007820:	4632      	mov	r2, r6
 8007822:	4641      	mov	r1, r8
 8007824:	f000 ff38 	bl	8008698 <memmove>
 8007828:	68a3      	ldr	r3, [r4, #8]
 800782a:	1b9b      	subs	r3, r3, r6
 800782c:	60a3      	str	r3, [r4, #8]
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	4433      	add	r3, r6
 8007832:	6023      	str	r3, [r4, #0]
 8007834:	2000      	movs	r0, #0
 8007836:	e7db      	b.n	80077f0 <__ssputs_r+0x58>
 8007838:	462a      	mov	r2, r5
 800783a:	f001 f827 	bl	800888c <_realloc_r>
 800783e:	4606      	mov	r6, r0
 8007840:	2800      	cmp	r0, #0
 8007842:	d1e1      	bne.n	8007808 <__ssputs_r+0x70>
 8007844:	6921      	ldr	r1, [r4, #16]
 8007846:	4650      	mov	r0, sl
 8007848:	f000 ff40 	bl	80086cc <_free_r>
 800784c:	e7c7      	b.n	80077de <__ssputs_r+0x46>
	...

08007850 <_svfiprintf_r>:
 8007850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007854:	4698      	mov	r8, r3
 8007856:	898b      	ldrh	r3, [r1, #12]
 8007858:	061b      	lsls	r3, r3, #24
 800785a:	b09d      	sub	sp, #116	; 0x74
 800785c:	4607      	mov	r7, r0
 800785e:	460d      	mov	r5, r1
 8007860:	4614      	mov	r4, r2
 8007862:	d50e      	bpl.n	8007882 <_svfiprintf_r+0x32>
 8007864:	690b      	ldr	r3, [r1, #16]
 8007866:	b963      	cbnz	r3, 8007882 <_svfiprintf_r+0x32>
 8007868:	2140      	movs	r1, #64	; 0x40
 800786a:	f000 ff9b 	bl	80087a4 <_malloc_r>
 800786e:	6028      	str	r0, [r5, #0]
 8007870:	6128      	str	r0, [r5, #16]
 8007872:	b920      	cbnz	r0, 800787e <_svfiprintf_r+0x2e>
 8007874:	230c      	movs	r3, #12
 8007876:	603b      	str	r3, [r7, #0]
 8007878:	f04f 30ff 	mov.w	r0, #4294967295
 800787c:	e0d1      	b.n	8007a22 <_svfiprintf_r+0x1d2>
 800787e:	2340      	movs	r3, #64	; 0x40
 8007880:	616b      	str	r3, [r5, #20]
 8007882:	2300      	movs	r3, #0
 8007884:	9309      	str	r3, [sp, #36]	; 0x24
 8007886:	2320      	movs	r3, #32
 8007888:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800788c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007890:	2330      	movs	r3, #48	; 0x30
 8007892:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a3c <_svfiprintf_r+0x1ec>
 8007896:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800789a:	f04f 0901 	mov.w	r9, #1
 800789e:	4623      	mov	r3, r4
 80078a0:	469a      	mov	sl, r3
 80078a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078a6:	b10a      	cbz	r2, 80078ac <_svfiprintf_r+0x5c>
 80078a8:	2a25      	cmp	r2, #37	; 0x25
 80078aa:	d1f9      	bne.n	80078a0 <_svfiprintf_r+0x50>
 80078ac:	ebba 0b04 	subs.w	fp, sl, r4
 80078b0:	d00b      	beq.n	80078ca <_svfiprintf_r+0x7a>
 80078b2:	465b      	mov	r3, fp
 80078b4:	4622      	mov	r2, r4
 80078b6:	4629      	mov	r1, r5
 80078b8:	4638      	mov	r0, r7
 80078ba:	f7ff ff6d 	bl	8007798 <__ssputs_r>
 80078be:	3001      	adds	r0, #1
 80078c0:	f000 80aa 	beq.w	8007a18 <_svfiprintf_r+0x1c8>
 80078c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078c6:	445a      	add	r2, fp
 80078c8:	9209      	str	r2, [sp, #36]	; 0x24
 80078ca:	f89a 3000 	ldrb.w	r3, [sl]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f000 80a2 	beq.w	8007a18 <_svfiprintf_r+0x1c8>
 80078d4:	2300      	movs	r3, #0
 80078d6:	f04f 32ff 	mov.w	r2, #4294967295
 80078da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078de:	f10a 0a01 	add.w	sl, sl, #1
 80078e2:	9304      	str	r3, [sp, #16]
 80078e4:	9307      	str	r3, [sp, #28]
 80078e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078ea:	931a      	str	r3, [sp, #104]	; 0x68
 80078ec:	4654      	mov	r4, sl
 80078ee:	2205      	movs	r2, #5
 80078f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078f4:	4851      	ldr	r0, [pc, #324]	; (8007a3c <_svfiprintf_r+0x1ec>)
 80078f6:	f7f8 fc83 	bl	8000200 <memchr>
 80078fa:	9a04      	ldr	r2, [sp, #16]
 80078fc:	b9d8      	cbnz	r0, 8007936 <_svfiprintf_r+0xe6>
 80078fe:	06d0      	lsls	r0, r2, #27
 8007900:	bf44      	itt	mi
 8007902:	2320      	movmi	r3, #32
 8007904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007908:	0711      	lsls	r1, r2, #28
 800790a:	bf44      	itt	mi
 800790c:	232b      	movmi	r3, #43	; 0x2b
 800790e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007912:	f89a 3000 	ldrb.w	r3, [sl]
 8007916:	2b2a      	cmp	r3, #42	; 0x2a
 8007918:	d015      	beq.n	8007946 <_svfiprintf_r+0xf6>
 800791a:	9a07      	ldr	r2, [sp, #28]
 800791c:	4654      	mov	r4, sl
 800791e:	2000      	movs	r0, #0
 8007920:	f04f 0c0a 	mov.w	ip, #10
 8007924:	4621      	mov	r1, r4
 8007926:	f811 3b01 	ldrb.w	r3, [r1], #1
 800792a:	3b30      	subs	r3, #48	; 0x30
 800792c:	2b09      	cmp	r3, #9
 800792e:	d94e      	bls.n	80079ce <_svfiprintf_r+0x17e>
 8007930:	b1b0      	cbz	r0, 8007960 <_svfiprintf_r+0x110>
 8007932:	9207      	str	r2, [sp, #28]
 8007934:	e014      	b.n	8007960 <_svfiprintf_r+0x110>
 8007936:	eba0 0308 	sub.w	r3, r0, r8
 800793a:	fa09 f303 	lsl.w	r3, r9, r3
 800793e:	4313      	orrs	r3, r2
 8007940:	9304      	str	r3, [sp, #16]
 8007942:	46a2      	mov	sl, r4
 8007944:	e7d2      	b.n	80078ec <_svfiprintf_r+0x9c>
 8007946:	9b03      	ldr	r3, [sp, #12]
 8007948:	1d19      	adds	r1, r3, #4
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	9103      	str	r1, [sp, #12]
 800794e:	2b00      	cmp	r3, #0
 8007950:	bfbb      	ittet	lt
 8007952:	425b      	neglt	r3, r3
 8007954:	f042 0202 	orrlt.w	r2, r2, #2
 8007958:	9307      	strge	r3, [sp, #28]
 800795a:	9307      	strlt	r3, [sp, #28]
 800795c:	bfb8      	it	lt
 800795e:	9204      	strlt	r2, [sp, #16]
 8007960:	7823      	ldrb	r3, [r4, #0]
 8007962:	2b2e      	cmp	r3, #46	; 0x2e
 8007964:	d10c      	bne.n	8007980 <_svfiprintf_r+0x130>
 8007966:	7863      	ldrb	r3, [r4, #1]
 8007968:	2b2a      	cmp	r3, #42	; 0x2a
 800796a:	d135      	bne.n	80079d8 <_svfiprintf_r+0x188>
 800796c:	9b03      	ldr	r3, [sp, #12]
 800796e:	1d1a      	adds	r2, r3, #4
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	9203      	str	r2, [sp, #12]
 8007974:	2b00      	cmp	r3, #0
 8007976:	bfb8      	it	lt
 8007978:	f04f 33ff 	movlt.w	r3, #4294967295
 800797c:	3402      	adds	r4, #2
 800797e:	9305      	str	r3, [sp, #20]
 8007980:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a4c <_svfiprintf_r+0x1fc>
 8007984:	7821      	ldrb	r1, [r4, #0]
 8007986:	2203      	movs	r2, #3
 8007988:	4650      	mov	r0, sl
 800798a:	f7f8 fc39 	bl	8000200 <memchr>
 800798e:	b140      	cbz	r0, 80079a2 <_svfiprintf_r+0x152>
 8007990:	2340      	movs	r3, #64	; 0x40
 8007992:	eba0 000a 	sub.w	r0, r0, sl
 8007996:	fa03 f000 	lsl.w	r0, r3, r0
 800799a:	9b04      	ldr	r3, [sp, #16]
 800799c:	4303      	orrs	r3, r0
 800799e:	3401      	adds	r4, #1
 80079a0:	9304      	str	r3, [sp, #16]
 80079a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079a6:	4826      	ldr	r0, [pc, #152]	; (8007a40 <_svfiprintf_r+0x1f0>)
 80079a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079ac:	2206      	movs	r2, #6
 80079ae:	f7f8 fc27 	bl	8000200 <memchr>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d038      	beq.n	8007a28 <_svfiprintf_r+0x1d8>
 80079b6:	4b23      	ldr	r3, [pc, #140]	; (8007a44 <_svfiprintf_r+0x1f4>)
 80079b8:	bb1b      	cbnz	r3, 8007a02 <_svfiprintf_r+0x1b2>
 80079ba:	9b03      	ldr	r3, [sp, #12]
 80079bc:	3307      	adds	r3, #7
 80079be:	f023 0307 	bic.w	r3, r3, #7
 80079c2:	3308      	adds	r3, #8
 80079c4:	9303      	str	r3, [sp, #12]
 80079c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c8:	4433      	add	r3, r6
 80079ca:	9309      	str	r3, [sp, #36]	; 0x24
 80079cc:	e767      	b.n	800789e <_svfiprintf_r+0x4e>
 80079ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80079d2:	460c      	mov	r4, r1
 80079d4:	2001      	movs	r0, #1
 80079d6:	e7a5      	b.n	8007924 <_svfiprintf_r+0xd4>
 80079d8:	2300      	movs	r3, #0
 80079da:	3401      	adds	r4, #1
 80079dc:	9305      	str	r3, [sp, #20]
 80079de:	4619      	mov	r1, r3
 80079e0:	f04f 0c0a 	mov.w	ip, #10
 80079e4:	4620      	mov	r0, r4
 80079e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079ea:	3a30      	subs	r2, #48	; 0x30
 80079ec:	2a09      	cmp	r2, #9
 80079ee:	d903      	bls.n	80079f8 <_svfiprintf_r+0x1a8>
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d0c5      	beq.n	8007980 <_svfiprintf_r+0x130>
 80079f4:	9105      	str	r1, [sp, #20]
 80079f6:	e7c3      	b.n	8007980 <_svfiprintf_r+0x130>
 80079f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80079fc:	4604      	mov	r4, r0
 80079fe:	2301      	movs	r3, #1
 8007a00:	e7f0      	b.n	80079e4 <_svfiprintf_r+0x194>
 8007a02:	ab03      	add	r3, sp, #12
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	462a      	mov	r2, r5
 8007a08:	4b0f      	ldr	r3, [pc, #60]	; (8007a48 <_svfiprintf_r+0x1f8>)
 8007a0a:	a904      	add	r1, sp, #16
 8007a0c:	4638      	mov	r0, r7
 8007a0e:	f3af 8000 	nop.w
 8007a12:	1c42      	adds	r2, r0, #1
 8007a14:	4606      	mov	r6, r0
 8007a16:	d1d6      	bne.n	80079c6 <_svfiprintf_r+0x176>
 8007a18:	89ab      	ldrh	r3, [r5, #12]
 8007a1a:	065b      	lsls	r3, r3, #25
 8007a1c:	f53f af2c 	bmi.w	8007878 <_svfiprintf_r+0x28>
 8007a20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a22:	b01d      	add	sp, #116	; 0x74
 8007a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a28:	ab03      	add	r3, sp, #12
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	462a      	mov	r2, r5
 8007a2e:	4b06      	ldr	r3, [pc, #24]	; (8007a48 <_svfiprintf_r+0x1f8>)
 8007a30:	a904      	add	r1, sp, #16
 8007a32:	4638      	mov	r0, r7
 8007a34:	f000 fa4c 	bl	8007ed0 <_printf_i>
 8007a38:	e7eb      	b.n	8007a12 <_svfiprintf_r+0x1c2>
 8007a3a:	bf00      	nop
 8007a3c:	08008f7c 	.word	0x08008f7c
 8007a40:	08008f86 	.word	0x08008f86
 8007a44:	00000000 	.word	0x00000000
 8007a48:	08007799 	.word	0x08007799
 8007a4c:	08008f82 	.word	0x08008f82

08007a50 <_sungetc_r>:
 8007a50:	b538      	push	{r3, r4, r5, lr}
 8007a52:	1c4b      	adds	r3, r1, #1
 8007a54:	4614      	mov	r4, r2
 8007a56:	d103      	bne.n	8007a60 <_sungetc_r+0x10>
 8007a58:	f04f 35ff 	mov.w	r5, #4294967295
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	bd38      	pop	{r3, r4, r5, pc}
 8007a60:	8993      	ldrh	r3, [r2, #12]
 8007a62:	f023 0320 	bic.w	r3, r3, #32
 8007a66:	8193      	strh	r3, [r2, #12]
 8007a68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a6a:	6852      	ldr	r2, [r2, #4]
 8007a6c:	b2cd      	uxtb	r5, r1
 8007a6e:	b18b      	cbz	r3, 8007a94 <_sungetc_r+0x44>
 8007a70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007a72:	4293      	cmp	r3, r2
 8007a74:	dd08      	ble.n	8007a88 <_sungetc_r+0x38>
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	1e5a      	subs	r2, r3, #1
 8007a7a:	6022      	str	r2, [r4, #0]
 8007a7c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007a80:	6863      	ldr	r3, [r4, #4]
 8007a82:	3301      	adds	r3, #1
 8007a84:	6063      	str	r3, [r4, #4]
 8007a86:	e7e9      	b.n	8007a5c <_sungetc_r+0xc>
 8007a88:	4621      	mov	r1, r4
 8007a8a:	f000 fdc9 	bl	8008620 <__submore>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d0f1      	beq.n	8007a76 <_sungetc_r+0x26>
 8007a92:	e7e1      	b.n	8007a58 <_sungetc_r+0x8>
 8007a94:	6921      	ldr	r1, [r4, #16]
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	b151      	cbz	r1, 8007ab0 <_sungetc_r+0x60>
 8007a9a:	4299      	cmp	r1, r3
 8007a9c:	d208      	bcs.n	8007ab0 <_sungetc_r+0x60>
 8007a9e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007aa2:	42a9      	cmp	r1, r5
 8007aa4:	d104      	bne.n	8007ab0 <_sungetc_r+0x60>
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	3201      	adds	r2, #1
 8007aaa:	6023      	str	r3, [r4, #0]
 8007aac:	6062      	str	r2, [r4, #4]
 8007aae:	e7d5      	b.n	8007a5c <_sungetc_r+0xc>
 8007ab0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007ab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ab8:	6363      	str	r3, [r4, #52]	; 0x34
 8007aba:	2303      	movs	r3, #3
 8007abc:	63a3      	str	r3, [r4, #56]	; 0x38
 8007abe:	4623      	mov	r3, r4
 8007ac0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007ac4:	6023      	str	r3, [r4, #0]
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e7dc      	b.n	8007a84 <_sungetc_r+0x34>

08007aca <__ssrefill_r>:
 8007aca:	b510      	push	{r4, lr}
 8007acc:	460c      	mov	r4, r1
 8007ace:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007ad0:	b169      	cbz	r1, 8007aee <__ssrefill_r+0x24>
 8007ad2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ad6:	4299      	cmp	r1, r3
 8007ad8:	d001      	beq.n	8007ade <__ssrefill_r+0x14>
 8007ada:	f000 fdf7 	bl	80086cc <_free_r>
 8007ade:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ae0:	6063      	str	r3, [r4, #4]
 8007ae2:	2000      	movs	r0, #0
 8007ae4:	6360      	str	r0, [r4, #52]	; 0x34
 8007ae6:	b113      	cbz	r3, 8007aee <__ssrefill_r+0x24>
 8007ae8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007aea:	6023      	str	r3, [r4, #0]
 8007aec:	bd10      	pop	{r4, pc}
 8007aee:	6923      	ldr	r3, [r4, #16]
 8007af0:	6023      	str	r3, [r4, #0]
 8007af2:	2300      	movs	r3, #0
 8007af4:	6063      	str	r3, [r4, #4]
 8007af6:	89a3      	ldrh	r3, [r4, #12]
 8007af8:	f043 0320 	orr.w	r3, r3, #32
 8007afc:	81a3      	strh	r3, [r4, #12]
 8007afe:	f04f 30ff 	mov.w	r0, #4294967295
 8007b02:	e7f3      	b.n	8007aec <__ssrefill_r+0x22>

08007b04 <__ssvfiscanf_r>:
 8007b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b08:	460c      	mov	r4, r1
 8007b0a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8007b0e:	2100      	movs	r1, #0
 8007b10:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007b14:	49a6      	ldr	r1, [pc, #664]	; (8007db0 <__ssvfiscanf_r+0x2ac>)
 8007b16:	91a0      	str	r1, [sp, #640]	; 0x280
 8007b18:	f10d 0804 	add.w	r8, sp, #4
 8007b1c:	49a5      	ldr	r1, [pc, #660]	; (8007db4 <__ssvfiscanf_r+0x2b0>)
 8007b1e:	4fa6      	ldr	r7, [pc, #664]	; (8007db8 <__ssvfiscanf_r+0x2b4>)
 8007b20:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8007dbc <__ssvfiscanf_r+0x2b8>
 8007b24:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007b28:	4606      	mov	r6, r0
 8007b2a:	91a1      	str	r1, [sp, #644]	; 0x284
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	7813      	ldrb	r3, [r2, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f000 815a 	beq.w	8007dea <__ssvfiscanf_r+0x2e6>
 8007b36:	5dd9      	ldrb	r1, [r3, r7]
 8007b38:	f011 0108 	ands.w	r1, r1, #8
 8007b3c:	f102 0501 	add.w	r5, r2, #1
 8007b40:	d019      	beq.n	8007b76 <__ssvfiscanf_r+0x72>
 8007b42:	6863      	ldr	r3, [r4, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	dd0f      	ble.n	8007b68 <__ssvfiscanf_r+0x64>
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	781a      	ldrb	r2, [r3, #0]
 8007b4c:	5cba      	ldrb	r2, [r7, r2]
 8007b4e:	0712      	lsls	r2, r2, #28
 8007b50:	d401      	bmi.n	8007b56 <__ssvfiscanf_r+0x52>
 8007b52:	462a      	mov	r2, r5
 8007b54:	e7eb      	b.n	8007b2e <__ssvfiscanf_r+0x2a>
 8007b56:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007b58:	3201      	adds	r2, #1
 8007b5a:	9245      	str	r2, [sp, #276]	; 0x114
 8007b5c:	6862      	ldr	r2, [r4, #4]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	3a01      	subs	r2, #1
 8007b62:	6062      	str	r2, [r4, #4]
 8007b64:	6023      	str	r3, [r4, #0]
 8007b66:	e7ec      	b.n	8007b42 <__ssvfiscanf_r+0x3e>
 8007b68:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007b6a:	4621      	mov	r1, r4
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	4798      	blx	r3
 8007b70:	2800      	cmp	r0, #0
 8007b72:	d0e9      	beq.n	8007b48 <__ssvfiscanf_r+0x44>
 8007b74:	e7ed      	b.n	8007b52 <__ssvfiscanf_r+0x4e>
 8007b76:	2b25      	cmp	r3, #37	; 0x25
 8007b78:	d012      	beq.n	8007ba0 <__ssvfiscanf_r+0x9c>
 8007b7a:	469a      	mov	sl, r3
 8007b7c:	6863      	ldr	r3, [r4, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f340 8091 	ble.w	8007ca6 <__ssvfiscanf_r+0x1a2>
 8007b84:	6822      	ldr	r2, [r4, #0]
 8007b86:	7813      	ldrb	r3, [r2, #0]
 8007b88:	4553      	cmp	r3, sl
 8007b8a:	f040 812e 	bne.w	8007dea <__ssvfiscanf_r+0x2e6>
 8007b8e:	6863      	ldr	r3, [r4, #4]
 8007b90:	3b01      	subs	r3, #1
 8007b92:	6063      	str	r3, [r4, #4]
 8007b94:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007b96:	3201      	adds	r2, #1
 8007b98:	3301      	adds	r3, #1
 8007b9a:	6022      	str	r2, [r4, #0]
 8007b9c:	9345      	str	r3, [sp, #276]	; 0x114
 8007b9e:	e7d8      	b.n	8007b52 <__ssvfiscanf_r+0x4e>
 8007ba0:	9141      	str	r1, [sp, #260]	; 0x104
 8007ba2:	9143      	str	r1, [sp, #268]	; 0x10c
 8007ba4:	7853      	ldrb	r3, [r2, #1]
 8007ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ba8:	bf02      	ittt	eq
 8007baa:	2310      	moveq	r3, #16
 8007bac:	1c95      	addeq	r5, r2, #2
 8007bae:	9341      	streq	r3, [sp, #260]	; 0x104
 8007bb0:	220a      	movs	r2, #10
 8007bb2:	46aa      	mov	sl, r5
 8007bb4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007bb8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007bbc:	2b09      	cmp	r3, #9
 8007bbe:	d91d      	bls.n	8007bfc <__ssvfiscanf_r+0xf8>
 8007bc0:	487e      	ldr	r0, [pc, #504]	; (8007dbc <__ssvfiscanf_r+0x2b8>)
 8007bc2:	2203      	movs	r2, #3
 8007bc4:	f7f8 fb1c 	bl	8000200 <memchr>
 8007bc8:	b140      	cbz	r0, 8007bdc <__ssvfiscanf_r+0xd8>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	eba0 0009 	sub.w	r0, r0, r9
 8007bd0:	fa03 f000 	lsl.w	r0, r3, r0
 8007bd4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007bd6:	4318      	orrs	r0, r3
 8007bd8:	9041      	str	r0, [sp, #260]	; 0x104
 8007bda:	4655      	mov	r5, sl
 8007bdc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007be0:	2b78      	cmp	r3, #120	; 0x78
 8007be2:	d806      	bhi.n	8007bf2 <__ssvfiscanf_r+0xee>
 8007be4:	2b57      	cmp	r3, #87	; 0x57
 8007be6:	d810      	bhi.n	8007c0a <__ssvfiscanf_r+0x106>
 8007be8:	2b25      	cmp	r3, #37	; 0x25
 8007bea:	d0c6      	beq.n	8007b7a <__ssvfiscanf_r+0x76>
 8007bec:	d856      	bhi.n	8007c9c <__ssvfiscanf_r+0x198>
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d064      	beq.n	8007cbc <__ssvfiscanf_r+0x1b8>
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	9347      	str	r3, [sp, #284]	; 0x11c
 8007bf6:	230a      	movs	r3, #10
 8007bf8:	9342      	str	r3, [sp, #264]	; 0x108
 8007bfa:	e071      	b.n	8007ce0 <__ssvfiscanf_r+0x1dc>
 8007bfc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007bfe:	fb02 1103 	mla	r1, r2, r3, r1
 8007c02:	3930      	subs	r1, #48	; 0x30
 8007c04:	9143      	str	r1, [sp, #268]	; 0x10c
 8007c06:	4655      	mov	r5, sl
 8007c08:	e7d3      	b.n	8007bb2 <__ssvfiscanf_r+0xae>
 8007c0a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007c0e:	2a20      	cmp	r2, #32
 8007c10:	d8ef      	bhi.n	8007bf2 <__ssvfiscanf_r+0xee>
 8007c12:	a101      	add	r1, pc, #4	; (adr r1, 8007c18 <__ssvfiscanf_r+0x114>)
 8007c14:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007c18:	08007ccb 	.word	0x08007ccb
 8007c1c:	08007bf3 	.word	0x08007bf3
 8007c20:	08007bf3 	.word	0x08007bf3
 8007c24:	08007d29 	.word	0x08007d29
 8007c28:	08007bf3 	.word	0x08007bf3
 8007c2c:	08007bf3 	.word	0x08007bf3
 8007c30:	08007bf3 	.word	0x08007bf3
 8007c34:	08007bf3 	.word	0x08007bf3
 8007c38:	08007bf3 	.word	0x08007bf3
 8007c3c:	08007bf3 	.word	0x08007bf3
 8007c40:	08007bf3 	.word	0x08007bf3
 8007c44:	08007d3f 	.word	0x08007d3f
 8007c48:	08007d15 	.word	0x08007d15
 8007c4c:	08007ca3 	.word	0x08007ca3
 8007c50:	08007ca3 	.word	0x08007ca3
 8007c54:	08007ca3 	.word	0x08007ca3
 8007c58:	08007bf3 	.word	0x08007bf3
 8007c5c:	08007d19 	.word	0x08007d19
 8007c60:	08007bf3 	.word	0x08007bf3
 8007c64:	08007bf3 	.word	0x08007bf3
 8007c68:	08007bf3 	.word	0x08007bf3
 8007c6c:	08007bf3 	.word	0x08007bf3
 8007c70:	08007d4f 	.word	0x08007d4f
 8007c74:	08007d21 	.word	0x08007d21
 8007c78:	08007cc3 	.word	0x08007cc3
 8007c7c:	08007bf3 	.word	0x08007bf3
 8007c80:	08007bf3 	.word	0x08007bf3
 8007c84:	08007d4b 	.word	0x08007d4b
 8007c88:	08007bf3 	.word	0x08007bf3
 8007c8c:	08007d15 	.word	0x08007d15
 8007c90:	08007bf3 	.word	0x08007bf3
 8007c94:	08007bf3 	.word	0x08007bf3
 8007c98:	08007ccb 	.word	0x08007ccb
 8007c9c:	3b45      	subs	r3, #69	; 0x45
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d8a7      	bhi.n	8007bf2 <__ssvfiscanf_r+0xee>
 8007ca2:	2305      	movs	r3, #5
 8007ca4:	e01b      	b.n	8007cde <__ssvfiscanf_r+0x1da>
 8007ca6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007ca8:	4621      	mov	r1, r4
 8007caa:	4630      	mov	r0, r6
 8007cac:	4798      	blx	r3
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	f43f af68 	beq.w	8007b84 <__ssvfiscanf_r+0x80>
 8007cb4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	f040 808d 	bne.w	8007dd6 <__ssvfiscanf_r+0x2d2>
 8007cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc0:	e08f      	b.n	8007de2 <__ssvfiscanf_r+0x2de>
 8007cc2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007cc4:	f042 0220 	orr.w	r2, r2, #32
 8007cc8:	9241      	str	r2, [sp, #260]	; 0x104
 8007cca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cd0:	9241      	str	r2, [sp, #260]	; 0x104
 8007cd2:	2210      	movs	r2, #16
 8007cd4:	2b6f      	cmp	r3, #111	; 0x6f
 8007cd6:	9242      	str	r2, [sp, #264]	; 0x108
 8007cd8:	bf34      	ite	cc
 8007cda:	2303      	movcc	r3, #3
 8007cdc:	2304      	movcs	r3, #4
 8007cde:	9347      	str	r3, [sp, #284]	; 0x11c
 8007ce0:	6863      	ldr	r3, [r4, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	dd42      	ble.n	8007d6c <__ssvfiscanf_r+0x268>
 8007ce6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007ce8:	0659      	lsls	r1, r3, #25
 8007cea:	d404      	bmi.n	8007cf6 <__ssvfiscanf_r+0x1f2>
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	781a      	ldrb	r2, [r3, #0]
 8007cf0:	5cba      	ldrb	r2, [r7, r2]
 8007cf2:	0712      	lsls	r2, r2, #28
 8007cf4:	d441      	bmi.n	8007d7a <__ssvfiscanf_r+0x276>
 8007cf6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	dc50      	bgt.n	8007d9e <__ssvfiscanf_r+0x29a>
 8007cfc:	466b      	mov	r3, sp
 8007cfe:	4622      	mov	r2, r4
 8007d00:	a941      	add	r1, sp, #260	; 0x104
 8007d02:	4630      	mov	r0, r6
 8007d04:	f000 fa0a 	bl	800811c <_scanf_chars>
 8007d08:	2801      	cmp	r0, #1
 8007d0a:	d06e      	beq.n	8007dea <__ssvfiscanf_r+0x2e6>
 8007d0c:	2802      	cmp	r0, #2
 8007d0e:	f47f af20 	bne.w	8007b52 <__ssvfiscanf_r+0x4e>
 8007d12:	e7cf      	b.n	8007cb4 <__ssvfiscanf_r+0x1b0>
 8007d14:	220a      	movs	r2, #10
 8007d16:	e7dd      	b.n	8007cd4 <__ssvfiscanf_r+0x1d0>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	9342      	str	r3, [sp, #264]	; 0x108
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e7de      	b.n	8007cde <__ssvfiscanf_r+0x1da>
 8007d20:	2308      	movs	r3, #8
 8007d22:	9342      	str	r3, [sp, #264]	; 0x108
 8007d24:	2304      	movs	r3, #4
 8007d26:	e7da      	b.n	8007cde <__ssvfiscanf_r+0x1da>
 8007d28:	4629      	mov	r1, r5
 8007d2a:	4640      	mov	r0, r8
 8007d2c:	f000 fb48 	bl	80083c0 <__sccl>
 8007d30:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d36:	9341      	str	r3, [sp, #260]	; 0x104
 8007d38:	4605      	mov	r5, r0
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e7cf      	b.n	8007cde <__ssvfiscanf_r+0x1da>
 8007d3e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d44:	9341      	str	r3, [sp, #260]	; 0x104
 8007d46:	2300      	movs	r3, #0
 8007d48:	e7c9      	b.n	8007cde <__ssvfiscanf_r+0x1da>
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	e7c7      	b.n	8007cde <__ssvfiscanf_r+0x1da>
 8007d4e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007d50:	06c3      	lsls	r3, r0, #27
 8007d52:	f53f aefe 	bmi.w	8007b52 <__ssvfiscanf_r+0x4e>
 8007d56:	9b00      	ldr	r3, [sp, #0]
 8007d58:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007d5a:	1d19      	adds	r1, r3, #4
 8007d5c:	9100      	str	r1, [sp, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f010 0f01 	tst.w	r0, #1
 8007d64:	bf14      	ite	ne
 8007d66:	801a      	strhne	r2, [r3, #0]
 8007d68:	601a      	streq	r2, [r3, #0]
 8007d6a:	e6f2      	b.n	8007b52 <__ssvfiscanf_r+0x4e>
 8007d6c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007d6e:	4621      	mov	r1, r4
 8007d70:	4630      	mov	r0, r6
 8007d72:	4798      	blx	r3
 8007d74:	2800      	cmp	r0, #0
 8007d76:	d0b6      	beq.n	8007ce6 <__ssvfiscanf_r+0x1e2>
 8007d78:	e79c      	b.n	8007cb4 <__ssvfiscanf_r+0x1b0>
 8007d7a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007d7c:	3201      	adds	r2, #1
 8007d7e:	9245      	str	r2, [sp, #276]	; 0x114
 8007d80:	6862      	ldr	r2, [r4, #4]
 8007d82:	3a01      	subs	r2, #1
 8007d84:	2a00      	cmp	r2, #0
 8007d86:	6062      	str	r2, [r4, #4]
 8007d88:	dd02      	ble.n	8007d90 <__ssvfiscanf_r+0x28c>
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	6023      	str	r3, [r4, #0]
 8007d8e:	e7ad      	b.n	8007cec <__ssvfiscanf_r+0x1e8>
 8007d90:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007d92:	4621      	mov	r1, r4
 8007d94:	4630      	mov	r0, r6
 8007d96:	4798      	blx	r3
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d0a7      	beq.n	8007cec <__ssvfiscanf_r+0x1e8>
 8007d9c:	e78a      	b.n	8007cb4 <__ssvfiscanf_r+0x1b0>
 8007d9e:	2b04      	cmp	r3, #4
 8007da0:	dc0e      	bgt.n	8007dc0 <__ssvfiscanf_r+0x2bc>
 8007da2:	466b      	mov	r3, sp
 8007da4:	4622      	mov	r2, r4
 8007da6:	a941      	add	r1, sp, #260	; 0x104
 8007da8:	4630      	mov	r0, r6
 8007daa:	f000 fa11 	bl	80081d0 <_scanf_i>
 8007dae:	e7ab      	b.n	8007d08 <__ssvfiscanf_r+0x204>
 8007db0:	08007a51 	.word	0x08007a51
 8007db4:	08007acb 	.word	0x08007acb
 8007db8:	08008fcb 	.word	0x08008fcb
 8007dbc:	08008f82 	.word	0x08008f82
 8007dc0:	4b0b      	ldr	r3, [pc, #44]	; (8007df0 <__ssvfiscanf_r+0x2ec>)
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f43f aec5 	beq.w	8007b52 <__ssvfiscanf_r+0x4e>
 8007dc8:	466b      	mov	r3, sp
 8007dca:	4622      	mov	r2, r4
 8007dcc:	a941      	add	r1, sp, #260	; 0x104
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f3af 8000 	nop.w
 8007dd4:	e798      	b.n	8007d08 <__ssvfiscanf_r+0x204>
 8007dd6:	89a3      	ldrh	r3, [r4, #12]
 8007dd8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007ddc:	bf18      	it	ne
 8007dde:	f04f 30ff 	movne.w	r0, #4294967295
 8007de2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dea:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007dec:	e7f9      	b.n	8007de2 <__ssvfiscanf_r+0x2de>
 8007dee:	bf00      	nop
 8007df0:	00000000 	.word	0x00000000

08007df4 <_printf_common>:
 8007df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007df8:	4616      	mov	r6, r2
 8007dfa:	4699      	mov	r9, r3
 8007dfc:	688a      	ldr	r2, [r1, #8]
 8007dfe:	690b      	ldr	r3, [r1, #16]
 8007e00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e04:	4293      	cmp	r3, r2
 8007e06:	bfb8      	it	lt
 8007e08:	4613      	movlt	r3, r2
 8007e0a:	6033      	str	r3, [r6, #0]
 8007e0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e10:	4607      	mov	r7, r0
 8007e12:	460c      	mov	r4, r1
 8007e14:	b10a      	cbz	r2, 8007e1a <_printf_common+0x26>
 8007e16:	3301      	adds	r3, #1
 8007e18:	6033      	str	r3, [r6, #0]
 8007e1a:	6823      	ldr	r3, [r4, #0]
 8007e1c:	0699      	lsls	r1, r3, #26
 8007e1e:	bf42      	ittt	mi
 8007e20:	6833      	ldrmi	r3, [r6, #0]
 8007e22:	3302      	addmi	r3, #2
 8007e24:	6033      	strmi	r3, [r6, #0]
 8007e26:	6825      	ldr	r5, [r4, #0]
 8007e28:	f015 0506 	ands.w	r5, r5, #6
 8007e2c:	d106      	bne.n	8007e3c <_printf_common+0x48>
 8007e2e:	f104 0a19 	add.w	sl, r4, #25
 8007e32:	68e3      	ldr	r3, [r4, #12]
 8007e34:	6832      	ldr	r2, [r6, #0]
 8007e36:	1a9b      	subs	r3, r3, r2
 8007e38:	42ab      	cmp	r3, r5
 8007e3a:	dc26      	bgt.n	8007e8a <_printf_common+0x96>
 8007e3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e40:	1e13      	subs	r3, r2, #0
 8007e42:	6822      	ldr	r2, [r4, #0]
 8007e44:	bf18      	it	ne
 8007e46:	2301      	movne	r3, #1
 8007e48:	0692      	lsls	r2, r2, #26
 8007e4a:	d42b      	bmi.n	8007ea4 <_printf_common+0xb0>
 8007e4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e50:	4649      	mov	r1, r9
 8007e52:	4638      	mov	r0, r7
 8007e54:	47c0      	blx	r8
 8007e56:	3001      	adds	r0, #1
 8007e58:	d01e      	beq.n	8007e98 <_printf_common+0xa4>
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	68e5      	ldr	r5, [r4, #12]
 8007e5e:	6832      	ldr	r2, [r6, #0]
 8007e60:	f003 0306 	and.w	r3, r3, #6
 8007e64:	2b04      	cmp	r3, #4
 8007e66:	bf08      	it	eq
 8007e68:	1aad      	subeq	r5, r5, r2
 8007e6a:	68a3      	ldr	r3, [r4, #8]
 8007e6c:	6922      	ldr	r2, [r4, #16]
 8007e6e:	bf0c      	ite	eq
 8007e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e74:	2500      	movne	r5, #0
 8007e76:	4293      	cmp	r3, r2
 8007e78:	bfc4      	itt	gt
 8007e7a:	1a9b      	subgt	r3, r3, r2
 8007e7c:	18ed      	addgt	r5, r5, r3
 8007e7e:	2600      	movs	r6, #0
 8007e80:	341a      	adds	r4, #26
 8007e82:	42b5      	cmp	r5, r6
 8007e84:	d11a      	bne.n	8007ebc <_printf_common+0xc8>
 8007e86:	2000      	movs	r0, #0
 8007e88:	e008      	b.n	8007e9c <_printf_common+0xa8>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	4652      	mov	r2, sl
 8007e8e:	4649      	mov	r1, r9
 8007e90:	4638      	mov	r0, r7
 8007e92:	47c0      	blx	r8
 8007e94:	3001      	adds	r0, #1
 8007e96:	d103      	bne.n	8007ea0 <_printf_common+0xac>
 8007e98:	f04f 30ff 	mov.w	r0, #4294967295
 8007e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ea0:	3501      	adds	r5, #1
 8007ea2:	e7c6      	b.n	8007e32 <_printf_common+0x3e>
 8007ea4:	18e1      	adds	r1, r4, r3
 8007ea6:	1c5a      	adds	r2, r3, #1
 8007ea8:	2030      	movs	r0, #48	; 0x30
 8007eaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007eae:	4422      	add	r2, r4
 8007eb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007eb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007eb8:	3302      	adds	r3, #2
 8007eba:	e7c7      	b.n	8007e4c <_printf_common+0x58>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	4622      	mov	r2, r4
 8007ec0:	4649      	mov	r1, r9
 8007ec2:	4638      	mov	r0, r7
 8007ec4:	47c0      	blx	r8
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	d0e6      	beq.n	8007e98 <_printf_common+0xa4>
 8007eca:	3601      	adds	r6, #1
 8007ecc:	e7d9      	b.n	8007e82 <_printf_common+0x8e>
	...

08007ed0 <_printf_i>:
 8007ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed4:	7e0f      	ldrb	r7, [r1, #24]
 8007ed6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ed8:	2f78      	cmp	r7, #120	; 0x78
 8007eda:	4691      	mov	r9, r2
 8007edc:	4680      	mov	r8, r0
 8007ede:	460c      	mov	r4, r1
 8007ee0:	469a      	mov	sl, r3
 8007ee2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ee6:	d807      	bhi.n	8007ef8 <_printf_i+0x28>
 8007ee8:	2f62      	cmp	r7, #98	; 0x62
 8007eea:	d80a      	bhi.n	8007f02 <_printf_i+0x32>
 8007eec:	2f00      	cmp	r7, #0
 8007eee:	f000 80d8 	beq.w	80080a2 <_printf_i+0x1d2>
 8007ef2:	2f58      	cmp	r7, #88	; 0x58
 8007ef4:	f000 80a3 	beq.w	800803e <_printf_i+0x16e>
 8007ef8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007efc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f00:	e03a      	b.n	8007f78 <_printf_i+0xa8>
 8007f02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f06:	2b15      	cmp	r3, #21
 8007f08:	d8f6      	bhi.n	8007ef8 <_printf_i+0x28>
 8007f0a:	a101      	add	r1, pc, #4	; (adr r1, 8007f10 <_printf_i+0x40>)
 8007f0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f10:	08007f69 	.word	0x08007f69
 8007f14:	08007f7d 	.word	0x08007f7d
 8007f18:	08007ef9 	.word	0x08007ef9
 8007f1c:	08007ef9 	.word	0x08007ef9
 8007f20:	08007ef9 	.word	0x08007ef9
 8007f24:	08007ef9 	.word	0x08007ef9
 8007f28:	08007f7d 	.word	0x08007f7d
 8007f2c:	08007ef9 	.word	0x08007ef9
 8007f30:	08007ef9 	.word	0x08007ef9
 8007f34:	08007ef9 	.word	0x08007ef9
 8007f38:	08007ef9 	.word	0x08007ef9
 8007f3c:	08008089 	.word	0x08008089
 8007f40:	08007fad 	.word	0x08007fad
 8007f44:	0800806b 	.word	0x0800806b
 8007f48:	08007ef9 	.word	0x08007ef9
 8007f4c:	08007ef9 	.word	0x08007ef9
 8007f50:	080080ab 	.word	0x080080ab
 8007f54:	08007ef9 	.word	0x08007ef9
 8007f58:	08007fad 	.word	0x08007fad
 8007f5c:	08007ef9 	.word	0x08007ef9
 8007f60:	08007ef9 	.word	0x08007ef9
 8007f64:	08008073 	.word	0x08008073
 8007f68:	682b      	ldr	r3, [r5, #0]
 8007f6a:	1d1a      	adds	r2, r3, #4
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	602a      	str	r2, [r5, #0]
 8007f70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e0a3      	b.n	80080c4 <_printf_i+0x1f4>
 8007f7c:	6820      	ldr	r0, [r4, #0]
 8007f7e:	6829      	ldr	r1, [r5, #0]
 8007f80:	0606      	lsls	r6, r0, #24
 8007f82:	f101 0304 	add.w	r3, r1, #4
 8007f86:	d50a      	bpl.n	8007f9e <_printf_i+0xce>
 8007f88:	680e      	ldr	r6, [r1, #0]
 8007f8a:	602b      	str	r3, [r5, #0]
 8007f8c:	2e00      	cmp	r6, #0
 8007f8e:	da03      	bge.n	8007f98 <_printf_i+0xc8>
 8007f90:	232d      	movs	r3, #45	; 0x2d
 8007f92:	4276      	negs	r6, r6
 8007f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f98:	485e      	ldr	r0, [pc, #376]	; (8008114 <_printf_i+0x244>)
 8007f9a:	230a      	movs	r3, #10
 8007f9c:	e019      	b.n	8007fd2 <_printf_i+0x102>
 8007f9e:	680e      	ldr	r6, [r1, #0]
 8007fa0:	602b      	str	r3, [r5, #0]
 8007fa2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007fa6:	bf18      	it	ne
 8007fa8:	b236      	sxthne	r6, r6
 8007faa:	e7ef      	b.n	8007f8c <_printf_i+0xbc>
 8007fac:	682b      	ldr	r3, [r5, #0]
 8007fae:	6820      	ldr	r0, [r4, #0]
 8007fb0:	1d19      	adds	r1, r3, #4
 8007fb2:	6029      	str	r1, [r5, #0]
 8007fb4:	0601      	lsls	r1, r0, #24
 8007fb6:	d501      	bpl.n	8007fbc <_printf_i+0xec>
 8007fb8:	681e      	ldr	r6, [r3, #0]
 8007fba:	e002      	b.n	8007fc2 <_printf_i+0xf2>
 8007fbc:	0646      	lsls	r6, r0, #25
 8007fbe:	d5fb      	bpl.n	8007fb8 <_printf_i+0xe8>
 8007fc0:	881e      	ldrh	r6, [r3, #0]
 8007fc2:	4854      	ldr	r0, [pc, #336]	; (8008114 <_printf_i+0x244>)
 8007fc4:	2f6f      	cmp	r7, #111	; 0x6f
 8007fc6:	bf0c      	ite	eq
 8007fc8:	2308      	moveq	r3, #8
 8007fca:	230a      	movne	r3, #10
 8007fcc:	2100      	movs	r1, #0
 8007fce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fd2:	6865      	ldr	r5, [r4, #4]
 8007fd4:	60a5      	str	r5, [r4, #8]
 8007fd6:	2d00      	cmp	r5, #0
 8007fd8:	bfa2      	ittt	ge
 8007fda:	6821      	ldrge	r1, [r4, #0]
 8007fdc:	f021 0104 	bicge.w	r1, r1, #4
 8007fe0:	6021      	strge	r1, [r4, #0]
 8007fe2:	b90e      	cbnz	r6, 8007fe8 <_printf_i+0x118>
 8007fe4:	2d00      	cmp	r5, #0
 8007fe6:	d04d      	beq.n	8008084 <_printf_i+0x1b4>
 8007fe8:	4615      	mov	r5, r2
 8007fea:	fbb6 f1f3 	udiv	r1, r6, r3
 8007fee:	fb03 6711 	mls	r7, r3, r1, r6
 8007ff2:	5dc7      	ldrb	r7, [r0, r7]
 8007ff4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ff8:	4637      	mov	r7, r6
 8007ffa:	42bb      	cmp	r3, r7
 8007ffc:	460e      	mov	r6, r1
 8007ffe:	d9f4      	bls.n	8007fea <_printf_i+0x11a>
 8008000:	2b08      	cmp	r3, #8
 8008002:	d10b      	bne.n	800801c <_printf_i+0x14c>
 8008004:	6823      	ldr	r3, [r4, #0]
 8008006:	07de      	lsls	r6, r3, #31
 8008008:	d508      	bpl.n	800801c <_printf_i+0x14c>
 800800a:	6923      	ldr	r3, [r4, #16]
 800800c:	6861      	ldr	r1, [r4, #4]
 800800e:	4299      	cmp	r1, r3
 8008010:	bfde      	ittt	le
 8008012:	2330      	movle	r3, #48	; 0x30
 8008014:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008018:	f105 35ff 	addle.w	r5, r5, #4294967295
 800801c:	1b52      	subs	r2, r2, r5
 800801e:	6122      	str	r2, [r4, #16]
 8008020:	f8cd a000 	str.w	sl, [sp]
 8008024:	464b      	mov	r3, r9
 8008026:	aa03      	add	r2, sp, #12
 8008028:	4621      	mov	r1, r4
 800802a:	4640      	mov	r0, r8
 800802c:	f7ff fee2 	bl	8007df4 <_printf_common>
 8008030:	3001      	adds	r0, #1
 8008032:	d14c      	bne.n	80080ce <_printf_i+0x1fe>
 8008034:	f04f 30ff 	mov.w	r0, #4294967295
 8008038:	b004      	add	sp, #16
 800803a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800803e:	4835      	ldr	r0, [pc, #212]	; (8008114 <_printf_i+0x244>)
 8008040:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008044:	6829      	ldr	r1, [r5, #0]
 8008046:	6823      	ldr	r3, [r4, #0]
 8008048:	f851 6b04 	ldr.w	r6, [r1], #4
 800804c:	6029      	str	r1, [r5, #0]
 800804e:	061d      	lsls	r5, r3, #24
 8008050:	d514      	bpl.n	800807c <_printf_i+0x1ac>
 8008052:	07df      	lsls	r7, r3, #31
 8008054:	bf44      	itt	mi
 8008056:	f043 0320 	orrmi.w	r3, r3, #32
 800805a:	6023      	strmi	r3, [r4, #0]
 800805c:	b91e      	cbnz	r6, 8008066 <_printf_i+0x196>
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	f023 0320 	bic.w	r3, r3, #32
 8008064:	6023      	str	r3, [r4, #0]
 8008066:	2310      	movs	r3, #16
 8008068:	e7b0      	b.n	8007fcc <_printf_i+0xfc>
 800806a:	6823      	ldr	r3, [r4, #0]
 800806c:	f043 0320 	orr.w	r3, r3, #32
 8008070:	6023      	str	r3, [r4, #0]
 8008072:	2378      	movs	r3, #120	; 0x78
 8008074:	4828      	ldr	r0, [pc, #160]	; (8008118 <_printf_i+0x248>)
 8008076:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800807a:	e7e3      	b.n	8008044 <_printf_i+0x174>
 800807c:	0659      	lsls	r1, r3, #25
 800807e:	bf48      	it	mi
 8008080:	b2b6      	uxthmi	r6, r6
 8008082:	e7e6      	b.n	8008052 <_printf_i+0x182>
 8008084:	4615      	mov	r5, r2
 8008086:	e7bb      	b.n	8008000 <_printf_i+0x130>
 8008088:	682b      	ldr	r3, [r5, #0]
 800808a:	6826      	ldr	r6, [r4, #0]
 800808c:	6961      	ldr	r1, [r4, #20]
 800808e:	1d18      	adds	r0, r3, #4
 8008090:	6028      	str	r0, [r5, #0]
 8008092:	0635      	lsls	r5, r6, #24
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	d501      	bpl.n	800809c <_printf_i+0x1cc>
 8008098:	6019      	str	r1, [r3, #0]
 800809a:	e002      	b.n	80080a2 <_printf_i+0x1d2>
 800809c:	0670      	lsls	r0, r6, #25
 800809e:	d5fb      	bpl.n	8008098 <_printf_i+0x1c8>
 80080a0:	8019      	strh	r1, [r3, #0]
 80080a2:	2300      	movs	r3, #0
 80080a4:	6123      	str	r3, [r4, #16]
 80080a6:	4615      	mov	r5, r2
 80080a8:	e7ba      	b.n	8008020 <_printf_i+0x150>
 80080aa:	682b      	ldr	r3, [r5, #0]
 80080ac:	1d1a      	adds	r2, r3, #4
 80080ae:	602a      	str	r2, [r5, #0]
 80080b0:	681d      	ldr	r5, [r3, #0]
 80080b2:	6862      	ldr	r2, [r4, #4]
 80080b4:	2100      	movs	r1, #0
 80080b6:	4628      	mov	r0, r5
 80080b8:	f7f8 f8a2 	bl	8000200 <memchr>
 80080bc:	b108      	cbz	r0, 80080c2 <_printf_i+0x1f2>
 80080be:	1b40      	subs	r0, r0, r5
 80080c0:	6060      	str	r0, [r4, #4]
 80080c2:	6863      	ldr	r3, [r4, #4]
 80080c4:	6123      	str	r3, [r4, #16]
 80080c6:	2300      	movs	r3, #0
 80080c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080cc:	e7a8      	b.n	8008020 <_printf_i+0x150>
 80080ce:	6923      	ldr	r3, [r4, #16]
 80080d0:	462a      	mov	r2, r5
 80080d2:	4649      	mov	r1, r9
 80080d4:	4640      	mov	r0, r8
 80080d6:	47d0      	blx	sl
 80080d8:	3001      	adds	r0, #1
 80080da:	d0ab      	beq.n	8008034 <_printf_i+0x164>
 80080dc:	6823      	ldr	r3, [r4, #0]
 80080de:	079b      	lsls	r3, r3, #30
 80080e0:	d413      	bmi.n	800810a <_printf_i+0x23a>
 80080e2:	68e0      	ldr	r0, [r4, #12]
 80080e4:	9b03      	ldr	r3, [sp, #12]
 80080e6:	4298      	cmp	r0, r3
 80080e8:	bfb8      	it	lt
 80080ea:	4618      	movlt	r0, r3
 80080ec:	e7a4      	b.n	8008038 <_printf_i+0x168>
 80080ee:	2301      	movs	r3, #1
 80080f0:	4632      	mov	r2, r6
 80080f2:	4649      	mov	r1, r9
 80080f4:	4640      	mov	r0, r8
 80080f6:	47d0      	blx	sl
 80080f8:	3001      	adds	r0, #1
 80080fa:	d09b      	beq.n	8008034 <_printf_i+0x164>
 80080fc:	3501      	adds	r5, #1
 80080fe:	68e3      	ldr	r3, [r4, #12]
 8008100:	9903      	ldr	r1, [sp, #12]
 8008102:	1a5b      	subs	r3, r3, r1
 8008104:	42ab      	cmp	r3, r5
 8008106:	dcf2      	bgt.n	80080ee <_printf_i+0x21e>
 8008108:	e7eb      	b.n	80080e2 <_printf_i+0x212>
 800810a:	2500      	movs	r5, #0
 800810c:	f104 0619 	add.w	r6, r4, #25
 8008110:	e7f5      	b.n	80080fe <_printf_i+0x22e>
 8008112:	bf00      	nop
 8008114:	08008f8d 	.word	0x08008f8d
 8008118:	08008f9e 	.word	0x08008f9e

0800811c <_scanf_chars>:
 800811c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008120:	4615      	mov	r5, r2
 8008122:	688a      	ldr	r2, [r1, #8]
 8008124:	4680      	mov	r8, r0
 8008126:	460c      	mov	r4, r1
 8008128:	b932      	cbnz	r2, 8008138 <_scanf_chars+0x1c>
 800812a:	698a      	ldr	r2, [r1, #24]
 800812c:	2a00      	cmp	r2, #0
 800812e:	bf0c      	ite	eq
 8008130:	2201      	moveq	r2, #1
 8008132:	f04f 32ff 	movne.w	r2, #4294967295
 8008136:	608a      	str	r2, [r1, #8]
 8008138:	6822      	ldr	r2, [r4, #0]
 800813a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80081cc <_scanf_chars+0xb0>
 800813e:	06d1      	lsls	r1, r2, #27
 8008140:	bf5f      	itttt	pl
 8008142:	681a      	ldrpl	r2, [r3, #0]
 8008144:	1d11      	addpl	r1, r2, #4
 8008146:	6019      	strpl	r1, [r3, #0]
 8008148:	6816      	ldrpl	r6, [r2, #0]
 800814a:	2700      	movs	r7, #0
 800814c:	69a0      	ldr	r0, [r4, #24]
 800814e:	b188      	cbz	r0, 8008174 <_scanf_chars+0x58>
 8008150:	2801      	cmp	r0, #1
 8008152:	d107      	bne.n	8008164 <_scanf_chars+0x48>
 8008154:	682a      	ldr	r2, [r5, #0]
 8008156:	7811      	ldrb	r1, [r2, #0]
 8008158:	6962      	ldr	r2, [r4, #20]
 800815a:	5c52      	ldrb	r2, [r2, r1]
 800815c:	b952      	cbnz	r2, 8008174 <_scanf_chars+0x58>
 800815e:	2f00      	cmp	r7, #0
 8008160:	d031      	beq.n	80081c6 <_scanf_chars+0xaa>
 8008162:	e022      	b.n	80081aa <_scanf_chars+0x8e>
 8008164:	2802      	cmp	r0, #2
 8008166:	d120      	bne.n	80081aa <_scanf_chars+0x8e>
 8008168:	682b      	ldr	r3, [r5, #0]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008170:	071b      	lsls	r3, r3, #28
 8008172:	d41a      	bmi.n	80081aa <_scanf_chars+0x8e>
 8008174:	6823      	ldr	r3, [r4, #0]
 8008176:	06da      	lsls	r2, r3, #27
 8008178:	bf5e      	ittt	pl
 800817a:	682b      	ldrpl	r3, [r5, #0]
 800817c:	781b      	ldrbpl	r3, [r3, #0]
 800817e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008182:	682a      	ldr	r2, [r5, #0]
 8008184:	686b      	ldr	r3, [r5, #4]
 8008186:	3201      	adds	r2, #1
 8008188:	602a      	str	r2, [r5, #0]
 800818a:	68a2      	ldr	r2, [r4, #8]
 800818c:	3b01      	subs	r3, #1
 800818e:	3a01      	subs	r2, #1
 8008190:	606b      	str	r3, [r5, #4]
 8008192:	3701      	adds	r7, #1
 8008194:	60a2      	str	r2, [r4, #8]
 8008196:	b142      	cbz	r2, 80081aa <_scanf_chars+0x8e>
 8008198:	2b00      	cmp	r3, #0
 800819a:	dcd7      	bgt.n	800814c <_scanf_chars+0x30>
 800819c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80081a0:	4629      	mov	r1, r5
 80081a2:	4640      	mov	r0, r8
 80081a4:	4798      	blx	r3
 80081a6:	2800      	cmp	r0, #0
 80081a8:	d0d0      	beq.n	800814c <_scanf_chars+0x30>
 80081aa:	6823      	ldr	r3, [r4, #0]
 80081ac:	f013 0310 	ands.w	r3, r3, #16
 80081b0:	d105      	bne.n	80081be <_scanf_chars+0xa2>
 80081b2:	68e2      	ldr	r2, [r4, #12]
 80081b4:	3201      	adds	r2, #1
 80081b6:	60e2      	str	r2, [r4, #12]
 80081b8:	69a2      	ldr	r2, [r4, #24]
 80081ba:	b102      	cbz	r2, 80081be <_scanf_chars+0xa2>
 80081bc:	7033      	strb	r3, [r6, #0]
 80081be:	6923      	ldr	r3, [r4, #16]
 80081c0:	443b      	add	r3, r7
 80081c2:	6123      	str	r3, [r4, #16]
 80081c4:	2000      	movs	r0, #0
 80081c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081ca:	bf00      	nop
 80081cc:	08008fcb 	.word	0x08008fcb

080081d0 <_scanf_i>:
 80081d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d4:	4698      	mov	r8, r3
 80081d6:	4b76      	ldr	r3, [pc, #472]	; (80083b0 <_scanf_i+0x1e0>)
 80081d8:	460c      	mov	r4, r1
 80081da:	4682      	mov	sl, r0
 80081dc:	4616      	mov	r6, r2
 80081de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80081e2:	b087      	sub	sp, #28
 80081e4:	ab03      	add	r3, sp, #12
 80081e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80081ea:	4b72      	ldr	r3, [pc, #456]	; (80083b4 <_scanf_i+0x1e4>)
 80081ec:	69a1      	ldr	r1, [r4, #24]
 80081ee:	4a72      	ldr	r2, [pc, #456]	; (80083b8 <_scanf_i+0x1e8>)
 80081f0:	2903      	cmp	r1, #3
 80081f2:	bf18      	it	ne
 80081f4:	461a      	movne	r2, r3
 80081f6:	68a3      	ldr	r3, [r4, #8]
 80081f8:	9201      	str	r2, [sp, #4]
 80081fa:	1e5a      	subs	r2, r3, #1
 80081fc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008200:	bf88      	it	hi
 8008202:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008206:	4627      	mov	r7, r4
 8008208:	bf82      	ittt	hi
 800820a:	eb03 0905 	addhi.w	r9, r3, r5
 800820e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008212:	60a3      	strhi	r3, [r4, #8]
 8008214:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008218:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800821c:	bf98      	it	ls
 800821e:	f04f 0900 	movls.w	r9, #0
 8008222:	6023      	str	r3, [r4, #0]
 8008224:	463d      	mov	r5, r7
 8008226:	f04f 0b00 	mov.w	fp, #0
 800822a:	6831      	ldr	r1, [r6, #0]
 800822c:	ab03      	add	r3, sp, #12
 800822e:	7809      	ldrb	r1, [r1, #0]
 8008230:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008234:	2202      	movs	r2, #2
 8008236:	f7f7 ffe3 	bl	8000200 <memchr>
 800823a:	b328      	cbz	r0, 8008288 <_scanf_i+0xb8>
 800823c:	f1bb 0f01 	cmp.w	fp, #1
 8008240:	d159      	bne.n	80082f6 <_scanf_i+0x126>
 8008242:	6862      	ldr	r2, [r4, #4]
 8008244:	b92a      	cbnz	r2, 8008252 <_scanf_i+0x82>
 8008246:	6822      	ldr	r2, [r4, #0]
 8008248:	2308      	movs	r3, #8
 800824a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800824e:	6063      	str	r3, [r4, #4]
 8008250:	6022      	str	r2, [r4, #0]
 8008252:	6822      	ldr	r2, [r4, #0]
 8008254:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008258:	6022      	str	r2, [r4, #0]
 800825a:	68a2      	ldr	r2, [r4, #8]
 800825c:	1e51      	subs	r1, r2, #1
 800825e:	60a1      	str	r1, [r4, #8]
 8008260:	b192      	cbz	r2, 8008288 <_scanf_i+0xb8>
 8008262:	6832      	ldr	r2, [r6, #0]
 8008264:	1c51      	adds	r1, r2, #1
 8008266:	6031      	str	r1, [r6, #0]
 8008268:	7812      	ldrb	r2, [r2, #0]
 800826a:	f805 2b01 	strb.w	r2, [r5], #1
 800826e:	6872      	ldr	r2, [r6, #4]
 8008270:	3a01      	subs	r2, #1
 8008272:	2a00      	cmp	r2, #0
 8008274:	6072      	str	r2, [r6, #4]
 8008276:	dc07      	bgt.n	8008288 <_scanf_i+0xb8>
 8008278:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800827c:	4631      	mov	r1, r6
 800827e:	4650      	mov	r0, sl
 8008280:	4790      	blx	r2
 8008282:	2800      	cmp	r0, #0
 8008284:	f040 8085 	bne.w	8008392 <_scanf_i+0x1c2>
 8008288:	f10b 0b01 	add.w	fp, fp, #1
 800828c:	f1bb 0f03 	cmp.w	fp, #3
 8008290:	d1cb      	bne.n	800822a <_scanf_i+0x5a>
 8008292:	6863      	ldr	r3, [r4, #4]
 8008294:	b90b      	cbnz	r3, 800829a <_scanf_i+0xca>
 8008296:	230a      	movs	r3, #10
 8008298:	6063      	str	r3, [r4, #4]
 800829a:	6863      	ldr	r3, [r4, #4]
 800829c:	4947      	ldr	r1, [pc, #284]	; (80083bc <_scanf_i+0x1ec>)
 800829e:	6960      	ldr	r0, [r4, #20]
 80082a0:	1ac9      	subs	r1, r1, r3
 80082a2:	f000 f88d 	bl	80083c0 <__sccl>
 80082a6:	f04f 0b00 	mov.w	fp, #0
 80082aa:	68a3      	ldr	r3, [r4, #8]
 80082ac:	6822      	ldr	r2, [r4, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d03d      	beq.n	800832e <_scanf_i+0x15e>
 80082b2:	6831      	ldr	r1, [r6, #0]
 80082b4:	6960      	ldr	r0, [r4, #20]
 80082b6:	f891 c000 	ldrb.w	ip, [r1]
 80082ba:	f810 000c 	ldrb.w	r0, [r0, ip]
 80082be:	2800      	cmp	r0, #0
 80082c0:	d035      	beq.n	800832e <_scanf_i+0x15e>
 80082c2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80082c6:	d124      	bne.n	8008312 <_scanf_i+0x142>
 80082c8:	0510      	lsls	r0, r2, #20
 80082ca:	d522      	bpl.n	8008312 <_scanf_i+0x142>
 80082cc:	f10b 0b01 	add.w	fp, fp, #1
 80082d0:	f1b9 0f00 	cmp.w	r9, #0
 80082d4:	d003      	beq.n	80082de <_scanf_i+0x10e>
 80082d6:	3301      	adds	r3, #1
 80082d8:	f109 39ff 	add.w	r9, r9, #4294967295
 80082dc:	60a3      	str	r3, [r4, #8]
 80082de:	6873      	ldr	r3, [r6, #4]
 80082e0:	3b01      	subs	r3, #1
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	6073      	str	r3, [r6, #4]
 80082e6:	dd1b      	ble.n	8008320 <_scanf_i+0x150>
 80082e8:	6833      	ldr	r3, [r6, #0]
 80082ea:	3301      	adds	r3, #1
 80082ec:	6033      	str	r3, [r6, #0]
 80082ee:	68a3      	ldr	r3, [r4, #8]
 80082f0:	3b01      	subs	r3, #1
 80082f2:	60a3      	str	r3, [r4, #8]
 80082f4:	e7d9      	b.n	80082aa <_scanf_i+0xda>
 80082f6:	f1bb 0f02 	cmp.w	fp, #2
 80082fa:	d1ae      	bne.n	800825a <_scanf_i+0x8a>
 80082fc:	6822      	ldr	r2, [r4, #0]
 80082fe:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008302:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008306:	d1bf      	bne.n	8008288 <_scanf_i+0xb8>
 8008308:	2310      	movs	r3, #16
 800830a:	6063      	str	r3, [r4, #4]
 800830c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008310:	e7a2      	b.n	8008258 <_scanf_i+0x88>
 8008312:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008316:	6022      	str	r2, [r4, #0]
 8008318:	780b      	ldrb	r3, [r1, #0]
 800831a:	f805 3b01 	strb.w	r3, [r5], #1
 800831e:	e7de      	b.n	80082de <_scanf_i+0x10e>
 8008320:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008324:	4631      	mov	r1, r6
 8008326:	4650      	mov	r0, sl
 8008328:	4798      	blx	r3
 800832a:	2800      	cmp	r0, #0
 800832c:	d0df      	beq.n	80082ee <_scanf_i+0x11e>
 800832e:	6823      	ldr	r3, [r4, #0]
 8008330:	05db      	lsls	r3, r3, #23
 8008332:	d50d      	bpl.n	8008350 <_scanf_i+0x180>
 8008334:	42bd      	cmp	r5, r7
 8008336:	d909      	bls.n	800834c <_scanf_i+0x17c>
 8008338:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800833c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008340:	4632      	mov	r2, r6
 8008342:	4650      	mov	r0, sl
 8008344:	4798      	blx	r3
 8008346:	f105 39ff 	add.w	r9, r5, #4294967295
 800834a:	464d      	mov	r5, r9
 800834c:	42bd      	cmp	r5, r7
 800834e:	d02d      	beq.n	80083ac <_scanf_i+0x1dc>
 8008350:	6822      	ldr	r2, [r4, #0]
 8008352:	f012 0210 	ands.w	r2, r2, #16
 8008356:	d113      	bne.n	8008380 <_scanf_i+0x1b0>
 8008358:	702a      	strb	r2, [r5, #0]
 800835a:	6863      	ldr	r3, [r4, #4]
 800835c:	9e01      	ldr	r6, [sp, #4]
 800835e:	4639      	mov	r1, r7
 8008360:	4650      	mov	r0, sl
 8008362:	47b0      	blx	r6
 8008364:	6821      	ldr	r1, [r4, #0]
 8008366:	f8d8 3000 	ldr.w	r3, [r8]
 800836a:	f011 0f20 	tst.w	r1, #32
 800836e:	d013      	beq.n	8008398 <_scanf_i+0x1c8>
 8008370:	1d1a      	adds	r2, r3, #4
 8008372:	f8c8 2000 	str.w	r2, [r8]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	6018      	str	r0, [r3, #0]
 800837a:	68e3      	ldr	r3, [r4, #12]
 800837c:	3301      	adds	r3, #1
 800837e:	60e3      	str	r3, [r4, #12]
 8008380:	1bed      	subs	r5, r5, r7
 8008382:	44ab      	add	fp, r5
 8008384:	6925      	ldr	r5, [r4, #16]
 8008386:	445d      	add	r5, fp
 8008388:	6125      	str	r5, [r4, #16]
 800838a:	2000      	movs	r0, #0
 800838c:	b007      	add	sp, #28
 800838e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008392:	f04f 0b00 	mov.w	fp, #0
 8008396:	e7ca      	b.n	800832e <_scanf_i+0x15e>
 8008398:	1d1a      	adds	r2, r3, #4
 800839a:	f8c8 2000 	str.w	r2, [r8]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f011 0f01 	tst.w	r1, #1
 80083a4:	bf14      	ite	ne
 80083a6:	8018      	strhne	r0, [r3, #0]
 80083a8:	6018      	streq	r0, [r3, #0]
 80083aa:	e7e6      	b.n	800837a <_scanf_i+0x1aa>
 80083ac:	2001      	movs	r0, #1
 80083ae:	e7ed      	b.n	800838c <_scanf_i+0x1bc>
 80083b0:	08008ed4 	.word	0x08008ed4
 80083b4:	0800861d 	.word	0x0800861d
 80083b8:	08008535 	.word	0x08008535
 80083bc:	08008fc8 	.word	0x08008fc8

080083c0 <__sccl>:
 80083c0:	b570      	push	{r4, r5, r6, lr}
 80083c2:	780b      	ldrb	r3, [r1, #0]
 80083c4:	4604      	mov	r4, r0
 80083c6:	2b5e      	cmp	r3, #94	; 0x5e
 80083c8:	bf0b      	itete	eq
 80083ca:	784b      	ldrbeq	r3, [r1, #1]
 80083cc:	1c48      	addne	r0, r1, #1
 80083ce:	1c88      	addeq	r0, r1, #2
 80083d0:	2200      	movne	r2, #0
 80083d2:	bf08      	it	eq
 80083d4:	2201      	moveq	r2, #1
 80083d6:	1e61      	subs	r1, r4, #1
 80083d8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80083dc:	f801 2f01 	strb.w	r2, [r1, #1]!
 80083e0:	42a9      	cmp	r1, r5
 80083e2:	d1fb      	bne.n	80083dc <__sccl+0x1c>
 80083e4:	b90b      	cbnz	r3, 80083ea <__sccl+0x2a>
 80083e6:	3801      	subs	r0, #1
 80083e8:	bd70      	pop	{r4, r5, r6, pc}
 80083ea:	f082 0201 	eor.w	r2, r2, #1
 80083ee:	54e2      	strb	r2, [r4, r3]
 80083f0:	4605      	mov	r5, r0
 80083f2:	4628      	mov	r0, r5
 80083f4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80083f8:	292d      	cmp	r1, #45	; 0x2d
 80083fa:	d006      	beq.n	800840a <__sccl+0x4a>
 80083fc:	295d      	cmp	r1, #93	; 0x5d
 80083fe:	d0f3      	beq.n	80083e8 <__sccl+0x28>
 8008400:	b909      	cbnz	r1, 8008406 <__sccl+0x46>
 8008402:	4628      	mov	r0, r5
 8008404:	e7f0      	b.n	80083e8 <__sccl+0x28>
 8008406:	460b      	mov	r3, r1
 8008408:	e7f1      	b.n	80083ee <__sccl+0x2e>
 800840a:	786e      	ldrb	r6, [r5, #1]
 800840c:	2e5d      	cmp	r6, #93	; 0x5d
 800840e:	d0fa      	beq.n	8008406 <__sccl+0x46>
 8008410:	42b3      	cmp	r3, r6
 8008412:	dcf8      	bgt.n	8008406 <__sccl+0x46>
 8008414:	3502      	adds	r5, #2
 8008416:	4619      	mov	r1, r3
 8008418:	3101      	adds	r1, #1
 800841a:	428e      	cmp	r6, r1
 800841c:	5462      	strb	r2, [r4, r1]
 800841e:	dcfb      	bgt.n	8008418 <__sccl+0x58>
 8008420:	1af1      	subs	r1, r6, r3
 8008422:	3901      	subs	r1, #1
 8008424:	1c58      	adds	r0, r3, #1
 8008426:	42b3      	cmp	r3, r6
 8008428:	bfa8      	it	ge
 800842a:	2100      	movge	r1, #0
 800842c:	1843      	adds	r3, r0, r1
 800842e:	e7e0      	b.n	80083f2 <__sccl+0x32>

08008430 <_strtol_l.constprop.0>:
 8008430:	2b01      	cmp	r3, #1
 8008432:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008436:	d001      	beq.n	800843c <_strtol_l.constprop.0+0xc>
 8008438:	2b24      	cmp	r3, #36	; 0x24
 800843a:	d906      	bls.n	800844a <_strtol_l.constprop.0+0x1a>
 800843c:	f7ff f91e 	bl	800767c <__errno>
 8008440:	2316      	movs	r3, #22
 8008442:	6003      	str	r3, [r0, #0]
 8008444:	2000      	movs	r0, #0
 8008446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800844a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008530 <_strtol_l.constprop.0+0x100>
 800844e:	460d      	mov	r5, r1
 8008450:	462e      	mov	r6, r5
 8008452:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008456:	f814 700c 	ldrb.w	r7, [r4, ip]
 800845a:	f017 0708 	ands.w	r7, r7, #8
 800845e:	d1f7      	bne.n	8008450 <_strtol_l.constprop.0+0x20>
 8008460:	2c2d      	cmp	r4, #45	; 0x2d
 8008462:	d132      	bne.n	80084ca <_strtol_l.constprop.0+0x9a>
 8008464:	782c      	ldrb	r4, [r5, #0]
 8008466:	2701      	movs	r7, #1
 8008468:	1cb5      	adds	r5, r6, #2
 800846a:	2b00      	cmp	r3, #0
 800846c:	d05b      	beq.n	8008526 <_strtol_l.constprop.0+0xf6>
 800846e:	2b10      	cmp	r3, #16
 8008470:	d109      	bne.n	8008486 <_strtol_l.constprop.0+0x56>
 8008472:	2c30      	cmp	r4, #48	; 0x30
 8008474:	d107      	bne.n	8008486 <_strtol_l.constprop.0+0x56>
 8008476:	782c      	ldrb	r4, [r5, #0]
 8008478:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800847c:	2c58      	cmp	r4, #88	; 0x58
 800847e:	d14d      	bne.n	800851c <_strtol_l.constprop.0+0xec>
 8008480:	786c      	ldrb	r4, [r5, #1]
 8008482:	2310      	movs	r3, #16
 8008484:	3502      	adds	r5, #2
 8008486:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800848a:	f108 38ff 	add.w	r8, r8, #4294967295
 800848e:	f04f 0c00 	mov.w	ip, #0
 8008492:	fbb8 f9f3 	udiv	r9, r8, r3
 8008496:	4666      	mov	r6, ip
 8008498:	fb03 8a19 	mls	sl, r3, r9, r8
 800849c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80084a0:	f1be 0f09 	cmp.w	lr, #9
 80084a4:	d816      	bhi.n	80084d4 <_strtol_l.constprop.0+0xa4>
 80084a6:	4674      	mov	r4, lr
 80084a8:	42a3      	cmp	r3, r4
 80084aa:	dd24      	ble.n	80084f6 <_strtol_l.constprop.0+0xc6>
 80084ac:	f1bc 0f00 	cmp.w	ip, #0
 80084b0:	db1e      	blt.n	80084f0 <_strtol_l.constprop.0+0xc0>
 80084b2:	45b1      	cmp	r9, r6
 80084b4:	d31c      	bcc.n	80084f0 <_strtol_l.constprop.0+0xc0>
 80084b6:	d101      	bne.n	80084bc <_strtol_l.constprop.0+0x8c>
 80084b8:	45a2      	cmp	sl, r4
 80084ba:	db19      	blt.n	80084f0 <_strtol_l.constprop.0+0xc0>
 80084bc:	fb06 4603 	mla	r6, r6, r3, r4
 80084c0:	f04f 0c01 	mov.w	ip, #1
 80084c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084c8:	e7e8      	b.n	800849c <_strtol_l.constprop.0+0x6c>
 80084ca:	2c2b      	cmp	r4, #43	; 0x2b
 80084cc:	bf04      	itt	eq
 80084ce:	782c      	ldrbeq	r4, [r5, #0]
 80084d0:	1cb5      	addeq	r5, r6, #2
 80084d2:	e7ca      	b.n	800846a <_strtol_l.constprop.0+0x3a>
 80084d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80084d8:	f1be 0f19 	cmp.w	lr, #25
 80084dc:	d801      	bhi.n	80084e2 <_strtol_l.constprop.0+0xb2>
 80084de:	3c37      	subs	r4, #55	; 0x37
 80084e0:	e7e2      	b.n	80084a8 <_strtol_l.constprop.0+0x78>
 80084e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80084e6:	f1be 0f19 	cmp.w	lr, #25
 80084ea:	d804      	bhi.n	80084f6 <_strtol_l.constprop.0+0xc6>
 80084ec:	3c57      	subs	r4, #87	; 0x57
 80084ee:	e7db      	b.n	80084a8 <_strtol_l.constprop.0+0x78>
 80084f0:	f04f 3cff 	mov.w	ip, #4294967295
 80084f4:	e7e6      	b.n	80084c4 <_strtol_l.constprop.0+0x94>
 80084f6:	f1bc 0f00 	cmp.w	ip, #0
 80084fa:	da05      	bge.n	8008508 <_strtol_l.constprop.0+0xd8>
 80084fc:	2322      	movs	r3, #34	; 0x22
 80084fe:	6003      	str	r3, [r0, #0]
 8008500:	4646      	mov	r6, r8
 8008502:	b942      	cbnz	r2, 8008516 <_strtol_l.constprop.0+0xe6>
 8008504:	4630      	mov	r0, r6
 8008506:	e79e      	b.n	8008446 <_strtol_l.constprop.0+0x16>
 8008508:	b107      	cbz	r7, 800850c <_strtol_l.constprop.0+0xdc>
 800850a:	4276      	negs	r6, r6
 800850c:	2a00      	cmp	r2, #0
 800850e:	d0f9      	beq.n	8008504 <_strtol_l.constprop.0+0xd4>
 8008510:	f1bc 0f00 	cmp.w	ip, #0
 8008514:	d000      	beq.n	8008518 <_strtol_l.constprop.0+0xe8>
 8008516:	1e69      	subs	r1, r5, #1
 8008518:	6011      	str	r1, [r2, #0]
 800851a:	e7f3      	b.n	8008504 <_strtol_l.constprop.0+0xd4>
 800851c:	2430      	movs	r4, #48	; 0x30
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1b1      	bne.n	8008486 <_strtol_l.constprop.0+0x56>
 8008522:	2308      	movs	r3, #8
 8008524:	e7af      	b.n	8008486 <_strtol_l.constprop.0+0x56>
 8008526:	2c30      	cmp	r4, #48	; 0x30
 8008528:	d0a5      	beq.n	8008476 <_strtol_l.constprop.0+0x46>
 800852a:	230a      	movs	r3, #10
 800852c:	e7ab      	b.n	8008486 <_strtol_l.constprop.0+0x56>
 800852e:	bf00      	nop
 8008530:	08008fcb 	.word	0x08008fcb

08008534 <_strtol_r>:
 8008534:	f7ff bf7c 	b.w	8008430 <_strtol_l.constprop.0>

08008538 <_strtoul_l.constprop.0>:
 8008538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800853c:	4f36      	ldr	r7, [pc, #216]	; (8008618 <_strtoul_l.constprop.0+0xe0>)
 800853e:	4686      	mov	lr, r0
 8008540:	460d      	mov	r5, r1
 8008542:	4628      	mov	r0, r5
 8008544:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008548:	5de6      	ldrb	r6, [r4, r7]
 800854a:	f016 0608 	ands.w	r6, r6, #8
 800854e:	d1f8      	bne.n	8008542 <_strtoul_l.constprop.0+0xa>
 8008550:	2c2d      	cmp	r4, #45	; 0x2d
 8008552:	d12f      	bne.n	80085b4 <_strtoul_l.constprop.0+0x7c>
 8008554:	782c      	ldrb	r4, [r5, #0]
 8008556:	2601      	movs	r6, #1
 8008558:	1c85      	adds	r5, r0, #2
 800855a:	2b00      	cmp	r3, #0
 800855c:	d057      	beq.n	800860e <_strtoul_l.constprop.0+0xd6>
 800855e:	2b10      	cmp	r3, #16
 8008560:	d109      	bne.n	8008576 <_strtoul_l.constprop.0+0x3e>
 8008562:	2c30      	cmp	r4, #48	; 0x30
 8008564:	d107      	bne.n	8008576 <_strtoul_l.constprop.0+0x3e>
 8008566:	7828      	ldrb	r0, [r5, #0]
 8008568:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800856c:	2858      	cmp	r0, #88	; 0x58
 800856e:	d149      	bne.n	8008604 <_strtoul_l.constprop.0+0xcc>
 8008570:	786c      	ldrb	r4, [r5, #1]
 8008572:	2310      	movs	r3, #16
 8008574:	3502      	adds	r5, #2
 8008576:	f04f 38ff 	mov.w	r8, #4294967295
 800857a:	2700      	movs	r7, #0
 800857c:	fbb8 f8f3 	udiv	r8, r8, r3
 8008580:	fb03 f908 	mul.w	r9, r3, r8
 8008584:	ea6f 0909 	mvn.w	r9, r9
 8008588:	4638      	mov	r0, r7
 800858a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800858e:	f1bc 0f09 	cmp.w	ip, #9
 8008592:	d814      	bhi.n	80085be <_strtoul_l.constprop.0+0x86>
 8008594:	4664      	mov	r4, ip
 8008596:	42a3      	cmp	r3, r4
 8008598:	dd22      	ble.n	80085e0 <_strtoul_l.constprop.0+0xa8>
 800859a:	2f00      	cmp	r7, #0
 800859c:	db1d      	blt.n	80085da <_strtoul_l.constprop.0+0xa2>
 800859e:	4580      	cmp	r8, r0
 80085a0:	d31b      	bcc.n	80085da <_strtoul_l.constprop.0+0xa2>
 80085a2:	d101      	bne.n	80085a8 <_strtoul_l.constprop.0+0x70>
 80085a4:	45a1      	cmp	r9, r4
 80085a6:	db18      	blt.n	80085da <_strtoul_l.constprop.0+0xa2>
 80085a8:	fb00 4003 	mla	r0, r0, r3, r4
 80085ac:	2701      	movs	r7, #1
 80085ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085b2:	e7ea      	b.n	800858a <_strtoul_l.constprop.0+0x52>
 80085b4:	2c2b      	cmp	r4, #43	; 0x2b
 80085b6:	bf04      	itt	eq
 80085b8:	782c      	ldrbeq	r4, [r5, #0]
 80085ba:	1c85      	addeq	r5, r0, #2
 80085bc:	e7cd      	b.n	800855a <_strtoul_l.constprop.0+0x22>
 80085be:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80085c2:	f1bc 0f19 	cmp.w	ip, #25
 80085c6:	d801      	bhi.n	80085cc <_strtoul_l.constprop.0+0x94>
 80085c8:	3c37      	subs	r4, #55	; 0x37
 80085ca:	e7e4      	b.n	8008596 <_strtoul_l.constprop.0+0x5e>
 80085cc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80085d0:	f1bc 0f19 	cmp.w	ip, #25
 80085d4:	d804      	bhi.n	80085e0 <_strtoul_l.constprop.0+0xa8>
 80085d6:	3c57      	subs	r4, #87	; 0x57
 80085d8:	e7dd      	b.n	8008596 <_strtoul_l.constprop.0+0x5e>
 80085da:	f04f 37ff 	mov.w	r7, #4294967295
 80085de:	e7e6      	b.n	80085ae <_strtoul_l.constprop.0+0x76>
 80085e0:	2f00      	cmp	r7, #0
 80085e2:	da07      	bge.n	80085f4 <_strtoul_l.constprop.0+0xbc>
 80085e4:	2322      	movs	r3, #34	; 0x22
 80085e6:	f8ce 3000 	str.w	r3, [lr]
 80085ea:	f04f 30ff 	mov.w	r0, #4294967295
 80085ee:	b932      	cbnz	r2, 80085fe <_strtoul_l.constprop.0+0xc6>
 80085f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085f4:	b106      	cbz	r6, 80085f8 <_strtoul_l.constprop.0+0xc0>
 80085f6:	4240      	negs	r0, r0
 80085f8:	2a00      	cmp	r2, #0
 80085fa:	d0f9      	beq.n	80085f0 <_strtoul_l.constprop.0+0xb8>
 80085fc:	b107      	cbz	r7, 8008600 <_strtoul_l.constprop.0+0xc8>
 80085fe:	1e69      	subs	r1, r5, #1
 8008600:	6011      	str	r1, [r2, #0]
 8008602:	e7f5      	b.n	80085f0 <_strtoul_l.constprop.0+0xb8>
 8008604:	2430      	movs	r4, #48	; 0x30
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1b5      	bne.n	8008576 <_strtoul_l.constprop.0+0x3e>
 800860a:	2308      	movs	r3, #8
 800860c:	e7b3      	b.n	8008576 <_strtoul_l.constprop.0+0x3e>
 800860e:	2c30      	cmp	r4, #48	; 0x30
 8008610:	d0a9      	beq.n	8008566 <_strtoul_l.constprop.0+0x2e>
 8008612:	230a      	movs	r3, #10
 8008614:	e7af      	b.n	8008576 <_strtoul_l.constprop.0+0x3e>
 8008616:	bf00      	nop
 8008618:	08008fcb 	.word	0x08008fcb

0800861c <_strtoul_r>:
 800861c:	f7ff bf8c 	b.w	8008538 <_strtoul_l.constprop.0>

08008620 <__submore>:
 8008620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008624:	460c      	mov	r4, r1
 8008626:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008628:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800862c:	4299      	cmp	r1, r3
 800862e:	d11d      	bne.n	800866c <__submore+0x4c>
 8008630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008634:	f000 f8b6 	bl	80087a4 <_malloc_r>
 8008638:	b918      	cbnz	r0, 8008642 <__submore+0x22>
 800863a:	f04f 30ff 	mov.w	r0, #4294967295
 800863e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008646:	63a3      	str	r3, [r4, #56]	; 0x38
 8008648:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800864c:	6360      	str	r0, [r4, #52]	; 0x34
 800864e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008652:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008656:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800865a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800865e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008662:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008666:	6020      	str	r0, [r4, #0]
 8008668:	2000      	movs	r0, #0
 800866a:	e7e8      	b.n	800863e <__submore+0x1e>
 800866c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800866e:	0077      	lsls	r7, r6, #1
 8008670:	463a      	mov	r2, r7
 8008672:	f000 f90b 	bl	800888c <_realloc_r>
 8008676:	4605      	mov	r5, r0
 8008678:	2800      	cmp	r0, #0
 800867a:	d0de      	beq.n	800863a <__submore+0x1a>
 800867c:	eb00 0806 	add.w	r8, r0, r6
 8008680:	4601      	mov	r1, r0
 8008682:	4632      	mov	r2, r6
 8008684:	4640      	mov	r0, r8
 8008686:	f7ff f823 	bl	80076d0 <memcpy>
 800868a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800868e:	f8c4 8000 	str.w	r8, [r4]
 8008692:	e7e9      	b.n	8008668 <__submore+0x48>

08008694 <__retarget_lock_acquire_recursive>:
 8008694:	4770      	bx	lr

08008696 <__retarget_lock_release_recursive>:
 8008696:	4770      	bx	lr

08008698 <memmove>:
 8008698:	4288      	cmp	r0, r1
 800869a:	b510      	push	{r4, lr}
 800869c:	eb01 0402 	add.w	r4, r1, r2
 80086a0:	d902      	bls.n	80086a8 <memmove+0x10>
 80086a2:	4284      	cmp	r4, r0
 80086a4:	4623      	mov	r3, r4
 80086a6:	d807      	bhi.n	80086b8 <memmove+0x20>
 80086a8:	1e43      	subs	r3, r0, #1
 80086aa:	42a1      	cmp	r1, r4
 80086ac:	d008      	beq.n	80086c0 <memmove+0x28>
 80086ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086b6:	e7f8      	b.n	80086aa <memmove+0x12>
 80086b8:	4402      	add	r2, r0
 80086ba:	4601      	mov	r1, r0
 80086bc:	428a      	cmp	r2, r1
 80086be:	d100      	bne.n	80086c2 <memmove+0x2a>
 80086c0:	bd10      	pop	{r4, pc}
 80086c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086ca:	e7f7      	b.n	80086bc <memmove+0x24>

080086cc <_free_r>:
 80086cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086ce:	2900      	cmp	r1, #0
 80086d0:	d044      	beq.n	800875c <_free_r+0x90>
 80086d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086d6:	9001      	str	r0, [sp, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f1a1 0404 	sub.w	r4, r1, #4
 80086de:	bfb8      	it	lt
 80086e0:	18e4      	addlt	r4, r4, r3
 80086e2:	f000 f913 	bl	800890c <__malloc_lock>
 80086e6:	4a1e      	ldr	r2, [pc, #120]	; (8008760 <_free_r+0x94>)
 80086e8:	9801      	ldr	r0, [sp, #4]
 80086ea:	6813      	ldr	r3, [r2, #0]
 80086ec:	b933      	cbnz	r3, 80086fc <_free_r+0x30>
 80086ee:	6063      	str	r3, [r4, #4]
 80086f0:	6014      	str	r4, [r2, #0]
 80086f2:	b003      	add	sp, #12
 80086f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086f8:	f000 b90e 	b.w	8008918 <__malloc_unlock>
 80086fc:	42a3      	cmp	r3, r4
 80086fe:	d908      	bls.n	8008712 <_free_r+0x46>
 8008700:	6825      	ldr	r5, [r4, #0]
 8008702:	1961      	adds	r1, r4, r5
 8008704:	428b      	cmp	r3, r1
 8008706:	bf01      	itttt	eq
 8008708:	6819      	ldreq	r1, [r3, #0]
 800870a:	685b      	ldreq	r3, [r3, #4]
 800870c:	1949      	addeq	r1, r1, r5
 800870e:	6021      	streq	r1, [r4, #0]
 8008710:	e7ed      	b.n	80086ee <_free_r+0x22>
 8008712:	461a      	mov	r2, r3
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	b10b      	cbz	r3, 800871c <_free_r+0x50>
 8008718:	42a3      	cmp	r3, r4
 800871a:	d9fa      	bls.n	8008712 <_free_r+0x46>
 800871c:	6811      	ldr	r1, [r2, #0]
 800871e:	1855      	adds	r5, r2, r1
 8008720:	42a5      	cmp	r5, r4
 8008722:	d10b      	bne.n	800873c <_free_r+0x70>
 8008724:	6824      	ldr	r4, [r4, #0]
 8008726:	4421      	add	r1, r4
 8008728:	1854      	adds	r4, r2, r1
 800872a:	42a3      	cmp	r3, r4
 800872c:	6011      	str	r1, [r2, #0]
 800872e:	d1e0      	bne.n	80086f2 <_free_r+0x26>
 8008730:	681c      	ldr	r4, [r3, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	6053      	str	r3, [r2, #4]
 8008736:	4421      	add	r1, r4
 8008738:	6011      	str	r1, [r2, #0]
 800873a:	e7da      	b.n	80086f2 <_free_r+0x26>
 800873c:	d902      	bls.n	8008744 <_free_r+0x78>
 800873e:	230c      	movs	r3, #12
 8008740:	6003      	str	r3, [r0, #0]
 8008742:	e7d6      	b.n	80086f2 <_free_r+0x26>
 8008744:	6825      	ldr	r5, [r4, #0]
 8008746:	1961      	adds	r1, r4, r5
 8008748:	428b      	cmp	r3, r1
 800874a:	bf04      	itt	eq
 800874c:	6819      	ldreq	r1, [r3, #0]
 800874e:	685b      	ldreq	r3, [r3, #4]
 8008750:	6063      	str	r3, [r4, #4]
 8008752:	bf04      	itt	eq
 8008754:	1949      	addeq	r1, r1, r5
 8008756:	6021      	streq	r1, [r4, #0]
 8008758:	6054      	str	r4, [r2, #4]
 800875a:	e7ca      	b.n	80086f2 <_free_r+0x26>
 800875c:	b003      	add	sp, #12
 800875e:	bd30      	pop	{r4, r5, pc}
 8008760:	20004950 	.word	0x20004950

08008764 <sbrk_aligned>:
 8008764:	b570      	push	{r4, r5, r6, lr}
 8008766:	4e0e      	ldr	r6, [pc, #56]	; (80087a0 <sbrk_aligned+0x3c>)
 8008768:	460c      	mov	r4, r1
 800876a:	6831      	ldr	r1, [r6, #0]
 800876c:	4605      	mov	r5, r0
 800876e:	b911      	cbnz	r1, 8008776 <sbrk_aligned+0x12>
 8008770:	f000 f8bc 	bl	80088ec <_sbrk_r>
 8008774:	6030      	str	r0, [r6, #0]
 8008776:	4621      	mov	r1, r4
 8008778:	4628      	mov	r0, r5
 800877a:	f000 f8b7 	bl	80088ec <_sbrk_r>
 800877e:	1c43      	adds	r3, r0, #1
 8008780:	d00a      	beq.n	8008798 <sbrk_aligned+0x34>
 8008782:	1cc4      	adds	r4, r0, #3
 8008784:	f024 0403 	bic.w	r4, r4, #3
 8008788:	42a0      	cmp	r0, r4
 800878a:	d007      	beq.n	800879c <sbrk_aligned+0x38>
 800878c:	1a21      	subs	r1, r4, r0
 800878e:	4628      	mov	r0, r5
 8008790:	f000 f8ac 	bl	80088ec <_sbrk_r>
 8008794:	3001      	adds	r0, #1
 8008796:	d101      	bne.n	800879c <sbrk_aligned+0x38>
 8008798:	f04f 34ff 	mov.w	r4, #4294967295
 800879c:	4620      	mov	r0, r4
 800879e:	bd70      	pop	{r4, r5, r6, pc}
 80087a0:	20004954 	.word	0x20004954

080087a4 <_malloc_r>:
 80087a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087a8:	1ccd      	adds	r5, r1, #3
 80087aa:	f025 0503 	bic.w	r5, r5, #3
 80087ae:	3508      	adds	r5, #8
 80087b0:	2d0c      	cmp	r5, #12
 80087b2:	bf38      	it	cc
 80087b4:	250c      	movcc	r5, #12
 80087b6:	2d00      	cmp	r5, #0
 80087b8:	4607      	mov	r7, r0
 80087ba:	db01      	blt.n	80087c0 <_malloc_r+0x1c>
 80087bc:	42a9      	cmp	r1, r5
 80087be:	d905      	bls.n	80087cc <_malloc_r+0x28>
 80087c0:	230c      	movs	r3, #12
 80087c2:	603b      	str	r3, [r7, #0]
 80087c4:	2600      	movs	r6, #0
 80087c6:	4630      	mov	r0, r6
 80087c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087cc:	4e2e      	ldr	r6, [pc, #184]	; (8008888 <_malloc_r+0xe4>)
 80087ce:	f000 f89d 	bl	800890c <__malloc_lock>
 80087d2:	6833      	ldr	r3, [r6, #0]
 80087d4:	461c      	mov	r4, r3
 80087d6:	bb34      	cbnz	r4, 8008826 <_malloc_r+0x82>
 80087d8:	4629      	mov	r1, r5
 80087da:	4638      	mov	r0, r7
 80087dc:	f7ff ffc2 	bl	8008764 <sbrk_aligned>
 80087e0:	1c43      	adds	r3, r0, #1
 80087e2:	4604      	mov	r4, r0
 80087e4:	d14d      	bne.n	8008882 <_malloc_r+0xde>
 80087e6:	6834      	ldr	r4, [r6, #0]
 80087e8:	4626      	mov	r6, r4
 80087ea:	2e00      	cmp	r6, #0
 80087ec:	d140      	bne.n	8008870 <_malloc_r+0xcc>
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	4631      	mov	r1, r6
 80087f2:	4638      	mov	r0, r7
 80087f4:	eb04 0803 	add.w	r8, r4, r3
 80087f8:	f000 f878 	bl	80088ec <_sbrk_r>
 80087fc:	4580      	cmp	r8, r0
 80087fe:	d13a      	bne.n	8008876 <_malloc_r+0xd2>
 8008800:	6821      	ldr	r1, [r4, #0]
 8008802:	3503      	adds	r5, #3
 8008804:	1a6d      	subs	r5, r5, r1
 8008806:	f025 0503 	bic.w	r5, r5, #3
 800880a:	3508      	adds	r5, #8
 800880c:	2d0c      	cmp	r5, #12
 800880e:	bf38      	it	cc
 8008810:	250c      	movcc	r5, #12
 8008812:	4629      	mov	r1, r5
 8008814:	4638      	mov	r0, r7
 8008816:	f7ff ffa5 	bl	8008764 <sbrk_aligned>
 800881a:	3001      	adds	r0, #1
 800881c:	d02b      	beq.n	8008876 <_malloc_r+0xd2>
 800881e:	6823      	ldr	r3, [r4, #0]
 8008820:	442b      	add	r3, r5
 8008822:	6023      	str	r3, [r4, #0]
 8008824:	e00e      	b.n	8008844 <_malloc_r+0xa0>
 8008826:	6822      	ldr	r2, [r4, #0]
 8008828:	1b52      	subs	r2, r2, r5
 800882a:	d41e      	bmi.n	800886a <_malloc_r+0xc6>
 800882c:	2a0b      	cmp	r2, #11
 800882e:	d916      	bls.n	800885e <_malloc_r+0xba>
 8008830:	1961      	adds	r1, r4, r5
 8008832:	42a3      	cmp	r3, r4
 8008834:	6025      	str	r5, [r4, #0]
 8008836:	bf18      	it	ne
 8008838:	6059      	strne	r1, [r3, #4]
 800883a:	6863      	ldr	r3, [r4, #4]
 800883c:	bf08      	it	eq
 800883e:	6031      	streq	r1, [r6, #0]
 8008840:	5162      	str	r2, [r4, r5]
 8008842:	604b      	str	r3, [r1, #4]
 8008844:	4638      	mov	r0, r7
 8008846:	f104 060b 	add.w	r6, r4, #11
 800884a:	f000 f865 	bl	8008918 <__malloc_unlock>
 800884e:	f026 0607 	bic.w	r6, r6, #7
 8008852:	1d23      	adds	r3, r4, #4
 8008854:	1af2      	subs	r2, r6, r3
 8008856:	d0b6      	beq.n	80087c6 <_malloc_r+0x22>
 8008858:	1b9b      	subs	r3, r3, r6
 800885a:	50a3      	str	r3, [r4, r2]
 800885c:	e7b3      	b.n	80087c6 <_malloc_r+0x22>
 800885e:	6862      	ldr	r2, [r4, #4]
 8008860:	42a3      	cmp	r3, r4
 8008862:	bf0c      	ite	eq
 8008864:	6032      	streq	r2, [r6, #0]
 8008866:	605a      	strne	r2, [r3, #4]
 8008868:	e7ec      	b.n	8008844 <_malloc_r+0xa0>
 800886a:	4623      	mov	r3, r4
 800886c:	6864      	ldr	r4, [r4, #4]
 800886e:	e7b2      	b.n	80087d6 <_malloc_r+0x32>
 8008870:	4634      	mov	r4, r6
 8008872:	6876      	ldr	r6, [r6, #4]
 8008874:	e7b9      	b.n	80087ea <_malloc_r+0x46>
 8008876:	230c      	movs	r3, #12
 8008878:	603b      	str	r3, [r7, #0]
 800887a:	4638      	mov	r0, r7
 800887c:	f000 f84c 	bl	8008918 <__malloc_unlock>
 8008880:	e7a1      	b.n	80087c6 <_malloc_r+0x22>
 8008882:	6025      	str	r5, [r4, #0]
 8008884:	e7de      	b.n	8008844 <_malloc_r+0xa0>
 8008886:	bf00      	nop
 8008888:	20004950 	.word	0x20004950

0800888c <_realloc_r>:
 800888c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008890:	4680      	mov	r8, r0
 8008892:	4614      	mov	r4, r2
 8008894:	460e      	mov	r6, r1
 8008896:	b921      	cbnz	r1, 80088a2 <_realloc_r+0x16>
 8008898:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800889c:	4611      	mov	r1, r2
 800889e:	f7ff bf81 	b.w	80087a4 <_malloc_r>
 80088a2:	b92a      	cbnz	r2, 80088b0 <_realloc_r+0x24>
 80088a4:	f7ff ff12 	bl	80086cc <_free_r>
 80088a8:	4625      	mov	r5, r4
 80088aa:	4628      	mov	r0, r5
 80088ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088b0:	f000 f838 	bl	8008924 <_malloc_usable_size_r>
 80088b4:	4284      	cmp	r4, r0
 80088b6:	4607      	mov	r7, r0
 80088b8:	d802      	bhi.n	80088c0 <_realloc_r+0x34>
 80088ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088be:	d812      	bhi.n	80088e6 <_realloc_r+0x5a>
 80088c0:	4621      	mov	r1, r4
 80088c2:	4640      	mov	r0, r8
 80088c4:	f7ff ff6e 	bl	80087a4 <_malloc_r>
 80088c8:	4605      	mov	r5, r0
 80088ca:	2800      	cmp	r0, #0
 80088cc:	d0ed      	beq.n	80088aa <_realloc_r+0x1e>
 80088ce:	42bc      	cmp	r4, r7
 80088d0:	4622      	mov	r2, r4
 80088d2:	4631      	mov	r1, r6
 80088d4:	bf28      	it	cs
 80088d6:	463a      	movcs	r2, r7
 80088d8:	f7fe fefa 	bl	80076d0 <memcpy>
 80088dc:	4631      	mov	r1, r6
 80088de:	4640      	mov	r0, r8
 80088e0:	f7ff fef4 	bl	80086cc <_free_r>
 80088e4:	e7e1      	b.n	80088aa <_realloc_r+0x1e>
 80088e6:	4635      	mov	r5, r6
 80088e8:	e7df      	b.n	80088aa <_realloc_r+0x1e>
	...

080088ec <_sbrk_r>:
 80088ec:	b538      	push	{r3, r4, r5, lr}
 80088ee:	4d06      	ldr	r5, [pc, #24]	; (8008908 <_sbrk_r+0x1c>)
 80088f0:	2300      	movs	r3, #0
 80088f2:	4604      	mov	r4, r0
 80088f4:	4608      	mov	r0, r1
 80088f6:	602b      	str	r3, [r5, #0]
 80088f8:	f7f9 fcd4 	bl	80022a4 <_sbrk>
 80088fc:	1c43      	adds	r3, r0, #1
 80088fe:	d102      	bne.n	8008906 <_sbrk_r+0x1a>
 8008900:	682b      	ldr	r3, [r5, #0]
 8008902:	b103      	cbz	r3, 8008906 <_sbrk_r+0x1a>
 8008904:	6023      	str	r3, [r4, #0]
 8008906:	bd38      	pop	{r3, r4, r5, pc}
 8008908:	20004948 	.word	0x20004948

0800890c <__malloc_lock>:
 800890c:	4801      	ldr	r0, [pc, #4]	; (8008914 <__malloc_lock+0x8>)
 800890e:	f7ff bec1 	b.w	8008694 <__retarget_lock_acquire_recursive>
 8008912:	bf00      	nop
 8008914:	2000494c 	.word	0x2000494c

08008918 <__malloc_unlock>:
 8008918:	4801      	ldr	r0, [pc, #4]	; (8008920 <__malloc_unlock+0x8>)
 800891a:	f7ff bebc 	b.w	8008696 <__retarget_lock_release_recursive>
 800891e:	bf00      	nop
 8008920:	2000494c 	.word	0x2000494c

08008924 <_malloc_usable_size_r>:
 8008924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008928:	1f18      	subs	r0, r3, #4
 800892a:	2b00      	cmp	r3, #0
 800892c:	bfbc      	itt	lt
 800892e:	580b      	ldrlt	r3, [r1, r0]
 8008930:	18c0      	addlt	r0, r0, r3
 8008932:	4770      	bx	lr

08008934 <_init>:
 8008934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008936:	bf00      	nop
 8008938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800893a:	bc08      	pop	{r3}
 800893c:	469e      	mov	lr, r3
 800893e:	4770      	bx	lr

08008940 <_fini>:
 8008940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008942:	bf00      	nop
 8008944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008946:	bc08      	pop	{r3}
 8008948:	469e      	mov	lr, r3
 800894a:	4770      	bx	lr
