
Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074d4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08007684  08007684  00017684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a90  08007a90  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007a90  08007a90  00017a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a98  08007a98  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a98  08007a98  00017a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a9c  08007a9c  00017a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004af8  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004b6c  20004b6c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ccac  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bea  00000000  00000000  0003cd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001860  00000000  00000000  00040940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016d8  00000000  00000000  000421a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028f8b  00000000  00000000  00043878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b910  00000000  00000000  0006c803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3019  00000000  00000000  00088113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017b12c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b10  00000000  00000000  0017b17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800766c 	.word	0x0800766c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800766c 	.word	0x0800766c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <SMprintf>:


extern const Cmd_tbl cmd_ctbl[];
char str_buff[512];
void SMprintf(const char *format,...)
{
 80005a4:	b40f      	push	{r0, r1, r2, r3}
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
	va_list args;
	char *str;


	str=str_buff;
 80005ac:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <SMprintf+0x40>)
 80005ae:	607b      	str	r3, [r7, #4]
	va_start(args,format);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	603b      	str	r3, [r7, #0]
	vsprintf(str,format,args);
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	6939      	ldr	r1, [r7, #16]
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f006 fc0c 	bl	8006dd8 <vsiprintf>
	va_end(args);
	HAL_UART_Transmit(&huart3,(unsigned char*)str,strlen(str),10);
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f7ff fe15 	bl	80001f0 <strlen>
 80005c6:	4603      	mov	r3, r0
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	230a      	movs	r3, #10
 80005cc:	6879      	ldr	r1, [r7, #4]
 80005ce:	4806      	ldr	r0, [pc, #24]	; (80005e8 <SMprintf+0x44>)
 80005d0:	f003 fe27 	bl	8004222 <HAL_UART_Transmit>
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005de:	b004      	add	sp, #16
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000090 	.word	0x20000090
 80005e8:	20000850 	.word	0x20000850

080005ec <ktolower>:

int8u ktolower(int8u c)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
	if(c>='A'&& c <='Z')
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	2b40      	cmp	r3, #64	; 0x40
 80005fa:	d905      	bls.n	8000608 <ktolower+0x1c>
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	2b5a      	cmp	r3, #90	; 0x5a
 8000600:	d802      	bhi.n	8000608 <ktolower+0x1c>
		c-='A'-'a';
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	3320      	adds	r3, #32
 8000606:	71fb      	strb	r3, [r7, #7]
	return(c);
 8000608:	79fb      	ldrb	r3, [r7, #7]
}
 800060a:	4618      	mov	r0, r3
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <kstrncmp>:
//Discription : compare strings with length
//output : 1) s1!= s2 : 1
//		2)s1==s2 : 0

int kstrncmp(char *s1,char *s2,int len)
{
 8000616:	b480      	push	{r7}
 8000618:	b085      	sub	sp, #20
 800061a:	af00      	add	r7, sp, #0
 800061c:	60f8      	str	r0, [r7, #12]
 800061e:	60b9      	str	r1, [r7, #8]
 8000620:	607a      	str	r2, [r7, #4]
	if(s1 == s2) return(0);
 8000622:	68fa      	ldr	r2, [r7, #12]
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	429a      	cmp	r2, r3
 8000628:	d115      	bne.n	8000656 <kstrncmp+0x40>
 800062a:	2300      	movs	r3, #0
 800062c:	e01b      	b.n	8000666 <kstrncmp+0x50>
	while(len--){
		if(*s1++ != *s2++)
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	1c5a      	adds	r2, r3, #1
 8000632:	60fa      	str	r2, [r7, #12]
 8000634:	781a      	ldrb	r2, [r3, #0]
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	1c59      	adds	r1, r3, #1
 800063a:	60b9      	str	r1, [r7, #8]
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	429a      	cmp	r2, r3
 8000640:	d001      	beq.n	8000646 <kstrncmp+0x30>
		{
			return(1);
 8000642:	2301      	movs	r3, #1
 8000644:	e00f      	b.n	8000666 <kstrncmp+0x50>
		}
		if(*s1 == '\0' && *s2 == '\0')
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d103      	bne.n	8000656 <kstrncmp+0x40>
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d005      	beq.n	8000662 <kstrncmp+0x4c>
	while(len--){
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	1e5a      	subs	r2, r3, #1
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1e6      	bne.n	800062e <kstrncmp+0x18>
 8000660:	e000      	b.n	8000664 <kstrncmp+0x4e>
		{
			break;
 8000662:	bf00      	nop
		}
	}
	return(0);
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	3714      	adds	r7, #20
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <atoh>:


int atoh(char *s)
{
 8000672:	b4b0      	push	{r4, r5, r7}
 8000674:	b083      	sub	sp, #12
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
	register int i,n;

	for(n = i = 0 ; s[i] != '\0' ; i++)
 800067a:	2500      	movs	r5, #0
 800067c:	462c      	mov	r4, r5
 800067e:	e042      	b.n	8000706 <atoh+0x94>
	{
		if(s[i] >='0' && s[i] <='9')
 8000680:	462a      	mov	r2, r5
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b2f      	cmp	r3, #47	; 0x2f
 800068a:	d90e      	bls.n	80006aa <atoh+0x38>
 800068c:	462a      	mov	r2, r5
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4413      	add	r3, r2
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b39      	cmp	r3, #57	; 0x39
 8000696:	d808      	bhi.n	80006aa <atoh+0x38>
			n = 16*n+s[i] - '0';
 8000698:	0123      	lsls	r3, r4, #4
 800069a:	4629      	mov	r1, r5
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	440a      	add	r2, r1
 80006a0:	7812      	ldrb	r2, [r2, #0]
 80006a2:	4413      	add	r3, r2
 80006a4:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 80006a8:	e02c      	b.n	8000704 <atoh+0x92>
		else if(s[i]>='a'&&s[i]<'f')
 80006aa:	462a      	mov	r2, r5
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4413      	add	r3, r2
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b60      	cmp	r3, #96	; 0x60
 80006b4:	d90e      	bls.n	80006d4 <atoh+0x62>
 80006b6:	462a      	mov	r2, r5
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4413      	add	r3, r2
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b65      	cmp	r3, #101	; 0x65
 80006c0:	d808      	bhi.n	80006d4 <atoh+0x62>
			n = 16*n+s[i] - 'a'+10 ;
 80006c2:	0123      	lsls	r3, r4, #4
 80006c4:	4629      	mov	r1, r5
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	440a      	add	r2, r1
 80006ca:	7812      	ldrb	r2, [r2, #0]
 80006cc:	4413      	add	r3, r2
 80006ce:	f1a3 0457 	sub.w	r4, r3, #87	; 0x57
 80006d2:	e017      	b.n	8000704 <atoh+0x92>
		else if(s[i]>='A'&& s[i] <='F')
 80006d4:	462a      	mov	r2, r5
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4413      	add	r3, r2
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b40      	cmp	r3, #64	; 0x40
 80006de:	d90e      	bls.n	80006fe <atoh+0x8c>
 80006e0:	462a      	mov	r2, r5
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b46      	cmp	r3, #70	; 0x46
 80006ea:	d808      	bhi.n	80006fe <atoh+0x8c>
			n = 16*n + s[i] - 'A'+10;
 80006ec:	0123      	lsls	r3, r4, #4
 80006ee:	4629      	mov	r1, r5
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	440a      	add	r2, r1
 80006f4:	7812      	ldrb	r2, [r2, #0]
 80006f6:	4413      	add	r3, r2
 80006f8:	f1a3 0437 	sub.w	r4, r3, #55	; 0x37
 80006fc:	e002      	b.n	8000704 <atoh+0x92>
		else
			return(-1);
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000702:	e007      	b.n	8000714 <atoh+0xa2>
	for(n = i = 0 ; s[i] != '\0' ; i++)
 8000704:	3501      	adds	r5, #1
 8000706:	462a      	mov	r2, r5
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4413      	add	r3, r2
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d1b6      	bne.n	8000680 <atoh+0xe>
	}
	return (n);
 8000712:	4623      	mov	r3, r4
}
 8000714:	4618      	mov	r0, r3
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bcb0      	pop	{r4, r5, r7}
 800071c:	4770      	bx	lr

0800071e <get_char_os>:
// 함수:USART에서 1개의 CHAR 를 읽어 오는 함수
// input: Uart3 Queue
// output :: c[0] Uart3에서 읽은 char

char get_char_os(char c[])
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		if(!Uart3_Is_Empty())
 8000726:	f000 fd67 	bl	80011f8 <Uart3_Is_Empty>
 800072a:	4603      	mov	r3, r0
 800072c:	f083 0301 	eor.w	r3, r3, #1
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d007      	beq.n	8000746 <get_char_os+0x28>
		{
			c[0] = Uart3_DeQueue();
 8000736:	f000 fd49 	bl	80011cc <Uart3_DeQueue>
 800073a:	4603      	mov	r3, r0
 800073c:	b2da      	uxtb	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	701a      	strb	r2, [r3, #0]
			return YES;
 8000742:	2301      	movs	r3, #1
 8000744:	e003      	b.n	800074e <get_char_os+0x30>
		}
		else
		{
			osDelay(50);
 8000746:	2032      	movs	r0, #50	; 0x32
 8000748:	f005 f90d 	bl	8005966 <osDelay>
		if(!Uart3_Is_Empty())
 800074c:	e7eb      	b.n	8000726 <get_char_os+0x8>
			continue;
		}
	}
	return(1);
}
 800074e:	4618      	mov	r0, r3
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <bfm_msg_mon>:

//char tbuf[5],omon_buf[80];
//int  onch_no = 0;

int bfm_msg_mon(int argc,char *argv[])
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
	printf("bfmok");
 8000762:	4804      	ldr	r0, [pc, #16]	; (8000774 <bfm_msg_mon+0x1c>)
 8000764:	f7ff ff1e 	bl	80005a4 <SMprintf>
	return(1);
 8000768:	2301      	movs	r3, #1
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	08007684 	.word	0x08007684

08000778 <get_nstring>:
	}
	return(1);
}

int get_nstring(char buf[])
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b087      	sub	sp, #28
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	int i;
	int8u c;
	char rxchar[1];
	int8u tbuf[2];

	tbuf[1] = '\0';
 8000780:	2300      	movs	r3, #0
 8000782:	737b      	strb	r3, [r7, #13]

	for (i=0 ; i<20 ; i++)
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	e007      	b.n	800079a <get_nstring+0x22>
	{
		buf[i] = '\0';
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	4413      	add	r3, r2
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
	for (i=0 ; i<20 ; i++)
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	3301      	adds	r3, #1
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	2b13      	cmp	r3, #19
 800079e:	ddf4      	ble.n	800078a <get_nstring+0x12>
	}
	for(i=0; i <20;){
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	e043      	b.n	800082e <get_nstring+0xb6>

		while(get_char_os(rxchar)==0);
 80007a6:	bf00      	nop
 80007a8:	f107 0310 	add.w	r3, r7, #16
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ffb6 	bl	800071e <get_char_os>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d0f7      	beq.n	80007a8 <get_nstring+0x30>
		c=rxchar[0];
 80007b8:	7c3b      	ldrb	r3, [r7, #16]
 80007ba:	74fb      	strb	r3, [r7, #19]
			if(( c == '\n')||(c == '\r'))
 80007bc:	7cfb      	ldrb	r3, [r7, #19]
 80007be:	2b0a      	cmp	r3, #10
 80007c0:	d038      	beq.n	8000834 <get_nstring+0xbc>
 80007c2:	7cfb      	ldrb	r3, [r7, #19]
 80007c4:	2b0d      	cmp	r3, #13
 80007c6:	d035      	beq.n	8000834 <get_nstring+0xbc>
			{
				break;
			}
			if(c== 0x8)
 80007c8:	7cfb      	ldrb	r3, [r7, #19]
 80007ca:	2b08      	cmp	r3, #8
 80007cc:	d120      	bne.n	8000810 <get_nstring+0x98>
			{
				if(i>0)
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	dd2c      	ble.n	800082e <get_nstring+0xb6>
				{
					tbuf[0] = 0x8; printf((char*)tbuf);
 80007d4:	2308      	movs	r3, #8
 80007d6:	733b      	strb	r3, [r7, #12]
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fee1 	bl	80005a4 <SMprintf>
					tbuf[0] = ' '; printf((char*)tbuf);
 80007e2:	2320      	movs	r3, #32
 80007e4:	733b      	strb	r3, [r7, #12]
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff feda 	bl	80005a4 <SMprintf>
					tbuf[0] = 0x8; printf((char*)tbuf);
 80007f0:	2308      	movs	r3, #8
 80007f2:	733b      	strb	r3, [r7, #12]
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fed3 	bl	80005a4 <SMprintf>
					i--; buf[i] = '\0';
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	3b01      	subs	r3, #1
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	4413      	add	r3, r2
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
 800080e:	e00e      	b.n	800082e <get_nstring+0xb6>
				}
			}
			else{
					tbuf[0] = c; printf((char*)tbuf);
 8000810:	7cfb      	ldrb	r3, [r7, #19]
 8000812:	733b      	strb	r3, [r7, #12]
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fec3 	bl	80005a4 <SMprintf>
					buf[i] = c;
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	4413      	add	r3, r2
 8000824:	7cfa      	ldrb	r2, [r7, #19]
 8000826:	701a      	strb	r2, [r3, #0]
					i++;
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	3301      	adds	r3, #1
 800082c:	617b      	str	r3, [r7, #20]
	for(i=0; i <20;){
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	2b13      	cmp	r3, #19
 8000832:	ddb8      	ble.n	80007a6 <get_nstring+0x2e>
			}
	}
	for( i=0; i <20; i++){
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	e016      	b.n	8000868 <get_nstring+0xf0>
		if(buf[i] == '\0'){
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	4413      	add	r3, r2
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d101      	bne.n	800084a <get_nstring+0xd2>
			return(i);
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	e012      	b.n	8000870 <get_nstring+0xf8>
		}
		buf[i] = ktolower(buf[i]);
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	4413      	add	r3, r2
 8000850:	7819      	ldrb	r1, [r3, #0]
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	18d4      	adds	r4, r2, r3
 8000858:	4608      	mov	r0, r1
 800085a:	f7ff fec7 	bl	80005ec <ktolower>
 800085e:	4603      	mov	r3, r0
 8000860:	7023      	strb	r3, [r4, #0]
	for( i=0; i <20; i++){
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	3301      	adds	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	2b13      	cmp	r3, #19
 800086c:	dde5      	ble.n	800083a <get_nstring+0xc2>
	}
	return(i);
 800086e:	697b      	ldr	r3, [r7, #20]
}
 8000870:	4618      	mov	r0, r3
 8000872:	371c      	adds	r7, #28
 8000874:	46bd      	mov	sp, r7
 8000876:	bd90      	pop	{r4, r7, pc}

08000878 <get_io_number>:

char get_io_number(unsigned int *retval)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08c      	sub	sp, #48	; 0x30
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	byte c;
	char tmp[20];
	char flag;
	int no,i;

	*retval = 0;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
	flag = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	no = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28

	if(get_nstring(tmp)!=0){
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff6f 	bl	8000778 <get_nstring>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d04e      	beq.n	800093e <get_io_number+0xc6>
		for(i=0; i<32 ; i++){
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
 80008a4:	e048      	b.n	8000938 <get_io_number+0xc0>
			c = tmp[i];
 80008a6:	f107 020c 	add.w	r2, r7, #12
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	4413      	add	r3, r2
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			if(c == '\0'){
 80008b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d103      	bne.n	80008c4 <get_io_number+0x4c>
				flag = '\n';
 80008bc:	230a      	movs	r3, #10
 80008be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80008c2:	e03c      	b.n	800093e <get_io_number+0xc6>
			}
			if((c=='/')||(c =='.')||(c==']')||(c==0x1a)||(c=='y')||(c=='n'))
 80008c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008c8:	2b2f      	cmp	r3, #47	; 0x2f
 80008ca:	d013      	beq.n	80008f4 <get_io_number+0x7c>
 80008cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008d0:	2b2e      	cmp	r3, #46	; 0x2e
 80008d2:	d00f      	beq.n	80008f4 <get_io_number+0x7c>
 80008d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008d8:	2b5d      	cmp	r3, #93	; 0x5d
 80008da:	d00b      	beq.n	80008f4 <get_io_number+0x7c>
 80008dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008e0:	2b1a      	cmp	r3, #26
 80008e2:	d007      	beq.n	80008f4 <get_io_number+0x7c>
 80008e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008e8:	2b79      	cmp	r3, #121	; 0x79
 80008ea:	d003      	beq.n	80008f4 <get_io_number+0x7c>
 80008ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008f0:	2b6e      	cmp	r3, #110	; 0x6e
 80008f2:	d104      	bne.n	80008fe <get_io_number+0x86>
			{
				flag =c;
 80008f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80008fc:	e01f      	b.n	800093e <get_io_number+0xc6>
			}
			if((c>='0')&&(c <='9'))
 80008fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000902:	2b2f      	cmp	r3, #47	; 0x2f
 8000904:	d914      	bls.n	8000930 <get_io_number+0xb8>
 8000906:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800090a:	2b39      	cmp	r3, #57	; 0x39
 800090c:	d810      	bhi.n	8000930 <get_io_number+0xb8>
			{
				*retval = *retval *0x10 + c -'0';
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	011a      	lsls	r2, r3, #4
 8000914:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000918:	4413      	add	r3, r2
 800091a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	601a      	str	r2, [r3, #0]
				no++;
 8000922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000924:	3301      	adds	r3, #1
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
		for(i=0; i<32 ; i++){
 8000928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092a:	3301      	adds	r3, #1
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
 800092e:	e003      	b.n	8000938 <get_io_number+0xc0>
			}
			else
			{
				flag = ' ';
 8000930:	2320      	movs	r3, #32
 8000932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8000936:	e002      	b.n	800093e <get_io_number+0xc6>
		for(i=0; i<32 ; i++){
 8000938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093a:	2b1f      	cmp	r3, #31
 800093c:	ddb3      	ble.n	80008a6 <get_io_number+0x2e>

			}
		}
	}
	if(no == 0)
 800093e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000940:	2b00      	cmp	r3, #0
 8000942:	d103      	bne.n	800094c <get_io_number+0xd4>
	{
		*retval = 0xffffffff;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f04f 32ff 	mov.w	r2, #4294967295
 800094a:	601a      	str	r2, [r3, #0]
	}
	return(flag);
 800094c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f

}
 8000950:	4618      	mov	r0, r3
 8000952:	3730      	adds	r7, #48	; 0x30
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <cmdcpy>:

void cmdcpy(char *s1, char *s2)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
	while(1)
	{
		if(*s2 == 0)
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d008      	beq.n	800097c <cmdcpy+0x24>
		{
			break;
		}
		*s1++ = *s2++;
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	1c53      	adds	r3, r2, #1
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	1c59      	adds	r1, r3, #1
 8000974:	6079      	str	r1, [r7, #4]
 8000976:	7812      	ldrb	r2, [r2, #0]
 8000978:	701a      	strb	r2, [r3, #0]
		if(*s2 == 0)
 800097a:	e7f2      	b.n	8000962 <cmdcpy+0xa>
			break;
 800097c:	bf00      	nop
	}
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <fill>:

int fill(int8u *sp, int8u c, int n)
{
 800098a:	b480      	push	{r7}
 800098c:	b085      	sub	sp, #20
 800098e:	af00      	add	r7, sp, #0
 8000990:	60f8      	str	r0, [r7, #12]
 8000992:	460b      	mov	r3, r1
 8000994:	607a      	str	r2, [r7, #4]
 8000996:	72fb      	strb	r3, [r7, #11]
	while(--n>=0)
 8000998:	e004      	b.n	80009a4 <fill+0x1a>
		{
			*sp++ = c;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	60fa      	str	r2, [r7, #12]
 80009a0:	7afa      	ldrb	r2, [r7, #11]
 80009a2:	701a      	strb	r2, [r3, #0]
	while(--n>=0)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	daf4      	bge.n	800099a <fill+0x10>
		}
		return(YES);
 80009b0:	2301      	movs	r3, #1
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <kstrlen>:

int kstrlen(char *s)
{
 80009be:	b490      	push	{r4, r7}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
	register int cnt;

	cnt = 0;
 80009c6:	2400      	movs	r4, #0
	while(*s++)
 80009c8:	e000      	b.n	80009cc <kstrlen+0xe>
	{
		cnt++;
 80009ca:	3401      	adds	r4, #1
	while(*s++)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1f8      	bne.n	80009ca <kstrlen+0xc>
	}
	return(cnt);
 80009d8:	4623      	mov	r3, r4
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc90      	pop	{r4, r7}
 80009e2:	4770      	bx	lr

080009e4 <parse_string>:

int parse_string(unsigned char *s,char *argv[])
{
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b0c5      	sub	sp, #276	; 0x114
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009f2:	6018      	str	r0, [r3, #0]
 80009f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80009fc:	6019      	str	r1, [r3, #0]
		int end;
	}arg_tok[32];

	unsigned char *cptr;
	register int i;
	int argc = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	cptr = s;
 8000a04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	for(i = 0, cptr = s; i< kstrlen((char*)s);i++,cptr++)
 8000a12:	2400      	movs	r4, #0
 8000a14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000a22:	e04a      	b.n	8000aba <parse_string+0xd6>
	{
		if(*cptr !=' '&& *cptr !='\t')
 8000a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b20      	cmp	r3, #32
 8000a2c:	d03f      	beq.n	8000aae <parse_string+0xca>
 8000a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b09      	cmp	r3, #9
 8000a36:	d03a      	beq.n	8000aae <parse_string+0xca>
		{
			if(i==0 || *(cptr-1)==' '|| *(cptr-1) == '\t')
 8000a38:	2c00      	cmp	r4, #0
 8000a3a:	d00b      	beq.n	8000a54 <parse_string+0x70>
 8000a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a40:	3b01      	subs	r3, #1
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b20      	cmp	r3, #32
 8000a46:	d005      	beq.n	8000a54 <parse_string+0x70>
 8000a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b09      	cmp	r3, #9
 8000a52:	d107      	bne.n	8000a64 <parse_string+0x80>
			{
				arg_tok[argc].start = i;
 8000a54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a5c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000a60:	f843 4032 	str.w	r4, [r3, r2, lsl #3]

			}

			if(*(cptr+1)==' '||i == (kstrlen((char*)s)-1)||*(cptr+1) == '\t')
 8000a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a68:	3301      	adds	r3, #1
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b20      	cmp	r3, #32
 8000a6e:	d010      	beq.n	8000a92 <parse_string+0xae>
 8000a70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a78:	6818      	ldr	r0, [r3, #0]
 8000a7a:	f7ff ffa0 	bl	80009be <kstrlen>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	3b01      	subs	r3, #1
 8000a82:	429c      	cmp	r4, r3
 8000a84:	d005      	beq.n	8000a92 <parse_string+0xae>
 8000a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b09      	cmp	r3, #9
 8000a90:	d10d      	bne.n	8000aae <parse_string+0xca>
			{
				arg_tok[argc].end = i;
 8000a92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a96:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8000a9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000a9e:	00db      	lsls	r3, r3, #3
 8000aa0:	4413      	add	r3, r2
 8000aa2:	605c      	str	r4, [r3, #4]
				argc++;
 8000aa4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	for(i = 0, cptr = s; i< kstrlen((char*)s);i++,cptr++)
 8000aae:	3401      	adds	r4, #1
 8000ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000aba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000abe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ac2:	6818      	ldr	r0, [r3, #0]
 8000ac4:	f7ff ff7b 	bl	80009be <kstrlen>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	429c      	cmp	r4, r3
 8000acc:	dbaa      	blt.n	8000a24 <parse_string+0x40>
			}
		}
	}

	if(!argv)
 8000ace:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ad2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <parse_string+0xfe>
		return(argc);
 8000adc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000ae0:	e02e      	b.n	8000b40 <parse_string+0x15c>

	for(i = 0; i<argc ; i++)
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	e026      	b.n	8000b34 <parse_string+0x150>
	{
		argv[i] = (char*)s + arg_tok[i].start;
 8000ae6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000aee:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
 8000af2:	4619      	mov	r1, r3
 8000af4:	4623      	mov	r3, r4
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000afc:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000b00:	6812      	ldr	r2, [r2, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b08:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000b0c:	6812      	ldr	r2, [r2, #0]
 8000b0e:	440a      	add	r2, r1
 8000b10:	601a      	str	r2, [r3, #0]
		*(s+arg_tok[i].end+1) = 0;
 8000b12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b16:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8000b1a:	00e3      	lsls	r3, r4, #3
 8000b1c:	4413      	add	r3, r2
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	3301      	adds	r3, #1
 8000b22:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b26:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000b2a:	6812      	ldr	r2, [r2, #0]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
	for(i = 0; i<argc ; i++)
 8000b32:	3401      	adds	r4, #1
 8000b34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000b38:	429c      	cmp	r4, r3
 8000b3a:	dbd4      	blt.n	8000ae6 <parse_string+0x102>
	}
	return(argc);
 8000b3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd90      	pop	{r4, r7, pc}
	...

08000b4c <onl_monitor>:

char tbuf[5],omon_buf[80];
int  onch_no = 0;

void onl_monitor(unsigned char c)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b09c      	sub	sp, #112	; 0x70
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
	Cmd_tbl *cmd_tblp;
	int i,argcl;
	char *argvl[20] = {0};
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	2250      	movs	r2, #80	; 0x50
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f006 f91c 	bl	8006d9c <memset>
	char tbuf[5];

	tbuf[1] = '\0';
 8000b64:	2300      	movs	r3, #0
 8000b66:	737b      	strb	r3, [r7, #13]
	if(c == '\r'|| c =='\a')
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	2b0d      	cmp	r3, #13
 8000b6c:	d002      	beq.n	8000b74 <onl_monitor+0x28>
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b07      	cmp	r3, #7
 8000b72:	d168      	bne.n	8000c46 <onl_monitor+0xfa>
	{
		if(onch_no == 0)
 8000b74:	4b4f      	ldr	r3, [pc, #316]	; (8000cb4 <onl_monitor+0x168>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d103      	bne.n	8000b84 <onl_monitor+0x38>
		{
			printf("\n\rARM> ");
 8000b7c:	484e      	ldr	r0, [pc, #312]	; (8000cb8 <onl_monitor+0x16c>)
 8000b7e:	f7ff fd11 	bl	80005a4 <SMprintf>
		if(onch_no == 0)
 8000b82:	e093      	b.n	8000cac <onl_monitor+0x160>
		}
		else
		{
			for(i=0; i<20; i++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	66bb      	str	r3, [r7, #104]	; 0x68
 8000b88:	e016      	b.n	8000bb8 <onl_monitor+0x6c>
			{
				if(omon_buf[i] == '\0')
 8000b8a:	4a4c      	ldr	r2, [pc, #304]	; (8000cbc <onl_monitor+0x170>)
 8000b8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b8e:	4413      	add	r3, r2
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d014      	beq.n	8000bc0 <onl_monitor+0x74>
				{
					break;
				}
				omon_buf[i] = ktolower(omon_buf[i]);
 8000b96:	4a49      	ldr	r2, [pc, #292]	; (8000cbc <onl_monitor+0x170>)
 8000b98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b9a:	4413      	add	r3, r2
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fd24 	bl	80005ec <ktolower>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4a44      	ldr	r2, [pc, #272]	; (8000cbc <onl_monitor+0x170>)
 8000baa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bac:	4413      	add	r3, r2
 8000bae:	460a      	mov	r2, r1
 8000bb0:	701a      	strb	r2, [r3, #0]
			for(i=0; i<20; i++)
 8000bb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8000bb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bba:	2b13      	cmp	r3, #19
 8000bbc:	dde5      	ble.n	8000b8a <onl_monitor+0x3e>
 8000bbe:	e000      	b.n	8000bc2 <onl_monitor+0x76>
					break;
 8000bc0:	bf00      	nop
			}

			argcl = parse_string((int8u*)omon_buf,argvl);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	483c      	ldr	r0, [pc, #240]	; (8000cbc <onl_monitor+0x170>)
 8000bca:	f7ff ff0b 	bl	80009e4 <parse_string>
 8000bce:	6678      	str	r0, [r7, #100]	; 0x64
			cmd_tblp = (Cmd_tbl*)cmd_ctbl;
 8000bd0:	4b3b      	ldr	r3, [pc, #236]	; (8000cc0 <onl_monitor+0x174>)
 8000bd2:	66fb      	str	r3, [r7, #108]	; 0x6c

			while(cmd_tblp->str)
 8000bd4:	e023      	b.n	8000c1e <onl_monitor+0xd2>
			{
				if(!kstrncmp(argvl[0],cmd_tblp->str,10))
 8000bd6:	6978      	ldr	r0, [r7, #20]
 8000bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	220a      	movs	r2, #10
 8000bde:	4619      	mov	r1, r3
 8000be0:	f7ff fd19 	bl	8000616 <kstrncmp>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d116      	bne.n	8000c18 <onl_monitor+0xcc>
				{
					printf("\n\r");
 8000bea:	4836      	ldr	r0, [pc, #216]	; (8000cc4 <onl_monitor+0x178>)
 8000bec:	f7ff fcda 	bl	80005a4 <SMprintf>
					(cmd_tblp->func)(argcl,argvl);
 8000bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f107 0214 	add.w	r2, r7, #20
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000bfc:	4798      	blx	r3
					if(cmd_tblp->func == bfm_msg_mon)
 8000bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	4a31      	ldr	r2, [pc, #196]	; (8000cc8 <onl_monitor+0x17c>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d103      	bne.n	8000c10 <onl_monitor+0xc4>
					{
						printf("\r\nBF loading...");
 8000c08:	4830      	ldr	r0, [pc, #192]	; (8000ccc <onl_monitor+0x180>)
 8000c0a:	f7ff fccb 	bl	80005a4 <SMprintf>
					}
					else
					{
						printf("\n\rARM> ");
					}
					break;
 8000c0e:	e00a      	b.n	8000c26 <onl_monitor+0xda>
						printf("\n\rARM> ");
 8000c10:	4829      	ldr	r0, [pc, #164]	; (8000cb8 <onl_monitor+0x16c>)
 8000c12:	f7ff fcc7 	bl	80005a4 <SMprintf>
					break;
 8000c16:	e006      	b.n	8000c26 <onl_monitor+0xda>
				}
				cmd_tblp++;
 8000c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c1a:	330c      	adds	r3, #12
 8000c1c:	66fb      	str	r3, [r7, #108]	; 0x6c
			while(cmd_tblp->str)
 8000c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1d7      	bne.n	8000bd6 <onl_monitor+0x8a>
			}
			if(!cmd_tblp->str)
 8000c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d102      	bne.n	8000c34 <onl_monitor+0xe8>
			{
				printf("\n\rARM> Command not found !!\n\r");
 8000c2e:	4828      	ldr	r0, [pc, #160]	; (8000cd0 <onl_monitor+0x184>)
 8000c30:	f7ff fcb8 	bl	80005a4 <SMprintf>
			}
			fill((int8u*)omon_buf,0,80);
 8000c34:	2250      	movs	r2, #80	; 0x50
 8000c36:	2100      	movs	r1, #0
 8000c38:	4820      	ldr	r0, [pc, #128]	; (8000cbc <onl_monitor+0x170>)
 8000c3a:	f7ff fea6 	bl	800098a <fill>
			onch_no = 0;
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <onl_monitor+0x168>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
		if(onch_no == 0)
 8000c44:	e032      	b.n	8000cac <onl_monitor+0x160>
	}



	else{
		if(c==0x8){
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2b08      	cmp	r3, #8
 8000c4a:	d11b      	bne.n	8000c84 <onl_monitor+0x138>
			if(onch_no>0){
 8000c4c:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <onl_monitor+0x168>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	dd2b      	ble.n	8000cac <onl_monitor+0x160>
				tbuf[0] = 0x8;
 8000c54:	2308      	movs	r3, #8
 8000c56:	733b      	strb	r3, [r7, #12]
				tbuf[1] = ' ';
 8000c58:	2320      	movs	r3, #32
 8000c5a:	737b      	strb	r3, [r7, #13]
				tbuf[2] = 0x8;
 8000c5c:	2308      	movs	r3, #8
 8000c5e:	73bb      	strb	r3, [r7, #14]
				tbuf[3] = '\0';
 8000c60:	2300      	movs	r3, #0
 8000c62:	73fb      	strb	r3, [r7, #15]
				printf((char*)tbuf);
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fc9b 	bl	80005a4 <SMprintf>
				onch_no--;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <onl_monitor+0x168>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	4a0f      	ldr	r2, [pc, #60]	; (8000cb4 <onl_monitor+0x168>)
 8000c76:	6013      	str	r3, [r2, #0]
				omon_buf[onch_no]='\0';
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <onl_monitor+0x168>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0f      	ldr	r2, [pc, #60]	; (8000cbc <onl_monitor+0x170>)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	54d1      	strb	r1, [r2, r3]
			printf((char*)tbuf);
			omon_buf[onch_no] = c;
			onch_no++;
		}
	}
}
 8000c82:	e013      	b.n	8000cac <onl_monitor+0x160>
			tbuf[0] = c;
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	733b      	strb	r3, [r7, #12]
			tbuf[1] = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	737b      	strb	r3, [r7, #13]
			printf((char*)tbuf);
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fc87 	bl	80005a4 <SMprintf>
			omon_buf[onch_no] = c;
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <onl_monitor+0x168>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4908      	ldr	r1, [pc, #32]	; (8000cbc <onl_monitor+0x170>)
 8000c9c:	79fa      	ldrb	r2, [r7, #7]
 8000c9e:	54ca      	strb	r2, [r1, r3]
			onch_no++;
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <onl_monitor+0x168>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	4a03      	ldr	r2, [pc, #12]	; (8000cb4 <onl_monitor+0x168>)
 8000ca8:	6013      	str	r3, [r2, #0]
}
 8000caa:	e7ff      	b.n	8000cac <onl_monitor+0x160>
 8000cac:	bf00      	nop
 8000cae:	3770      	adds	r7, #112	; 0x70
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200002e0 	.word	0x200002e0
 8000cb8:	080076d8 	.word	0x080076d8
 8000cbc:	20000290 	.word	0x20000290
 8000cc0:	08007a14 	.word	0x08007a14
 8000cc4:	080076e0 	.word	0x080076e0
 8000cc8:	08000759 	.word	0x08000759
 8000ccc:	080076e4 	.word	0x080076e4
 8000cd0:	080076f4 	.word	0x080076f4

08000cd4 <monitor_chelp>:

int monitor_chelp(int argc,char *argv[])
{
 8000cd4:	b5b0      	push	{r4, r5, r7, lr}
 8000cd6:	b098      	sub	sp, #96	; 0x60
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
	Cmd_tbl *cmd_tblp;
	char help_buf[80];

	printf("      [COMMAND HELP LIST]\n\r");
 8000cde:	4820      	ldr	r0, [pc, #128]	; (8000d60 <monitor_chelp+0x8c>)
 8000ce0:	f7ff fc60 	bl	80005a4 <SMprintf>
	printf("----------------------------------------------\n\r");
 8000ce4:	481f      	ldr	r0, [pc, #124]	; (8000d64 <monitor_chelp+0x90>)
 8000ce6:	f7ff fc5d 	bl	80005a4 <SMprintf>
	cmd_tblp = (Cmd_tbl*)cmd_ctbl;
 8000cea:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <monitor_chelp+0x94>)
 8000cec:	65fb      	str	r3, [r7, #92]	; 0x5c

	while(cmd_tblp->str){
 8000cee:	e02a      	b.n	8000d46 <monitor_chelp+0x72>
		strcpy(help_buf,"       :                            \n\r");
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	4a1d      	ldr	r2, [pc, #116]	; (8000d6c <monitor_chelp+0x98>)
 8000cf6:	461c      	mov	r4, r3
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d02:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d06:	6020      	str	r0, [r4, #0]
 8000d08:	3404      	adds	r4, #4
 8000d0a:	8021      	strh	r1, [r4, #0]
 8000d0c:	3402      	adds	r4, #2
 8000d0e:	0c0b      	lsrs	r3, r1, #16
 8000d10:	7023      	strb	r3, [r4, #0]
		cmdcpy((char*)&help_buf[1],(char*)cmd_tblp->str);
 8000d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fe1a 	bl	8000958 <cmdcpy>
		cmdcpy((char*)&help_buf[17],(char*)cmd_tblp->useage);
 8000d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	3311      	adds	r3, #17
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fe11 	bl	8000958 <cmdcpy>
		printf((char*)help_buf);
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fc32 	bl	80005a4 <SMprintf>
		cmd_tblp++;
 8000d40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d42:	330c      	adds	r3, #12
 8000d44:	65fb      	str	r3, [r7, #92]	; 0x5c
	while(cmd_tblp->str){
 8000d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d1d0      	bne.n	8000cf0 <monitor_chelp+0x1c>
	}
	printf((char*)"--------------------------------------------\n\r");
 8000d4e:	4808      	ldr	r0, [pc, #32]	; (8000d70 <monitor_chelp+0x9c>)
 8000d50:	f7ff fc28 	bl	80005a4 <SMprintf>
	return(YES);
 8000d54:	2301      	movs	r3, #1
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3760      	adds	r7, #96	; 0x60
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	08007714 	.word	0x08007714
 8000d64:	08007730 	.word	0x08007730
 8000d68:	08007a14 	.word	0x08007a14
 8000d6c:	08007764 	.word	0x08007764
 8000d70:	0800778c 	.word	0x0800778c

08000d74 <monitor_lshelp>:

int monitor_lshelp(int argc, char *argv[])
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b098      	sub	sp, #96	; 0x60
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
	Cmd_tbl *cmd_tblp;
	char help_buf[80], i = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	printf("       [MONITOR COMMAND LIST]\n\r");
 8000d84:	4820      	ldr	r0, [pc, #128]	; (8000e08 <monitor_lshelp+0x94>)
 8000d86:	f7ff fc0d 	bl	80005a4 <SMprintf>
	printf("----------------------------------------\n\r");
 8000d8a:	4820      	ldr	r0, [pc, #128]	; (8000e0c <monitor_lshelp+0x98>)
 8000d8c:	f7ff fc0a 	bl	80005a4 <SMprintf>
	cmd_tblp = (Cmd_tbl*)cmd_ctbl;
 8000d90:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <monitor_lshelp+0x9c>)
 8000d92:	65fb      	str	r3, [r7, #92]	; 0x5c

	while(cmd_tblp->str){
 8000d94:	e02b      	b.n	8000dee <monitor_lshelp+0x7a>
		strcpy(help_buf,"        ");
 8000d96:	f107 0308 	add.w	r3, r7, #8
 8000d9a:	4a1e      	ldr	r2, [pc, #120]	; (8000e14 <monitor_lshelp+0xa0>)
 8000d9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d9e:	c303      	stmia	r3!, {r0, r1}
 8000da0:	701a      	strb	r2, [r3, #0]
		cmdcpy((char*)&help_buf[1],(char*)cmd_tblp->str);
 8000da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	3301      	adds	r3, #1
 8000dac:	4611      	mov	r1, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fdd2 	bl	8000958 <cmdcpy>
		printf((char*)help_buf);
 8000db4:	f107 0308 	add.w	r3, r7, #8
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fbf3 	bl	80005a4 <SMprintf>
		i++,cmd_tblp++;
 8000dbe:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8000dc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dca:	330c      	adds	r3, #12
 8000dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
		if((i%0x5)==0){
 8000dce:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <monitor_lshelp+0xa4>)
 8000dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8000dd8:	0899      	lsrs	r1, r3, #2
 8000dda:	460b      	mov	r3, r1
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	440b      	add	r3, r1
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <monitor_lshelp+0x7a>
			printf("\r\n");
 8000de8:	480c      	ldr	r0, [pc, #48]	; (8000e1c <monitor_lshelp+0xa8>)
 8000dea:	f7ff fbdb 	bl	80005a4 <SMprintf>
	while(cmd_tblp->str){
 8000dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1cf      	bne.n	8000d96 <monitor_lshelp+0x22>
		}
	}
	printf((char*)"\r\n--------------------------------------------\n\r");
 8000df6:	480a      	ldr	r0, [pc, #40]	; (8000e20 <monitor_lshelp+0xac>)
 8000df8:	f7ff fbd4 	bl	80005a4 <SMprintf>
	return(YES);
 8000dfc:	2301      	movs	r3, #1
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3760      	adds	r7, #96	; 0x60
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	080077bc 	.word	0x080077bc
 8000e0c:	080077dc 	.word	0x080077dc
 8000e10:	08007a14 	.word	0x08007a14
 8000e14:	08007808 	.word	0x08007808
 8000e18:	cccccccd 	.word	0xcccccccd
 8000e1c:	08007814 	.word	0x08007814
 8000e20:	08007818 	.word	0x08007818

08000e24 <prt_hexbnb>:

void prt_hexbnb(int n, int8u *hex)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b090      	sub	sp, #64	; 0x40
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
	byte buf[50],c,i;

	i = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	while(n--)
 8000e34:	e047      	b.n	8000ec6 <prt_hexbnb+0xa2>
	{
		c = *hex / 16;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	091b      	lsrs	r3, r3, #4
 8000e3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(c > 9)
 8000e40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e44:	2b09      	cmp	r3, #9
 8000e46:	d904      	bls.n	8000e52 <prt_hexbnb+0x2e>
		{
			c +=7;
 8000e48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e4c:	3307      	adds	r3, #7
 8000e4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
		buf[i++] = c + '0';
 8000e52:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000e56:	1c5a      	adds	r2, r3, #1
 8000e58:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e62:	3330      	adds	r3, #48	; 0x30
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8000e6a:	443b      	add	r3, r7
 8000e6c:	f803 2c34 	strb.w	r2, [r3, #-52]
		c = (*hex & 0xf);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	f003 030f 	and.w	r3, r3, #15
 8000e78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(c>9)
 8000e7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e80:	2b09      	cmp	r3, #9
 8000e82:	d904      	bls.n	8000e8e <prt_hexbnb+0x6a>
		{
			c+=7;
 8000e84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e88:	3307      	adds	r3, #7
 8000e8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
		buf[i++] = c+'0';
 8000e8e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000e92:	1c5a      	adds	r2, r3, #1
 8000e94:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e9e:	3330      	adds	r3, #48	; 0x30
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8000ea6:	443b      	add	r3, r7
 8000ea8:	f803 2c34 	strb.w	r2, [r3, #-52]
		buf[i++]=' ';
 8000eac:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000eb0:	1c5a      	adds	r2, r3, #1
 8000eb2:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8000eb6:	3340      	adds	r3, #64	; 0x40
 8000eb8:	443b      	add	r3, r7
 8000eba:	2220      	movs	r2, #32
 8000ebc:	f803 2c34 	strb.w	r2, [r3, #-52]
		hex++;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	603b      	str	r3, [r7, #0]
	while(n--)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	1e5a      	subs	r2, r3, #1
 8000eca:	607a      	str	r2, [r7, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1b2      	bne.n	8000e36 <prt_hexbnb+0x12>
	}
	buf[i++] = ' ';
 8000ed0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8000eda:	3340      	adds	r3, #64	; 0x40
 8000edc:	443b      	add	r3, r7
 8000ede:	2220      	movs	r2, #32
 8000ee0:	f803 2c34 	strb.w	r2, [r3, #-52]
	buf[i] = '\0';
 8000ee4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000ee8:	3340      	adds	r3, #64	; 0x40
 8000eea:	443b      	add	r3, r7
 8000eec:	2200      	movs	r2, #0
 8000eee:	f803 2c34 	strb.w	r2, [r3, #-52]
	printf((char*)buf);
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fb54 	bl	80005a4 <SMprintf>
}
 8000efc:	bf00      	nop
 8000efe:	3740      	adds	r7, #64	; 0x40
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <dsp_mem>:
		{"dm", dsp_mem, "Display Memory"},
		{"cm", chg_mem, "Change Memory"}
};

int dsp_mem(int argc,char*argv[])
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08e      	sub	sp, #56	; 0x38
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
	int8u tbuf[17];
	int8u *ST,*AT;
	char flag;
	int i,j;
	unsigned int start;
	flag = 1;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(argc==1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d105      	bne.n	8000f26 <dsp_mem+0x22>
	{
		printf("address error!\r\n");
 8000f1a:	483a      	ldr	r0, [pc, #232]	; (8001004 <dsp_mem+0x100>)
 8000f1c:	f7ff fb42 	bl	80005a4 <SMprintf>
		flag = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}
	if(flag == 1)
 8000f26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d162      	bne.n	8000ff4 <dsp_mem+0xf0>
	{
		start = atoh(argv[1]);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	3304      	adds	r3, #4
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fb9c 	bl	8000672 <atoh>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	623b      	str	r3, [r7, #32]
		if(start >0xffffffff)
		{
			printf("address error!!!!!\r\n");
			return(1);
		}
		tbuf[16] = '\0';
 8000f3e:	2300      	movs	r3, #0
 8000f40:	773b      	strb	r3, [r7, #28]
		printf("\r\n\n");
 8000f42:	4831      	ldr	r0, [pc, #196]	; (8001008 <dsp_mem+0x104>)
 8000f44:	f7ff fb2e 	bl	80005a4 <SMprintf>
		printf("Address 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\r\n");
 8000f48:	4830      	ldr	r0, [pc, #192]	; (800100c <dsp_mem+0x108>)
 8000f4a:	f7ff fb2b 	bl	80005a4 <SMprintf>
		printf("====== ================== ==================== \r");
 8000f4e:	4830      	ldr	r0, [pc, #192]	; (8001010 <dsp_mem+0x10c>)
 8000f50:	f7ff fb28 	bl	80005a4 <SMprintf>
		AT = ST = (int8u*)start;
 8000f54:	6a3b      	ldr	r3, [r7, #32]
 8000f56:	637b      	str	r3, [r7, #52]	; 0x34
 8000f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f5a:	633b      	str	r3, [r7, #48]	; 0x30
		for( j =0 ; j <16 ; j++)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f60:	e045      	b.n	8000fee <dsp_mem+0xea>
		{
			printf("\r\n%08x ",start);
 8000f62:	6a39      	ldr	r1, [r7, #32]
 8000f64:	482b      	ldr	r0, [pc, #172]	; (8001014 <dsp_mem+0x110>)
 8000f66:	f7ff fb1d 	bl	80005a4 <SMprintf>
			prt_hexbnb(8,ST);
 8000f6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000f6c:	2008      	movs	r0, #8
 8000f6e:	f7ff ff59 	bl	8000e24 <prt_hexbnb>
			printf("- ");
 8000f72:	4829      	ldr	r0, [pc, #164]	; (8001018 <dsp_mem+0x114>)
 8000f74:	f7ff fb16 	bl	80005a4 <SMprintf>
			ST+=8;
 8000f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f7a:	3308      	adds	r3, #8
 8000f7c:	637b      	str	r3, [r7, #52]	; 0x34
			prt_hexbnb(8,ST);
 8000f7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000f80:	2008      	movs	r0, #8
 8000f82:	f7ff ff4f 	bl	8000e24 <prt_hexbnb>
			ST+=8;
 8000f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f88:	3308      	adds	r3, #8
 8000f8a:	637b      	str	r3, [r7, #52]	; 0x34
			for(i=0;i<16;i++)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f90:	e01c      	b.n	8000fcc <dsp_mem+0xc8>
			{
				if(*AT>=0x20 && *AT<0x7f)
 8000f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b1f      	cmp	r3, #31
 8000f98:	d90c      	bls.n	8000fb4 <dsp_mem+0xb0>
 8000f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b7e      	cmp	r3, #126	; 0x7e
 8000fa0:	d808      	bhi.n	8000fb4 <dsp_mem+0xb0>
				{
					tbuf[i] = *AT;
 8000fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa4:	7819      	ldrb	r1, [r3, #0]
 8000fa6:	f107 020c 	add.w	r2, r7, #12
 8000faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fac:	4413      	add	r3, r2
 8000fae:	460a      	mov	r2, r1
 8000fb0:	701a      	strb	r2, [r3, #0]
 8000fb2:	e005      	b.n	8000fc0 <dsp_mem+0xbc>
				}
				else
				{
					tbuf[i] = '.';
 8000fb4:	f107 020c 	add.w	r2, r7, #12
 8000fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fba:	4413      	add	r3, r2
 8000fbc:	222e      	movs	r2, #46	; 0x2e
 8000fbe:	701a      	strb	r2, [r3, #0]
				}
				AT++;
 8000fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	633b      	str	r3, [r7, #48]	; 0x30
			for(i=0;i<16;i++)
 8000fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc8:	3301      	adds	r3, #1
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fce:	2b0f      	cmp	r3, #15
 8000fd0:	dddf      	ble.n	8000f92 <dsp_mem+0x8e>
			}
			printf(" |");
 8000fd2:	4812      	ldr	r0, [pc, #72]	; (800101c <dsp_mem+0x118>)
 8000fd4:	f7ff fae6 	bl	80005a4 <SMprintf>
			printf((char*)tbuf);
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fae1 	bl	80005a4 <SMprintf>
			start +=16;
 8000fe2:	6a3b      	ldr	r3, [r7, #32]
 8000fe4:	3310      	adds	r3, #16
 8000fe6:	623b      	str	r3, [r7, #32]
		for( j =0 ; j <16 ; j++)
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fea:	3301      	adds	r3, #1
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	2b0f      	cmp	r3, #15
 8000ff2:	ddb6      	ble.n	8000f62 <dsp_mem+0x5e>

		}
	}
	printf("\r\n\n*");
 8000ff4:	480a      	ldr	r0, [pc, #40]	; (8001020 <dsp_mem+0x11c>)
 8000ff6:	f7ff fad5 	bl	80005a4 <SMprintf>
	return(1);
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3738      	adds	r7, #56	; 0x38
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	080078a0 	.word	0x080078a0
 8001008:	080078b4 	.word	0x080078b4
 800100c:	080078b8 	.word	0x080078b8
 8001010:	080078f4 	.word	0x080078f4
 8001014:	08007928 	.word	0x08007928
 8001018:	08007930 	.word	0x08007930
 800101c:	08007934 	.word	0x08007934
 8001020:	08007938 	.word	0x08007938

08001024 <chg_mem>:

int chg_mem(int argc,char *argv[])
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	int8u *ST;
	char flag,ret;
	u32 start;
	unsigned int data;

	flag = 1;
 800102e:	2301      	movs	r3, #1
 8001030:	74fb      	strb	r3, [r7, #19]

	if(argc == 1){
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d11e      	bne.n	8001076 <chg_mem+0x52>
		printf("Address: ");
 8001038:	4846      	ldr	r0, [pc, #280]	; (8001154 <chg_mem+0x130>)
 800103a:	f7ff fab3 	bl	80005a4 <SMprintf>
		start = atoh(argv[1]);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	3304      	adds	r3, #4
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fb14 	bl	8000672 <atoh>
 800104a:	4603      	mov	r3, r0
 800104c:	60fb      	str	r3, [r7, #12]
		ret = get_io_number(&start);
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fc10 	bl	8000878 <get_io_number>
 8001058:	4603      	mov	r3, r0
 800105a:	74bb      	strb	r3, [r7, #18]
		if((ret !='\n')||(start == 0xffffffff))
 800105c:	7cbb      	ldrb	r3, [r7, #18]
 800105e:	2b0a      	cmp	r3, #10
 8001060:	d103      	bne.n	800106a <chg_mem+0x46>
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d11a      	bne.n	80010a0 <chg_mem+0x7c>
		{
			printf("address error!\r\n");
 800106a:	483b      	ldr	r0, [pc, #236]	; (8001158 <chg_mem+0x134>)
 800106c:	f7ff fa9a 	bl	80005a4 <SMprintf>
			flag = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	74fb      	strb	r3, [r7, #19]
 8001074:	e014      	b.n	80010a0 <chg_mem+0x7c>
		}
	}
	else{
		start = atoh(argv[1]);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	3304      	adds	r3, #4
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff faf8 	bl	8000672 <atoh>
 8001082:	4603      	mov	r3, r0
 8001084:	60fb      	str	r3, [r7, #12]
		if(!((start>=0x20010000)&&(start<=0x200bffff)))
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4a34      	ldr	r2, [pc, #208]	; (800115c <chg_mem+0x138>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d903      	bls.n	8001096 <chg_mem+0x72>
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4a33      	ldr	r2, [pc, #204]	; (8001160 <chg_mem+0x13c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d904      	bls.n	80010a0 <chg_mem+0x7c>
		{
			printf("address error!\r\n");
 8001096:	4830      	ldr	r0, [pc, #192]	; (8001158 <chg_mem+0x134>)
 8001098:	f7ff fa84 	bl	80005a4 <SMprintf>
			return YES;
 800109c:	2301      	movs	r3, #1
 800109e:	e055      	b.n	800114c <chg_mem+0x128>
		}
	}
	if(flag ==1)
 80010a0:	7cfb      	ldrb	r3, [r7, #19]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d151      	bne.n	800114a <chg_mem+0x126>
	{
		ST = (int8u*)start;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	617b      	str	r3, [r7, #20]
		printf("\r");
 80010aa:	482e      	ldr	r0, [pc, #184]	; (8001164 <chg_mem+0x140>)
 80010ac:	f7ff fa7a 	bl	80005a4 <SMprintf>
		while(1)
		{
			printf("\r\n%08x %02x - ",start,*ST);
 80010b0:	68f9      	ldr	r1, [r7, #12]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	482b      	ldr	r0, [pc, #172]	; (8001168 <chg_mem+0x144>)
 80010ba:	f7ff fa73 	bl	80005a4 <SMprintf>
			ret = get_io_number(&data);
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fbd8 	bl	8000878 <get_io_number>
 80010c8:	4603      	mov	r3, r0
 80010ca:	74bb      	strb	r3, [r7, #18]
			if(ret == '/')
 80010cc:	7cbb      	ldrb	r3, [r7, #18]
 80010ce:	2b2f      	cmp	r3, #47	; 0x2f
 80010d0:	d103      	bne.n	80010da <chg_mem+0xb6>
			{
				printf("\r\n\n");
 80010d2:	4826      	ldr	r0, [pc, #152]	; (800116c <chg_mem+0x148>)
 80010d4:	f7ff fa66 	bl	80005a4 <SMprintf>
				break;
 80010d8:	e037      	b.n	800114a <chg_mem+0x126>
			}
			else if((ret==']')||(ret==0x1a))
 80010da:	7cbb      	ldrb	r3, [r7, #18]
 80010dc:	2b5d      	cmp	r3, #93	; 0x5d
 80010de:	d002      	beq.n	80010e6 <chg_mem+0xc2>
 80010e0:	7cbb      	ldrb	r3, [r7, #18]
 80010e2:	2b1a      	cmp	r3, #26
 80010e4:	d106      	bne.n	80010f4 <chg_mem+0xd0>
			{
				start--;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
				ST--;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
				continue;
 80010f2:	e029      	b.n	8001148 <chg_mem+0x124>
			}
			else if(ret=='.')
 80010f4:	7cbb      	ldrb	r3, [r7, #18]
 80010f6:	2b2e      	cmp	r3, #46	; 0x2e
 80010f8:	d025      	beq.n	8001146 <chg_mem+0x122>
			{
				continue;
			}
			else if(ret == 0)
 80010fa:	7cbb      	ldrb	r3, [r7, #18]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d106      	bne.n	800110e <chg_mem+0xea>
			{
				start++;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	3301      	adds	r3, #1
 8001104:	60fb      	str	r3, [r7, #12]
				ST++;
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	3301      	adds	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	e7d0      	b.n	80010b0 <chg_mem+0x8c>
			}
			else if(ret == '\n')
 800110e:	7cbb      	ldrb	r3, [r7, #18]
 8001110:	2b0a      	cmp	r3, #10
 8001112:	d10a      	bne.n	800112a <chg_mem+0x106>
			{
				*ST = data;
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	b2da      	uxtb	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	701a      	strb	r2, [r3, #0]
				start++;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	3301      	adds	r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
				ST++;
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3301      	adds	r3, #1
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	e7c2      	b.n	80010b0 <chg_mem+0x8c>
			}
			else if(data > 0xff)
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	2bff      	cmp	r3, #255	; 0xff
 800112e:	d903      	bls.n	8001138 <chg_mem+0x114>
			{
				printf("\r\nDATA Input error!\r\n");
 8001130:	480f      	ldr	r0, [pc, #60]	; (8001170 <chg_mem+0x14c>)
 8001132:	f7ff fa37 	bl	80005a4 <SMprintf>
 8001136:	e7bb      	b.n	80010b0 <chg_mem+0x8c>
			}
			else
			{
				start++;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	3301      	adds	r3, #1
 800113c:	60fb      	str	r3, [r7, #12]
				ST++;
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	3301      	adds	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	e7b4      	b.n	80010b0 <chg_mem+0x8c>
				continue;
 8001146:	bf00      	nop
			printf("\r\n%08x %02x - ",start,*ST);
 8001148:	e7b2      	b.n	80010b0 <chg_mem+0x8c>
			}
		}

	}
	return(1);
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	08007940 	.word	0x08007940
 8001158:	080078a0 	.word	0x080078a0
 800115c:	2000ffff 	.word	0x2000ffff
 8001160:	200bffff 	.word	0x200bffff
 8001164:	0800794c 	.word	0x0800794c
 8001168:	08007950 	.word	0x08007950
 800116c:	080078b4 	.word	0x080078b4
 8001170:	08007960 	.word	0x08007960

08001174 <Uart3_EnQueue>:
uint16_t u3_rx_buffer[U3_BUFFER_SIZE];
uint32_t u3_rx_point_head = 0;
uint32_t u3_rx_point_tail = 0;

void Uart3_EnQueue(uint16_t data)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	80fb      	strh	r3, [r7, #6]
	u3_rx_buffer[u3_rx_point_head] = data;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <Uart3_EnQueue+0x24>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4906      	ldr	r1, [pc, #24]	; (800119c <Uart3_EnQueue+0x28>)
 8001184:	88fa      	ldrh	r2, [r7, #6]
 8001186:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	u3_increase_point_value(&u3_rx_point_head);
 800118a:	4803      	ldr	r0, [pc, #12]	; (8001198 <Uart3_EnQueue+0x24>)
 800118c:	f000 f808 	bl	80011a0 <u3_increase_point_value>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	200003ac 	.word	0x200003ac
 800119c:	200002e4 	.word	0x200002e4

080011a0 <u3_increase_point_value>:


void u3_increase_point_value(uint32_t * data_p)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	(*data_p)++;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	1c5a      	adds	r2, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	601a      	str	r2, [r3, #0]
	if(U3_BUFFER_SIZE == (*data_p))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b64      	cmp	r3, #100	; 0x64
 80011b8:	d102      	bne.n	80011c0 <u3_increase_point_value+0x20>
	{
		(*data_p)=0;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
	}
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <Uart3_DeQueue>:


uint16_t Uart3_DeQueue(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
	uint16_t retVal = u3_rx_buffer[u3_rx_point_tail];
 80011d2:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <Uart3_DeQueue+0x24>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <Uart3_DeQueue+0x28>)
 80011d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011dc:	80fb      	strh	r3, [r7, #6]
	u3_increase_point_value(&u3_rx_point_tail);
 80011de:	4804      	ldr	r0, [pc, #16]	; (80011f0 <Uart3_DeQueue+0x24>)
 80011e0:	f7ff ffde 	bl	80011a0 <u3_increase_point_value>
	return retVal;
 80011e4:	88fb      	ldrh	r3, [r7, #6]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200003b0 	.word	0x200003b0
 80011f4:	200002e4 	.word	0x200002e4

080011f8 <Uart3_Is_Empty>:

bool Uart3_Is_Empty(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
	if(u3_rx_point_head == u3_rx_point_tail)
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <Uart3_Is_Empty+0x20>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <Uart3_Is_Empty+0x24>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d101      	bne.n	800120c <Uart3_Is_Empty+0x14>
	{
		return TURE;
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <Uart3_Is_Empty+0x16>
	}
	return FALSE;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	200003ac 	.word	0x200003ac
 800121c:	200003b0 	.word	0x200003b0

08001220 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4a07      	ldr	r2, [pc, #28]	; (800124c <vApplicationGetIdleTaskMemory+0x2c>)
 8001230:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	4a06      	ldr	r2, [pc, #24]	; (8001250 <vApplicationGetIdleTaskMemory+0x30>)
 8001236:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2280      	movs	r2, #128	; 0x80
 800123c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	200003b4 	.word	0x200003b4
 8001250:	20000408 	.word	0x20000408

08001254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001254:	b5b0      	push	{r4, r5, r7, lr}
 8001256:	b096      	sub	sp, #88	; 0x58
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125a:	f000 fd7f 	bl	8001d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800125e:	f000 f863 	bl	8001328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001262:	f000 f999 	bl	8001598 <MX_GPIO_Init>
  MX_ETH_Init();
 8001266:	f000 f8cb 	bl	8001400 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800126a:	f000 f93d 	bl	80014e8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800126e:	f000 f965 	bl	800153c <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 8001272:	f000 f913 	bl	800149c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 8001276:	4b25      	ldr	r3, [pc, #148]	; (800130c <main+0xb8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68da      	ldr	r2, [r3, #12]
 800127c:	4b23      	ldr	r3, [pc, #140]	; (800130c <main+0xb8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f042 0220 	orr.w	r2, r2, #32
 8001284:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart3,UART_IT_TC);
 8001286:	4b21      	ldr	r3, [pc, #132]	; (800130c <main+0xb8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <main+0xb8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001294:	60da      	str	r2, [r3, #12]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001296:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <main+0xbc>)
 8001298:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800129c:	461d      	mov	r5, r3
 800129e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80012aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f004 fb0c 	bl	80058ce <osThreadCreate>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4a16      	ldr	r2, [pc, #88]	; (8001314 <main+0xc0>)
 80012ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 256);
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <main+0xc4>)
 80012be:	f107 0420 	add.w	r4, r7, #32
 80012c2:	461d      	mov	r5, r3
 80012c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80012d0:	f107 0320 	add.w	r3, r7, #32
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f004 faf9 	bl	80058ce <osThreadCreate>
 80012dc:	4603      	mov	r3, r0
 80012de:	4a0f      	ldr	r2, [pc, #60]	; (800131c <main+0xc8>)
 80012e0:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 256);
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <main+0xcc>)
 80012e4:	1d3c      	adds	r4, r7, #4
 80012e6:	461d      	mov	r5, r3
 80012e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f004 fae8 	bl	80058ce <osThreadCreate>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a08      	ldr	r2, [pc, #32]	; (8001324 <main+0xd0>)
 8001302:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001304:	f004 fadc 	bl	80058c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001308:	e7fe      	b.n	8001308 <main+0xb4>
 800130a:	bf00      	nop
 800130c:	20000850 	.word	0x20000850
 8001310:	0800799c 	.word	0x0800799c
 8001314:	20000da0 	.word	0x20000da0
 8001318:	080079b8 	.word	0x080079b8
 800131c:	20000da4 	.word	0x20000da4
 8001320:	080079d4 	.word	0x080079d4
 8001324:	20000da8 	.word	0x20000da8

08001328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b094      	sub	sp, #80	; 0x50
 800132c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132e:	f107 0320 	add.w	r3, r7, #32
 8001332:	2230      	movs	r2, #48	; 0x30
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f005 fd30 	bl	8006d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800134c:	2300      	movs	r3, #0
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	4b29      	ldr	r3, [pc, #164]	; (80013f8 <SystemClock_Config+0xd0>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	4a28      	ldr	r2, [pc, #160]	; (80013f8 <SystemClock_Config+0xd0>)
 8001356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135a:	6413      	str	r3, [r2, #64]	; 0x40
 800135c:	4b26      	ldr	r3, [pc, #152]	; (80013f8 <SystemClock_Config+0xd0>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	4b23      	ldr	r3, [pc, #140]	; (80013fc <SystemClock_Config+0xd4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a22      	ldr	r2, [pc, #136]	; (80013fc <SystemClock_Config+0xd4>)
 8001372:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b20      	ldr	r3, [pc, #128]	; (80013fc <SystemClock_Config+0xd4>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001384:	2305      	movs	r3, #5
 8001386:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001388:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800138e:	2301      	movs	r3, #1
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001392:	2302      	movs	r3, #2
 8001394:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001396:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800139a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800139c:	2304      	movs	r3, #4
 800139e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013a0:	23a8      	movs	r3, #168	; 0xa8
 80013a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013a4:	2302      	movs	r3, #2
 80013a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013a8:	2307      	movs	r3, #7
 80013aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ac:	f107 0320 	add.w	r3, r7, #32
 80013b0:	4618      	mov	r0, r3
 80013b2:	f001 fcb7 	bl	8002d24 <HAL_RCC_OscConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013bc:	f000 fa0a 	bl	80017d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c0:	230f      	movs	r3, #15
 80013c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c4:	2302      	movs	r3, #2
 80013c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	2105      	movs	r1, #5
 80013de:	4618      	mov	r0, r3
 80013e0:	f001 ff18 	bl	8003214 <HAL_RCC_ClockConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80013ea:	f000 f9f3 	bl	80017d4 <Error_Handler>
  }
}
 80013ee:	bf00      	nop
 80013f0:	3750      	adds	r7, #80	; 0x50
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40007000 	.word	0x40007000

08001400 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001404:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <MX_ETH_Init+0x84>)
 8001406:	4a20      	ldr	r2, [pc, #128]	; (8001488 <MX_ETH_Init+0x88>)
 8001408:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800140a:	4b20      	ldr	r3, [pc, #128]	; (800148c <MX_ETH_Init+0x8c>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001410:	4b1e      	ldr	r3, [pc, #120]	; (800148c <MX_ETH_Init+0x8c>)
 8001412:	2280      	movs	r2, #128	; 0x80
 8001414:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001416:	4b1d      	ldr	r3, [pc, #116]	; (800148c <MX_ETH_Init+0x8c>)
 8001418:	22e1      	movs	r2, #225	; 0xe1
 800141a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800141c:	4b1b      	ldr	r3, [pc, #108]	; (800148c <MX_ETH_Init+0x8c>)
 800141e:	2200      	movs	r2, #0
 8001420:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <MX_ETH_Init+0x8c>)
 8001424:	2200      	movs	r2, #0
 8001426:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001428:	4b18      	ldr	r3, [pc, #96]	; (800148c <MX_ETH_Init+0x8c>)
 800142a:	2200      	movs	r2, #0
 800142c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <MX_ETH_Init+0x84>)
 8001430:	4a16      	ldr	r2, [pc, #88]	; (800148c <MX_ETH_Init+0x8c>)
 8001432:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001434:	4b13      	ldr	r3, [pc, #76]	; (8001484 <MX_ETH_Init+0x84>)
 8001436:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800143a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_ETH_Init+0x84>)
 800143e:	4a14      	ldr	r2, [pc, #80]	; (8001490 <MX_ETH_Init+0x90>)
 8001440:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <MX_ETH_Init+0x84>)
 8001444:	4a13      	ldr	r2, [pc, #76]	; (8001494 <MX_ETH_Init+0x94>)
 8001446:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001448:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_ETH_Init+0x84>)
 800144a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800144e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <MX_ETH_Init+0x84>)
 8001452:	f000 fe5d 	bl	8002110 <HAL_ETH_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800145c:	f000 f9ba 	bl	80017d4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001460:	2238      	movs	r2, #56	; 0x38
 8001462:	2100      	movs	r1, #0
 8001464:	480c      	ldr	r0, [pc, #48]	; (8001498 <MX_ETH_Init+0x98>)
 8001466:	f005 fc99 	bl	8006d9c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MX_ETH_Init+0x98>)
 800146c:	2221      	movs	r2, #33	; 0x21
 800146e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_ETH_Init+0x98>)
 8001472:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001476:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <MX_ETH_Init+0x98>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000780 	.word	0x20000780
 8001488:	40028000 	.word	0x40028000
 800148c:	20000db0 	.word	0x20000db0
 8001490:	200006e0 	.word	0x200006e0
 8001494:	20000640 	.word	0x20000640
 8001498:	20000608 	.word	0x20000608

0800149c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <MX_RTC_Init+0x44>)
 80014a2:	4a10      	ldr	r2, [pc, #64]	; (80014e4 <MX_RTC_Init+0x48>)
 80014a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <MX_RTC_Init+0x44>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <MX_RTC_Init+0x44>)
 80014ae:	227f      	movs	r2, #127	; 0x7f
 80014b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <MX_RTC_Init+0x44>)
 80014b4:	22ff      	movs	r2, #255	; 0xff
 80014b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <MX_RTC_Init+0x44>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <MX_RTC_Init+0x44>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <MX_RTC_Init+0x44>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_RTC_Init+0x44>)
 80014cc:	f002 fab4 	bl	8003a38 <HAL_RTC_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80014d6:	f000 f97d 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000830 	.word	0x20000830
 80014e4:	40002800 	.word	0x40002800

080014e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_USART3_UART_Init+0x4c>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	; (8001538 <MX_USART3_UART_Init+0x50>)
 80014f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <MX_USART3_UART_Init+0x4c>)
 80014f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_USART3_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_USART3_UART_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_USART3_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_USART3_UART_Init+0x4c>)
 800150e:	220c      	movs	r2, #12
 8001510:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_USART3_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_USART3_UART_Init+0x4c>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_USART3_UART_Init+0x4c>)
 8001520:	f002 fe32 	bl	8004188 <HAL_UART_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800152a:	f000 f953 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000850 	.word	0x20000850
 8001538:	40004800 	.word	0x40004800

0800153c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001540:	4b14      	ldr	r3, [pc, #80]	; (8001594 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001542:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001546:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800154a:	2204      	movs	r2, #4
 800154c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001550:	2202      	movs	r2, #2
 8001552:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800155c:	2202      	movs	r2, #2
 800155e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001562:	2201      	movs	r2, #1
 8001564:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800156e:	2200      	movs	r2, #0
 8001570:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001574:	2201      	movs	r2, #1
 8001576:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800157a:	2200      	movs	r2, #0
 800157c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001580:	f001 fab3 	bl	8002aea <HAL_PCD_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800158a:	f000 f923 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000894 	.word	0x20000894

08001598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08c      	sub	sp, #48	; 0x30
 800159c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
 80015b2:	4b4c      	ldr	r3, [pc, #304]	; (80016e4 <MX_GPIO_Init+0x14c>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a4b      	ldr	r2, [pc, #300]	; (80016e4 <MX_GPIO_Init+0x14c>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b49      	ldr	r3, [pc, #292]	; (80016e4 <MX_GPIO_Init+0x14c>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	61bb      	str	r3, [r7, #24]
 80015c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	4b45      	ldr	r3, [pc, #276]	; (80016e4 <MX_GPIO_Init+0x14c>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a44      	ldr	r2, [pc, #272]	; (80016e4 <MX_GPIO_Init+0x14c>)
 80015d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b42      	ldr	r3, [pc, #264]	; (80016e4 <MX_GPIO_Init+0x14c>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b3e      	ldr	r3, [pc, #248]	; (80016e4 <MX_GPIO_Init+0x14c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a3d      	ldr	r2, [pc, #244]	; (80016e4 <MX_GPIO_Init+0x14c>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b3b      	ldr	r3, [pc, #236]	; (80016e4 <MX_GPIO_Init+0x14c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b37      	ldr	r3, [pc, #220]	; (80016e4 <MX_GPIO_Init+0x14c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a36      	ldr	r2, [pc, #216]	; (80016e4 <MX_GPIO_Init+0x14c>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <MX_GPIO_Init+0x14c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <MX_GPIO_Init+0x14c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a2f      	ldr	r2, [pc, #188]	; (80016e4 <MX_GPIO_Init+0x14c>)
 8001628:	f043 0308 	orr.w	r3, r3, #8
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <MX_GPIO_Init+0x14c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <MX_GPIO_Init+0x14c>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a28      	ldr	r2, [pc, #160]	; (80016e4 <MX_GPIO_Init+0x14c>)
 8001644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <MX_GPIO_Init+0x14c>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	f244 0181 	movw	r1, #16513	; 0x4081
 800165c:	4822      	ldr	r0, [pc, #136]	; (80016e8 <MX_GPIO_Init+0x150>)
 800165e:	f001 fa2b 	bl	8002ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	2140      	movs	r1, #64	; 0x40
 8001666:	4821      	ldr	r0, [pc, #132]	; (80016ec <MX_GPIO_Init+0x154>)
 8001668:	f001 fa26 	bl	8002ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800166c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001672:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	4619      	mov	r1, r3
 8001682:	481b      	ldr	r0, [pc, #108]	; (80016f0 <MX_GPIO_Init+0x158>)
 8001684:	f001 f86c 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001688:	f244 0381 	movw	r3, #16513	; 0x4081
 800168c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168e:	2301      	movs	r3, #1
 8001690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	4619      	mov	r1, r3
 80016a0:	4811      	ldr	r0, [pc, #68]	; (80016e8 <MX_GPIO_Init+0x150>)
 80016a2:	f001 f85d 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80016a6:	2340      	movs	r3, #64	; 0x40
 80016a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	480b      	ldr	r0, [pc, #44]	; (80016ec <MX_GPIO_Init+0x154>)
 80016be:	f001 f84f 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	4619      	mov	r1, r3
 80016d4:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_GPIO_Init+0x154>)
 80016d6:	f001 f843 	bl	8002760 <HAL_GPIO_Init>

}
 80016da:	bf00      	nop
 80016dc:	3730      	adds	r7, #48	; 0x30
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020400 	.word	0x40020400
 80016ec:	40021800 	.word	0x40021800
 80016f0:	40020800 	.word	0x40020800

080016f4 <UART_Interrupt_Processing>:

/* USER CODE BEGIN 4 */
void UART_Interrupt_Processing(UART_HandleTypeDef *huart)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart3.Instance)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <UART_Interrupt_Processing+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d110      	bne.n	800172a <UART_Interrupt_Processing+0x36>
	{
		if(HAL_UART_Receive_IT(&huart3, Receive_Buffer, 1)==HAL_OK)
 8001708:	2201      	movs	r2, #1
 800170a:	490b      	ldr	r1, [pc, #44]	; (8001738 <UART_Interrupt_Processing+0x44>)
 800170c:	4809      	ldr	r0, [pc, #36]	; (8001734 <UART_Interrupt_Processing+0x40>)
 800170e:	f002 fe1a 	bl	8004346 <HAL_UART_Receive_IT>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d108      	bne.n	800172a <UART_Interrupt_Processing+0x36>
		{
			RxFlag = 1;
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <UART_Interrupt_Processing+0x48>)
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
			Uart3_EnQueue(Receive_Buffer[0]);
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <UART_Interrupt_Processing+0x44>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	b29b      	uxth	r3, r3
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fd25 	bl	8001174 <Uart3_EnQueue>
		}
	}
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000850 	.word	0x20000850
 8001738:	20000dac 	.word	0x20000dac
 800173c:	20000dad 	.word	0x20000dad

08001740 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001748:	2001      	movs	r0, #1
 800174a:	f004 f90c 	bl	8005966 <osDelay>
 800174e:	e7fb      	b.n	8001748 <StartDefaultTask+0x8>

08001750 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */

	printf("\n\rATM Monitor\n\n\r");
 8001758:	480e      	ldr	r0, [pc, #56]	; (8001794 <StartTask02+0x44>)
 800175a:	f7fe ff23 	bl	80005a4 <SMprintf>
	printf("\n\rARM> ");
 800175e:	480e      	ldr	r0, [pc, #56]	; (8001798 <StartTask02+0x48>)
 8001760:	f7fe ff20 	bl	80005a4 <SMprintf>

  for(;;)
  {
	  if(!Uart3_Is_Empty())
 8001764:	f7ff fd48 	bl	80011f8 <Uart3_Is_Empty>
 8001768:	4603      	mov	r3, r0
 800176a:	f083 0301 	eor.w	r3, r3, #1
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00a      	beq.n	800178a <StartTask02+0x3a>
	  {
		  RxData = Uart3_DeQueue();
 8001774:	f7ff fd2a 	bl	80011cc <Uart3_DeQueue>
 8001778:	4603      	mov	r3, r0
 800177a:	b2da      	uxtb	r2, r3
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <StartTask02+0x4c>)
 800177e:	701a      	strb	r2, [r3, #0]
		 // RxData = Uart3_Dequeue();
		  onl_monitor(RxData);
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <StartTask02+0x4c>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff f9e1 	bl	8000b4c <onl_monitor>
	  }
    osDelay(10);
 800178a:	200a      	movs	r0, #10
 800178c:	f004 f8eb 	bl	8005966 <osDelay>
	  if(!Uart3_Is_Empty())
 8001790:	e7e8      	b.n	8001764 <StartTask02+0x14>
 8001792:	bf00      	nop
 8001794:	080079f0 	.word	0x080079f0
 8001798:	08007a04 	.word	0x08007a04
 800179c:	20000dae 	.word	0x20000dae

080017a0 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80017a8:	2001      	movs	r0, #1
 80017aa:	f004 f8dc 	bl	8005966 <osDelay>
 80017ae:	e7fb      	b.n	80017a8 <StartTask03+0x8>

080017b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d101      	bne.n	80017c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017c2:	f000 faed 	bl	8001da0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40001000 	.word	0x40001000

080017d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d8:	b672      	cpsid	i
}
 80017da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017dc:	e7fe      	b.n	80017dc <Error_Handler+0x8>
	...

080017e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_MspInit+0x54>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	4a11      	ldr	r2, [pc, #68]	; (8001834 <HAL_MspInit+0x54>)
 80017f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f4:	6453      	str	r3, [r2, #68]	; 0x44
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <HAL_MspInit+0x54>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	603b      	str	r3, [r7, #0]
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_MspInit+0x54>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <HAL_MspInit+0x54>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <HAL_MspInit+0x54>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	210f      	movs	r1, #15
 8001822:	f06f 0001 	mvn.w	r0, #1
 8001826:	f000 fbb7 	bl	8001f98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800

08001838 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08e      	sub	sp, #56	; 0x38
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a55      	ldr	r2, [pc, #340]	; (80019ac <HAL_ETH_MspInit+0x174>)
 8001856:	4293      	cmp	r3, r2
 8001858:	f040 80a4 	bne.w	80019a4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800185c:	2300      	movs	r3, #0
 800185e:	623b      	str	r3, [r7, #32]
 8001860:	4b53      	ldr	r3, [pc, #332]	; (80019b0 <HAL_ETH_MspInit+0x178>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	4a52      	ldr	r2, [pc, #328]	; (80019b0 <HAL_ETH_MspInit+0x178>)
 8001866:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800186a:	6313      	str	r3, [r2, #48]	; 0x30
 800186c:	4b50      	ldr	r3, [pc, #320]	; (80019b0 <HAL_ETH_MspInit+0x178>)
 800186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001874:	623b      	str	r3, [r7, #32]
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
 800187c:	4b4c      	ldr	r3, [pc, #304]	; (80019b0 <HAL_ETH_MspInit+0x178>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001880:	4a4b      	ldr	r2, [pc, #300]	; (80019b0 <HAL_ETH_MspInit+0x178>)
 8001882:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001886:	6313      	str	r3, [r2, #48]	; 0x30
 8001888:	4b49      	ldr	r3, [pc, #292]	; (80019b0 <HAL_ETH_MspInit+0x178>)
 800188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	2300      	movs	r3, #0
 8001896:	61bb      	str	r3, [r7, #24]
 8001898:	4b45      	ldr	r3, [pc, #276]	; (80019b0 <HAL_ETH_MspInit+0x178>)
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	4a44      	ldr	r2, [pc, #272]	; (80019b0 <HAL_ETH_MspInit+0x178>)
 800189e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018a2:	6313      	str	r3, [r2, #48]	; 0x30
 80018a4:	4b42      	ldr	r3, [pc, #264]	; (80019b0 <HAL_ETH_MspInit+0x178>)
 80018a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	4b3e      	ldr	r3, [pc, #248]	; (80019b0 <HAL_ETH_MspInit+0x178>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	4a3d      	ldr	r2, [pc, #244]	; (80019b0 <HAL_ETH_MspInit+0x178>)
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	6313      	str	r3, [r2, #48]	; 0x30
 80018c0:	4b3b      	ldr	r3, [pc, #236]	; (80019b0 <HAL_ETH_MspInit+0x178>)
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	4b37      	ldr	r3, [pc, #220]	; (80019b0 <HAL_ETH_MspInit+0x178>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	4a36      	ldr	r2, [pc, #216]	; (80019b0 <HAL_ETH_MspInit+0x178>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6313      	str	r3, [r2, #48]	; 0x30
 80018dc:	4b34      	ldr	r3, [pc, #208]	; (80019b0 <HAL_ETH_MspInit+0x178>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	4b30      	ldr	r3, [pc, #192]	; (80019b0 <HAL_ETH_MspInit+0x178>)
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f0:	4a2f      	ldr	r2, [pc, #188]	; (80019b0 <HAL_ETH_MspInit+0x178>)
 80018f2:	f043 0302 	orr.w	r3, r3, #2
 80018f6:	6313      	str	r3, [r2, #48]	; 0x30
 80018f8:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <HAL_ETH_MspInit+0x178>)
 80018fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001904:	2300      	movs	r3, #0
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <HAL_ETH_MspInit+0x178>)
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190c:	4a28      	ldr	r2, [pc, #160]	; (80019b0 <HAL_ETH_MspInit+0x178>)
 800190e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001912:	6313      	str	r3, [r2, #48]	; 0x30
 8001914:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <HAL_ETH_MspInit+0x178>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001920:	2332      	movs	r3, #50	; 0x32
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001930:	230b      	movs	r3, #11
 8001932:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001938:	4619      	mov	r1, r3
 800193a:	481e      	ldr	r0, [pc, #120]	; (80019b4 <HAL_ETH_MspInit+0x17c>)
 800193c:	f000 ff10 	bl	8002760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001940:	2386      	movs	r3, #134	; 0x86
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	2302      	movs	r3, #2
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194c:	2303      	movs	r3, #3
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001950:	230b      	movs	r3, #11
 8001952:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001958:	4619      	mov	r1, r3
 800195a:	4817      	ldr	r0, [pc, #92]	; (80019b8 <HAL_ETH_MspInit+0x180>)
 800195c:	f000 ff00 	bl	8002760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196e:	2303      	movs	r3, #3
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001972:	230b      	movs	r3, #11
 8001974:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197a:	4619      	mov	r1, r3
 800197c:	480f      	ldr	r0, [pc, #60]	; (80019bc <HAL_ETH_MspInit+0x184>)
 800197e:	f000 feef 	bl	8002760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001982:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001994:	230b      	movs	r3, #11
 8001996:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199c:	4619      	mov	r1, r3
 800199e:	4808      	ldr	r0, [pc, #32]	; (80019c0 <HAL_ETH_MspInit+0x188>)
 80019a0:	f000 fede 	bl	8002760 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80019a4:	bf00      	nop
 80019a6:	3738      	adds	r7, #56	; 0x38
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40028000 	.word	0x40028000
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020800 	.word	0x40020800
 80019b8:	40020000 	.word	0x40020000
 80019bc:	40020400 	.word	0x40020400
 80019c0:	40021800 	.word	0x40021800

080019c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08e      	sub	sp, #56	; 0x38
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019cc:	f107 0308 	add.w	r3, r7, #8
 80019d0:	2230      	movs	r2, #48	; 0x30
 80019d2:	2100      	movs	r1, #0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f005 f9e1 	bl	8006d9c <memset>
  if(hrtc->Instance==RTC)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a0c      	ldr	r2, [pc, #48]	; (8001a10 <HAL_RTC_MspInit+0x4c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d111      	bne.n	8001a08 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019e4:	2320      	movs	r3, #32
 80019e6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80019e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ec:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	4618      	mov	r0, r3
 80019f4:	f001 fe60 	bl	80036b8 <HAL_RCCEx_PeriphCLKConfig>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80019fe:	f7ff fee9 	bl	80017d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a02:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <HAL_RTC_MspInit+0x50>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a08:	bf00      	nop
 8001a0a:	3738      	adds	r7, #56	; 0x38
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40002800 	.word	0x40002800
 8001a14:	42470e3c 	.word	0x42470e3c

08001a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	; 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a1d      	ldr	r2, [pc, #116]	; (8001aac <HAL_UART_MspInit+0x94>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d134      	bne.n	8001aa4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <HAL_UART_MspInit+0x98>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <HAL_UART_MspInit+0x98>)
 8001a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a48:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_UART_MspInit+0x98>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_UART_MspInit+0x98>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a14      	ldr	r2, [pc, #80]	; (8001ab0 <HAL_UART_MspInit+0x98>)
 8001a60:	f043 0308 	orr.w	r3, r3, #8
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_UART_MspInit+0x98>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a80:	2303      	movs	r3, #3
 8001a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a84:	2307      	movs	r3, #7
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4809      	ldr	r0, [pc, #36]	; (8001ab4 <HAL_UART_MspInit+0x9c>)
 8001a90:	f000 fe66 	bl	8002760 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2105      	movs	r1, #5
 8001a98:	2027      	movs	r0, #39	; 0x27
 8001a9a:	f000 fa7d 	bl	8001f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a9e:	2027      	movs	r0, #39	; 0x27
 8001aa0:	f000 fa96 	bl	8001fd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001aa4:	bf00      	nop
 8001aa6:	3728      	adds	r7, #40	; 0x28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40004800 	.word	0x40004800
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020c00 	.word	0x40020c00

08001ab8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ad8:	d13f      	bne.n	8001b5a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <HAL_PCD_MspInit+0xac>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a20      	ldr	r2, [pc, #128]	; (8001b64 <HAL_PCD_MspInit+0xac>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <HAL_PCD_MspInit+0xac>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001af6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b04:	2303      	movs	r3, #3
 8001b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b08:	230a      	movs	r3, #10
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4619      	mov	r1, r3
 8001b12:	4815      	ldr	r0, [pc, #84]	; (8001b68 <HAL_PCD_MspInit+0xb0>)
 8001b14:	f000 fe24 	bl	8002760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	480e      	ldr	r0, [pc, #56]	; (8001b68 <HAL_PCD_MspInit+0xb0>)
 8001b2e:	f000 fe17 	bl	8002760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b32:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <HAL_PCD_MspInit+0xac>)
 8001b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b36:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <HAL_PCD_MspInit+0xac>)
 8001b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b3c:	6353      	str	r3, [r2, #52]	; 0x34
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_PCD_MspInit+0xac>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <HAL_PCD_MspInit+0xac>)
 8001b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_PCD_MspInit+0xac>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001b5a:	bf00      	nop
 8001b5c:	3728      	adds	r7, #40	; 0x28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020000 	.word	0x40020000

08001b6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08c      	sub	sp, #48	; 0x30
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	2036      	movs	r0, #54	; 0x36
 8001b82:	f000 fa09 	bl	8001f98 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b86:	2036      	movs	r0, #54	; 0x36
 8001b88:	f000 fa22 	bl	8001fd0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	4b1f      	ldr	r3, [pc, #124]	; (8001c10 <HAL_InitTick+0xa4>)
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	4a1e      	ldr	r2, [pc, #120]	; (8001c10 <HAL_InitTick+0xa4>)
 8001b96:	f043 0310 	orr.w	r3, r3, #16
 8001b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9c:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <HAL_InitTick+0xa4>)
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	f003 0310 	and.w	r3, r3, #16
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ba8:	f107 0210 	add.w	r2, r7, #16
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f001 fd4e 	bl	8003654 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001bb8:	f001 fd24 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc4:	4a13      	ldr	r2, [pc, #76]	; (8001c14 <HAL_InitTick+0xa8>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	0c9b      	lsrs	r3, r3, #18
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <HAL_InitTick+0xac>)
 8001bd2:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <HAL_InitTick+0xb0>)
 8001bd4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001bd6:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <HAL_InitTick+0xac>)
 8001bd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bdc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001bde:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <HAL_InitTick+0xac>)
 8001be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <HAL_InitTick+0xac>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <HAL_InitTick+0xac>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001bf0:	4809      	ldr	r0, [pc, #36]	; (8001c18 <HAL_InitTick+0xac>)
 8001bf2:	f002 f81b 	bl	8003c2c <HAL_TIM_Base_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d104      	bne.n	8001c06 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001bfc:	4806      	ldr	r0, [pc, #24]	; (8001c18 <HAL_InitTick+0xac>)
 8001bfe:	f002 f86f 	bl	8003ce0 <HAL_TIM_Base_Start_IT>
 8001c02:	4603      	mov	r3, r0
 8001c04:	e000      	b.n	8001c08 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3730      	adds	r7, #48	; 0x30
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40023800 	.word	0x40023800
 8001c14:	431bde83 	.word	0x431bde83
 8001c18:	20000db8 	.word	0x20000db8
 8001c1c:	40001000 	.word	0x40001000

08001c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <NMI_Handler+0x4>

08001c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c2a:	e7fe      	b.n	8001c2a <HardFault_Handler+0x4>

08001c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <MemManage_Handler+0x4>

08001c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c36:	e7fe      	b.n	8001c36 <BusFault_Handler+0x4>

08001c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <UsageFault_Handler+0x4>

08001c3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c50:	4803      	ldr	r0, [pc, #12]	; (8001c60 <USART3_IRQHandler+0x14>)
 8001c52:	f002 fba9 	bl	80043a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  UART_Interrupt_Processing(&huart3);
 8001c56:	4802      	ldr	r0, [pc, #8]	; (8001c60 <USART3_IRQHandler+0x14>)
 8001c58:	f7ff fd4c 	bl	80016f4 <UART_Interrupt_Processing>
  /* USER CODE END USART3_IRQn 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000850 	.word	0x20000850

08001c64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <TIM6_DAC_IRQHandler+0x10>)
 8001c6a:	f002 f8a9 	bl	8003dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000db8 	.word	0x20000db8

08001c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c80:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <_sbrk+0x5c>)
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <_sbrk+0x60>)
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <_sbrk+0x64>)
 8001c96:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <_sbrk+0x68>)
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d207      	bcs.n	8001cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca8:	f005 f840 	bl	8006d2c <__errno>
 8001cac:	4603      	mov	r3, r0
 8001cae:	220c      	movs	r2, #12
 8001cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb6:	e009      	b.n	8001ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <_sbrk+0x64>)
 8001cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20030000 	.word	0x20030000
 8001cd8:	00000400 	.word	0x00000400
 8001cdc:	20000e00 	.word	0x20000e00
 8001ce0:	20004b70 	.word	0x20004b70

08001ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <SystemInit+0x20>)
 8001cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cee:	4a05      	ldr	r2, [pc, #20]	; (8001d04 <SystemInit+0x20>)
 8001cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d40 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d0c:	480d      	ldr	r0, [pc, #52]	; (8001d44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d0e:	490e      	ldr	r1, [pc, #56]	; (8001d48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d10:	4a0e      	ldr	r2, [pc, #56]	; (8001d4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d14:	e002      	b.n	8001d1c <LoopCopyDataInit>

08001d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1a:	3304      	adds	r3, #4

08001d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d20:	d3f9      	bcc.n	8001d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d22:	4a0b      	ldr	r2, [pc, #44]	; (8001d50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d24:	4c0b      	ldr	r4, [pc, #44]	; (8001d54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d28:	e001      	b.n	8001d2e <LoopFillZerobss>

08001d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d2c:	3204      	adds	r2, #4

08001d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d30:	d3fb      	bcc.n	8001d2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d32:	f7ff ffd7 	bl	8001ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d36:	f004 ffff 	bl	8006d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d3a:	f7ff fa8b 	bl	8001254 <main>
  bx  lr    
 8001d3e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d40:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d48:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001d4c:	08007aa0 	.word	0x08007aa0
  ldr r2, =_sbss
 8001d50:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001d54:	20004b6c 	.word	0x20004b6c

08001d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <ADC_IRQHandler>
	...

08001d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <HAL_Init+0x40>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0d      	ldr	r2, [pc, #52]	; (8001d9c <HAL_Init+0x40>)
 8001d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_Init+0x40>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <HAL_Init+0x40>)
 8001d72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <HAL_Init+0x40>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <HAL_Init+0x40>)
 8001d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d84:	2003      	movs	r0, #3
 8001d86:	f000 f8fc 	bl	8001f82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d8a:	200f      	movs	r0, #15
 8001d8c:	f7ff feee 	bl	8001b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d90:	f7ff fd26 	bl	80017e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023c00 	.word	0x40023c00

08001da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_IncTick+0x20>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_IncTick+0x24>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <HAL_IncTick+0x24>)
 8001db2:	6013      	str	r3, [r2, #0]
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000008 	.word	0x20000008
 8001dc4:	20000e04 	.word	0x20000e04

08001dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return uwTick;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <HAL_GetTick+0x14>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000e04 	.word	0x20000e04

08001de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7ff ffee 	bl	8001dc8 <HAL_GetTick>
 8001dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df8:	d005      	beq.n	8001e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_Delay+0x44>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e06:	bf00      	nop
 8001e08:	f7ff ffde 	bl	8001dc8 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d8f7      	bhi.n	8001e08 <HAL_Delay+0x28>
  {
  }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000008 	.word	0x20000008

08001e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e38:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e44:	4013      	ands	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5a:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60d3      	str	r3, [r2, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <__NVIC_GetPriorityGrouping+0x18>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 0307 	and.w	r3, r3, #7
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	db0b      	blt.n	8001eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	f003 021f 	and.w	r2, r3, #31
 8001ea4:	4907      	ldr	r1, [pc, #28]	; (8001ec4 <__NVIC_EnableIRQ+0x38>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	2001      	movs	r0, #1
 8001eae:	fa00 f202 	lsl.w	r2, r0, r2
 8001eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000e100 	.word	0xe000e100

08001ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	db0a      	blt.n	8001ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	490c      	ldr	r1, [pc, #48]	; (8001f14 <__NVIC_SetPriority+0x4c>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	0112      	lsls	r2, r2, #4
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	440b      	add	r3, r1
 8001eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef0:	e00a      	b.n	8001f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4908      	ldr	r1, [pc, #32]	; (8001f18 <__NVIC_SetPriority+0x50>)
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	3b04      	subs	r3, #4
 8001f00:	0112      	lsls	r2, r2, #4
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	440b      	add	r3, r1
 8001f06:	761a      	strb	r2, [r3, #24]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000e100 	.word	0xe000e100
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b089      	sub	sp, #36	; 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f1c3 0307 	rsb	r3, r3, #7
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	bf28      	it	cs
 8001f3a:	2304      	movcs	r3, #4
 8001f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3304      	adds	r3, #4
 8001f42:	2b06      	cmp	r3, #6
 8001f44:	d902      	bls.n	8001f4c <NVIC_EncodePriority+0x30>
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3b03      	subs	r3, #3
 8001f4a:	e000      	b.n	8001f4e <NVIC_EncodePriority+0x32>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	f04f 32ff 	mov.w	r2, #4294967295
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	401a      	ands	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f64:	f04f 31ff 	mov.w	r1, #4294967295
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6e:	43d9      	mvns	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	4313      	orrs	r3, r2
         );
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3724      	adds	r7, #36	; 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ff4c 	bl	8001e28 <__NVIC_SetPriorityGrouping>
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001faa:	f7ff ff61 	bl	8001e70 <__NVIC_GetPriorityGrouping>
 8001fae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	68b9      	ldr	r1, [r7, #8]
 8001fb4:	6978      	ldr	r0, [r7, #20]
 8001fb6:	f7ff ffb1 	bl	8001f1c <NVIC_EncodePriority>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff ff80 	bl	8001ec8 <__NVIC_SetPriority>
}
 8001fc8:	bf00      	nop
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ff54 	bl	8001e8c <__NVIC_EnableIRQ>
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ffa:	f7ff fee5 	bl	8001dc8 <HAL_GetTick>
 8001ffe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d008      	beq.n	800201e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2280      	movs	r2, #128	; 0x80
 8002010:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e052      	b.n	80020c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0216 	bic.w	r2, r2, #22
 800202c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695a      	ldr	r2, [r3, #20]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800203c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	2b00      	cmp	r3, #0
 8002044:	d103      	bne.n	800204e <HAL_DMA_Abort+0x62>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0208 	bic.w	r2, r2, #8
 800205c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0201 	bic.w	r2, r2, #1
 800206c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800206e:	e013      	b.n	8002098 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002070:	f7ff feaa 	bl	8001dc8 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b05      	cmp	r3, #5
 800207c:	d90c      	bls.n	8002098 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2220      	movs	r2, #32
 8002082:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2203      	movs	r2, #3
 8002088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e015      	b.n	80020c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1e4      	bne.n	8002070 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020aa:	223f      	movs	r2, #63	; 0x3f
 80020ac:	409a      	lsls	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d004      	beq.n	80020ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2280      	movs	r2, #128	; 0x80
 80020e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e00c      	b.n	8002104 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2205      	movs	r2, #5
 80020ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0201 	bic.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e06c      	b.n	80021fc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002128:	2b00      	cmp	r3, #0
 800212a:	d106      	bne.n	800213a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2223      	movs	r2, #35	; 0x23
 8002130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff fb7f 	bl	8001838 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	4b31      	ldr	r3, [pc, #196]	; (8002204 <HAL_ETH_Init+0xf4>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	4a30      	ldr	r2, [pc, #192]	; (8002204 <HAL_ETH_Init+0xf4>)
 8002144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002148:	6453      	str	r3, [r2, #68]	; 0x44
 800214a:	4b2e      	ldr	r3, [pc, #184]	; (8002204 <HAL_ETH_Init+0xf4>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002156:	4b2c      	ldr	r3, [pc, #176]	; (8002208 <HAL_ETH_Init+0xf8>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	4a2b      	ldr	r2, [pc, #172]	; (8002208 <HAL_ETH_Init+0xf8>)
 800215c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002160:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002162:	4b29      	ldr	r3, [pc, #164]	; (8002208 <HAL_ETH_Init+0xf8>)
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	4927      	ldr	r1, [pc, #156]	; (8002208 <HAL_ETH_Init+0xf8>)
 800216c:	4313      	orrs	r3, r2
 800216e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002170:	4b25      	ldr	r3, [pc, #148]	; (8002208 <HAL_ETH_Init+0xf8>)
 8002172:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6812      	ldr	r2, [r2, #0]
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800218a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800218c:	f7ff fe1c 	bl	8001dc8 <HAL_GetTick>
 8002190:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002192:	e011      	b.n	80021b8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002194:	f7ff fe18 	bl	8001dc8 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021a2:	d909      	bls.n	80021b8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2204      	movs	r2, #4
 80021a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	22e0      	movs	r2, #224	; 0xe0
 80021b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e021      	b.n	80021fc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1e4      	bne.n	8002194 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f958 	bl	8002480 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f9ff 	bl	80025d4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 fa55 	bl	8002686 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	461a      	mov	r2, r3
 80021e2:	2100      	movs	r1, #0
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f9bd 	bl	8002564 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2210      	movs	r2, #16
 80021f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40023800 	.word	0x40023800
 8002208:	40013800 	.word	0x40013800

0800220c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4b51      	ldr	r3, [pc, #324]	; (8002368 <ETH_SetMACConfig+0x15c>)
 8002222:	4013      	ands	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	7c1b      	ldrb	r3, [r3, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d102      	bne.n	8002234 <ETH_SetMACConfig+0x28>
 800222e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002232:	e000      	b.n	8002236 <ETH_SetMACConfig+0x2a>
 8002234:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	7c5b      	ldrb	r3, [r3, #17]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d102      	bne.n	8002244 <ETH_SetMACConfig+0x38>
 800223e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002242:	e000      	b.n	8002246 <ETH_SetMACConfig+0x3a>
 8002244:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002246:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800224c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	7fdb      	ldrb	r3, [r3, #31]
 8002252:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002254:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800225a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	7f92      	ldrb	r2, [r2, #30]
 8002260:	2a00      	cmp	r2, #0
 8002262:	d102      	bne.n	800226a <ETH_SetMACConfig+0x5e>
 8002264:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002268:	e000      	b.n	800226c <ETH_SetMACConfig+0x60>
 800226a:	2200      	movs	r2, #0
                        macconf->Speed |
 800226c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	7f1b      	ldrb	r3, [r3, #28]
 8002272:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002274:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800227a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	791b      	ldrb	r3, [r3, #4]
 8002280:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002282:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	f892 2020 	ldrb.w	r2, [r2, #32]
 800228a:	2a00      	cmp	r2, #0
 800228c:	d102      	bne.n	8002294 <ETH_SetMACConfig+0x88>
 800228e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002292:	e000      	b.n	8002296 <ETH_SetMACConfig+0x8a>
 8002294:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002296:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	7bdb      	ldrb	r3, [r3, #15]
 800229c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800229e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022ac:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022ae:	4313      	orrs	r3, r2
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022c6:	2001      	movs	r0, #1
 80022c8:	f7ff fd8a 	bl	8001de0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	f64f 7341 	movw	r3, #65345	; 0xff41
 80022e2:	4013      	ands	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ea:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80022f2:	2a00      	cmp	r2, #0
 80022f4:	d101      	bne.n	80022fa <ETH_SetMACConfig+0xee>
 80022f6:	2280      	movs	r2, #128	; 0x80
 80022f8:	e000      	b.n	80022fc <ETH_SetMACConfig+0xf0>
 80022fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022fc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002302:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800230a:	2a01      	cmp	r2, #1
 800230c:	d101      	bne.n	8002312 <ETH_SetMACConfig+0x106>
 800230e:	2208      	movs	r2, #8
 8002310:	e000      	b.n	8002314 <ETH_SetMACConfig+0x108>
 8002312:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002314:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800231c:	2a01      	cmp	r2, #1
 800231e:	d101      	bne.n	8002324 <ETH_SetMACConfig+0x118>
 8002320:	2204      	movs	r2, #4
 8002322:	e000      	b.n	8002326 <ETH_SetMACConfig+0x11a>
 8002324:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002326:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800232e:	2a01      	cmp	r2, #1
 8002330:	d101      	bne.n	8002336 <ETH_SetMACConfig+0x12a>
 8002332:	2202      	movs	r2, #2
 8002334:	e000      	b.n	8002338 <ETH_SetMACConfig+0x12c>
 8002336:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002338:	4313      	orrs	r3, r2
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4313      	orrs	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002350:	2001      	movs	r0, #1
 8002352:	f7ff fd45 	bl	8001de0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	619a      	str	r2, [r3, #24]
}
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	ff20810f 	.word	0xff20810f

0800236c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4b3d      	ldr	r3, [pc, #244]	; (800247c <ETH_SetDMAConfig+0x110>)
 8002386:	4013      	ands	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	7b1b      	ldrb	r3, [r3, #12]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d102      	bne.n	8002398 <ETH_SetDMAConfig+0x2c>
 8002392:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002396:	e000      	b.n	800239a <ETH_SetDMAConfig+0x2e>
 8002398:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	7b5b      	ldrb	r3, [r3, #13]
 800239e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023a0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	7f52      	ldrb	r2, [r2, #29]
 80023a6:	2a00      	cmp	r2, #0
 80023a8:	d102      	bne.n	80023b0 <ETH_SetDMAConfig+0x44>
 80023aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80023ae:	e000      	b.n	80023b2 <ETH_SetDMAConfig+0x46>
 80023b0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80023b2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	7b9b      	ldrb	r3, [r3, #14]
 80023b8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80023ba:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80023c0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	7f1b      	ldrb	r3, [r3, #28]
 80023c6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80023c8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	7f9b      	ldrb	r3, [r3, #30]
 80023ce:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80023d0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80023d6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023de:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023e0:	4313      	orrs	r3, r2
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f0:	461a      	mov	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002402:	2001      	movs	r0, #1
 8002404:	f7ff fcec 	bl	8001de0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002410:	461a      	mov	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	791b      	ldrb	r3, [r3, #4]
 800241a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002420:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002426:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800242c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002434:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002436:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800243e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002444:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800244e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002452:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002460:	2001      	movs	r0, #1
 8002462:	f7ff fcbd 	bl	8001de0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800246e:	461a      	mov	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6013      	str	r3, [r2, #0]
}
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	f8de3f23 	.word	0xf8de3f23

08002480 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b0a6      	sub	sp, #152	; 0x98
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002488:	2301      	movs	r3, #1
 800248a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800248e:	2301      	movs	r3, #1
 8002490:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002494:	2300      	movs	r3, #0
 8002496:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002498:	2300      	movs	r3, #0
 800249a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800249e:	2301      	movs	r3, #1
 80024a0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80024aa:	2301      	movs	r3, #1
 80024ac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80024bc:	2300      	movs	r3, #0
 80024be:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80024dc:	2300      	movs	r3, #0
 80024de:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80024e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024e6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80024e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80024f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024f8:	4619      	mov	r1, r3
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff fe86 	bl	800220c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002500:	2301      	movs	r3, #1
 8002502:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002504:	2301      	movs	r3, #1
 8002506:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002508:	2301      	movs	r3, #1
 800250a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800250e:	2301      	movs	r3, #1
 8002510:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002516:	2300      	movs	r3, #0
 8002518:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800251c:	2300      	movs	r3, #0
 800251e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002522:	2300      	movs	r3, #0
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002526:	2301      	movs	r3, #1
 8002528:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800252c:	2301      	movs	r3, #1
 800252e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002530:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002534:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002536:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800253a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800253c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002540:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002542:	2301      	movs	r3, #1
 8002544:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002548:	2300      	movs	r3, #0
 800254a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800254c:	2300      	movs	r3, #0
 800254e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002550:	f107 0308 	add.w	r3, r7, #8
 8002554:	4619      	mov	r1, r3
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ff08 	bl	800236c <ETH_SetDMAConfig>
}
 800255c:	bf00      	nop
 800255e:	3798      	adds	r7, #152	; 0x98
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3305      	adds	r3, #5
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	021b      	lsls	r3, r3, #8
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	3204      	adds	r2, #4
 800257c:	7812      	ldrb	r2, [r2, #0]
 800257e:	4313      	orrs	r3, r2
 8002580:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <ETH_MACAddressConfig+0x68>)
 8002586:	4413      	add	r3, r2
 8002588:	461a      	mov	r2, r3
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3303      	adds	r3, #3
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	061a      	lsls	r2, r3, #24
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3302      	adds	r3, #2
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	041b      	lsls	r3, r3, #16
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3301      	adds	r3, #1
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	021b      	lsls	r3, r3, #8
 80025a8:	4313      	orrs	r3, r2
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	7812      	ldrb	r2, [r2, #0]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <ETH_MACAddressConfig+0x6c>)
 80025b6:	4413      	add	r3, r2
 80025b8:	461a      	mov	r2, r3
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	6013      	str	r3, [r2, #0]
}
 80025be:	bf00      	nop
 80025c0:	371c      	adds	r7, #28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40028040 	.word	0x40028040
 80025d0:	40028044 	.word	0x40028044

080025d4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	e03e      	b.n	8002660 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68d9      	ldr	r1, [r3, #12]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	440b      	add	r3, r1
 80025f2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2200      	movs	r2, #0
 80025fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2200      	movs	r2, #0
 800260a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	3206      	adds	r2, #6
 8002614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d80c      	bhi.n	8002644 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68d9      	ldr	r1, [r3, #12]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	440b      	add	r3, r1
 800263c:	461a      	mov	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	e004      	b.n	800264e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	461a      	mov	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	3301      	adds	r3, #1
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b03      	cmp	r3, #3
 8002664:	d9bd      	bls.n	80025e2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002678:	611a      	str	r2, [r3, #16]
}
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002686:	b480      	push	{r7}
 8002688:	b085      	sub	sp, #20
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	e046      	b.n	8002722 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6919      	ldr	r1, [r3, #16]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	440b      	add	r3, r1
 80026a4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2200      	movs	r2, #0
 80026b0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2200      	movs	r2, #0
 80026bc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2200      	movs	r2, #0
 80026c2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2200      	movs	r2, #0
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80026d0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80026d8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80026e6:	68b9      	ldr	r1, [r7, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	3212      	adds	r2, #18
 80026ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d80c      	bhi.n	8002712 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6919      	ldr	r1, [r3, #16]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	440b      	add	r3, r1
 800270a:	461a      	mov	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	60da      	str	r2, [r3, #12]
 8002710:	e004      	b.n	800271c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	461a      	mov	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3301      	adds	r3, #1
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d9b5      	bls.n	8002694 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002752:	60da      	str	r2, [r3, #12]
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002760:	b480      	push	{r7}
 8002762:	b089      	sub	sp, #36	; 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002772:	2300      	movs	r3, #0
 8002774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
 800277a:	e177      	b.n	8002a6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800277c:	2201      	movs	r2, #1
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	4013      	ands	r3, r2
 800278e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	429a      	cmp	r2, r3
 8002796:	f040 8166 	bne.w	8002a66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d005      	beq.n	80027b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d130      	bne.n	8002814 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	2203      	movs	r2, #3
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027e8:	2201      	movs	r2, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 0201 	and.w	r2, r3, #1
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b03      	cmp	r3, #3
 800281e:	d017      	beq.n	8002850 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	2203      	movs	r2, #3
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d123      	bne.n	80028a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	08da      	lsrs	r2, r3, #3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3208      	adds	r2, #8
 8002864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002868:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	220f      	movs	r2, #15
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	08da      	lsrs	r2, r3, #3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3208      	adds	r2, #8
 800289e:	69b9      	ldr	r1, [r7, #24]
 80028a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	2203      	movs	r2, #3
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 0203 	and.w	r2, r3, #3
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 80c0 	beq.w	8002a66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	4b66      	ldr	r3, [pc, #408]	; (8002a84 <HAL_GPIO_Init+0x324>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	4a65      	ldr	r2, [pc, #404]	; (8002a84 <HAL_GPIO_Init+0x324>)
 80028f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f4:	6453      	str	r3, [r2, #68]	; 0x44
 80028f6:	4b63      	ldr	r3, [pc, #396]	; (8002a84 <HAL_GPIO_Init+0x324>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002902:	4a61      	ldr	r2, [pc, #388]	; (8002a88 <HAL_GPIO_Init+0x328>)
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	089b      	lsrs	r3, r3, #2
 8002908:	3302      	adds	r3, #2
 800290a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	220f      	movs	r2, #15
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4013      	ands	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a58      	ldr	r2, [pc, #352]	; (8002a8c <HAL_GPIO_Init+0x32c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d037      	beq.n	800299e <HAL_GPIO_Init+0x23e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a57      	ldr	r2, [pc, #348]	; (8002a90 <HAL_GPIO_Init+0x330>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d031      	beq.n	800299a <HAL_GPIO_Init+0x23a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a56      	ldr	r2, [pc, #344]	; (8002a94 <HAL_GPIO_Init+0x334>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d02b      	beq.n	8002996 <HAL_GPIO_Init+0x236>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a55      	ldr	r2, [pc, #340]	; (8002a98 <HAL_GPIO_Init+0x338>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d025      	beq.n	8002992 <HAL_GPIO_Init+0x232>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a54      	ldr	r2, [pc, #336]	; (8002a9c <HAL_GPIO_Init+0x33c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d01f      	beq.n	800298e <HAL_GPIO_Init+0x22e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a53      	ldr	r2, [pc, #332]	; (8002aa0 <HAL_GPIO_Init+0x340>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d019      	beq.n	800298a <HAL_GPIO_Init+0x22a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a52      	ldr	r2, [pc, #328]	; (8002aa4 <HAL_GPIO_Init+0x344>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d013      	beq.n	8002986 <HAL_GPIO_Init+0x226>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a51      	ldr	r2, [pc, #324]	; (8002aa8 <HAL_GPIO_Init+0x348>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d00d      	beq.n	8002982 <HAL_GPIO_Init+0x222>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a50      	ldr	r2, [pc, #320]	; (8002aac <HAL_GPIO_Init+0x34c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d007      	beq.n	800297e <HAL_GPIO_Init+0x21e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a4f      	ldr	r2, [pc, #316]	; (8002ab0 <HAL_GPIO_Init+0x350>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d101      	bne.n	800297a <HAL_GPIO_Init+0x21a>
 8002976:	2309      	movs	r3, #9
 8002978:	e012      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 800297a:	230a      	movs	r3, #10
 800297c:	e010      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 800297e:	2308      	movs	r3, #8
 8002980:	e00e      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 8002982:	2307      	movs	r3, #7
 8002984:	e00c      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 8002986:	2306      	movs	r3, #6
 8002988:	e00a      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 800298a:	2305      	movs	r3, #5
 800298c:	e008      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 800298e:	2304      	movs	r3, #4
 8002990:	e006      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 8002992:	2303      	movs	r3, #3
 8002994:	e004      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 8002996:	2302      	movs	r3, #2
 8002998:	e002      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 800299e:	2300      	movs	r3, #0
 80029a0:	69fa      	ldr	r2, [r7, #28]
 80029a2:	f002 0203 	and.w	r2, r2, #3
 80029a6:	0092      	lsls	r2, r2, #2
 80029a8:	4093      	lsls	r3, r2
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029b0:	4935      	ldr	r1, [pc, #212]	; (8002a88 <HAL_GPIO_Init+0x328>)
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	089b      	lsrs	r3, r3, #2
 80029b6:	3302      	adds	r3, #2
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029be:	4b3d      	ldr	r3, [pc, #244]	; (8002ab4 <HAL_GPIO_Init+0x354>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	43db      	mvns	r3, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4013      	ands	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029e2:	4a34      	ldr	r2, [pc, #208]	; (8002ab4 <HAL_GPIO_Init+0x354>)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029e8:	4b32      	ldr	r3, [pc, #200]	; (8002ab4 <HAL_GPIO_Init+0x354>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a0c:	4a29      	ldr	r2, [pc, #164]	; (8002ab4 <HAL_GPIO_Init+0x354>)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a12:	4b28      	ldr	r3, [pc, #160]	; (8002ab4 <HAL_GPIO_Init+0x354>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a36:	4a1f      	ldr	r2, [pc, #124]	; (8002ab4 <HAL_GPIO_Init+0x354>)
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a3c:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <HAL_GPIO_Init+0x354>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a60:	4a14      	ldr	r2, [pc, #80]	; (8002ab4 <HAL_GPIO_Init+0x354>)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	61fb      	str	r3, [r7, #28]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	2b0f      	cmp	r3, #15
 8002a70:	f67f ae84 	bls.w	800277c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop
 8002a78:	3724      	adds	r7, #36	; 0x24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40013800 	.word	0x40013800
 8002a8c:	40020000 	.word	0x40020000
 8002a90:	40020400 	.word	0x40020400
 8002a94:	40020800 	.word	0x40020800
 8002a98:	40020c00 	.word	0x40020c00
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40021400 	.word	0x40021400
 8002aa4:	40021800 	.word	0x40021800
 8002aa8:	40021c00 	.word	0x40021c00
 8002aac:	40022000 	.word	0x40022000
 8002ab0:	40022400 	.word	0x40022400
 8002ab4:	40013c00 	.word	0x40013c00

08002ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	807b      	strh	r3, [r7, #2]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ac8:	787b      	ldrb	r3, [r7, #1]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ace:	887a      	ldrh	r2, [r7, #2]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ad4:	e003      	b.n	8002ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ad6:	887b      	ldrh	r3, [r7, #2]
 8002ad8:	041a      	lsls	r2, r3, #16
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	619a      	str	r2, [r3, #24]
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002aea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aec:	b08f      	sub	sp, #60	; 0x3c
 8002aee:	af0a      	add	r7, sp, #40	; 0x28
 8002af0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e10f      	b.n	8002d1c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fe ffce 	bl	8001ab8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2203      	movs	r2, #3
 8002b20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d102      	bne.n	8002b36 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f002 fc07 	bl	800534e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	603b      	str	r3, [r7, #0]
 8002b46:	687e      	ldr	r6, [r7, #4]
 8002b48:	466d      	mov	r5, sp
 8002b4a:	f106 0410 	add.w	r4, r6, #16
 8002b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b5e:	1d33      	adds	r3, r6, #4
 8002b60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b62:	6838      	ldr	r0, [r7, #0]
 8002b64:	f002 fb92 	bl	800528c <USB_CoreInit>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2202      	movs	r2, #2
 8002b72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e0d0      	b.n	8002d1c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2100      	movs	r1, #0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f002 fbf5 	bl	8005370 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b86:	2300      	movs	r3, #0
 8002b88:	73fb      	strb	r3, [r7, #15]
 8002b8a:	e04a      	b.n	8002c22 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	333d      	adds	r3, #61	; 0x3d
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	333c      	adds	r3, #60	; 0x3c
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	b298      	uxth	r0, r3
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	3344      	adds	r3, #68	; 0x44
 8002bc8:	4602      	mov	r2, r0
 8002bca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	3340      	adds	r3, #64	; 0x40
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	3348      	adds	r3, #72	; 0x48
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	334c      	adds	r3, #76	; 0x4c
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	3354      	adds	r3, #84	; 0x54
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
 8002c22:	7bfa      	ldrb	r2, [r7, #15]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d3af      	bcc.n	8002b8c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	73fb      	strb	r3, [r7, #15]
 8002c30:	e044      	b.n	8002cbc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c32:	7bfa      	ldrb	r2, [r7, #15]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c48:	7bfa      	ldrb	r2, [r7, #15]
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c5e:	7bfa      	ldrb	r2, [r7, #15]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c74:	7bfa      	ldrb	r2, [r7, #15]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c8a:	7bfa      	ldrb	r2, [r7, #15]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ca0:	7bfa      	ldrb	r2, [r7, #15]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
 8002cbc:	7bfa      	ldrb	r2, [r7, #15]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d3b5      	bcc.n	8002c32 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	687e      	ldr	r6, [r7, #4]
 8002cce:	466d      	mov	r5, sp
 8002cd0:	f106 0410 	add.w	r4, r6, #16
 8002cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ce0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ce4:	1d33      	adds	r3, r6, #4
 8002ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ce8:	6838      	ldr	r0, [r7, #0]
 8002cea:	f002 fb8d 	bl	8005408 <USB_DevInit>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e00d      	b.n	8002d1c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f002 fd58 	bl	80057ca <USB_DevDisconnect>

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e267      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d075      	beq.n	8002e2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d42:	4b88      	ldr	r3, [pc, #544]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d00c      	beq.n	8002d68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d4e:	4b85      	ldr	r3, [pc, #532]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d112      	bne.n	8002d80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d5a:	4b82      	ldr	r3, [pc, #520]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d66:	d10b      	bne.n	8002d80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d68:	4b7e      	ldr	r3, [pc, #504]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d05b      	beq.n	8002e2c <HAL_RCC_OscConfig+0x108>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d157      	bne.n	8002e2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e242      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d88:	d106      	bne.n	8002d98 <HAL_RCC_OscConfig+0x74>
 8002d8a:	4b76      	ldr	r3, [pc, #472]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a75      	ldr	r2, [pc, #468]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e01d      	b.n	8002dd4 <HAL_RCC_OscConfig+0xb0>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCC_OscConfig+0x98>
 8002da2:	4b70      	ldr	r3, [pc, #448]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a6f      	ldr	r2, [pc, #444]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	4b6d      	ldr	r3, [pc, #436]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a6c      	ldr	r2, [pc, #432]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e00b      	b.n	8002dd4 <HAL_RCC_OscConfig+0xb0>
 8002dbc:	4b69      	ldr	r3, [pc, #420]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a68      	ldr	r2, [pc, #416]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	4b66      	ldr	r3, [pc, #408]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a65      	ldr	r2, [pc, #404]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d013      	beq.n	8002e04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7fe fff4 	bl	8001dc8 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de4:	f7fe fff0 	bl	8001dc8 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	; 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e207      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	4b5b      	ldr	r3, [pc, #364]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0xc0>
 8002e02:	e014      	b.n	8002e2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e04:	f7fe ffe0 	bl	8001dc8 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e0c:	f7fe ffdc 	bl	8001dc8 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	; 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e1f3      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1e:	4b51      	ldr	r3, [pc, #324]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0xe8>
 8002e2a:	e000      	b.n	8002e2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d063      	beq.n	8002f02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e3a:	4b4a      	ldr	r3, [pc, #296]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00b      	beq.n	8002e5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e46:	4b47      	ldr	r3, [pc, #284]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d11c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e52:	4b44      	ldr	r3, [pc, #272]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d116      	bne.n	8002e8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5e:	4b41      	ldr	r3, [pc, #260]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <HAL_RCC_OscConfig+0x152>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d001      	beq.n	8002e76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e1c7      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e76:	4b3b      	ldr	r3, [pc, #236]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4937      	ldr	r1, [pc, #220]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8a:	e03a      	b.n	8002f02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d020      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e94:	4b34      	ldr	r3, [pc, #208]	; (8002f68 <HAL_RCC_OscConfig+0x244>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9a:	f7fe ff95 	bl	8001dc8 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea2:	f7fe ff91 	bl	8001dc8 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e1a8      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb4:	4b2b      	ldr	r3, [pc, #172]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec0:	4b28      	ldr	r3, [pc, #160]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4925      	ldr	r1, [pc, #148]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	600b      	str	r3, [r1, #0]
 8002ed4:	e015      	b.n	8002f02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ed6:	4b24      	ldr	r3, [pc, #144]	; (8002f68 <HAL_RCC_OscConfig+0x244>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002edc:	f7fe ff74 	bl	8001dc8 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee4:	f7fe ff70 	bl	8001dc8 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e187      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef6:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f0      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d036      	beq.n	8002f7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d016      	beq.n	8002f44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f16:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <HAL_RCC_OscConfig+0x248>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1c:	f7fe ff54 	bl	8001dc8 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f24:	f7fe ff50 	bl	8001dc8 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e167      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f36:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0x200>
 8002f42:	e01b      	b.n	8002f7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f44:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_RCC_OscConfig+0x248>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4a:	f7fe ff3d 	bl	8001dc8 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f50:	e00e      	b.n	8002f70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f52:	f7fe ff39 	bl	8001dc8 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d907      	bls.n	8002f70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e150      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
 8002f64:	40023800 	.word	0x40023800
 8002f68:	42470000 	.word	0x42470000
 8002f6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f70:	4b88      	ldr	r3, [pc, #544]	; (8003194 <HAL_RCC_OscConfig+0x470>)
 8002f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1ea      	bne.n	8002f52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 8097 	beq.w	80030b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f8e:	4b81      	ldr	r3, [pc, #516]	; (8003194 <HAL_RCC_OscConfig+0x470>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10f      	bne.n	8002fba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	4b7d      	ldr	r3, [pc, #500]	; (8003194 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	4a7c      	ldr	r2, [pc, #496]	; (8003194 <HAL_RCC_OscConfig+0x470>)
 8002fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002faa:	4b7a      	ldr	r3, [pc, #488]	; (8003194 <HAL_RCC_OscConfig+0x470>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fba:	4b77      	ldr	r3, [pc, #476]	; (8003198 <HAL_RCC_OscConfig+0x474>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d118      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fc6:	4b74      	ldr	r3, [pc, #464]	; (8003198 <HAL_RCC_OscConfig+0x474>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a73      	ldr	r2, [pc, #460]	; (8003198 <HAL_RCC_OscConfig+0x474>)
 8002fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd2:	f7fe fef9 	bl	8001dc8 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fda:	f7fe fef5 	bl	8001dc8 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e10c      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	4b6a      	ldr	r3, [pc, #424]	; (8003198 <HAL_RCC_OscConfig+0x474>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d106      	bne.n	800300e <HAL_RCC_OscConfig+0x2ea>
 8003000:	4b64      	ldr	r3, [pc, #400]	; (8003194 <HAL_RCC_OscConfig+0x470>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003004:	4a63      	ldr	r2, [pc, #396]	; (8003194 <HAL_RCC_OscConfig+0x470>)
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	6713      	str	r3, [r2, #112]	; 0x70
 800300c:	e01c      	b.n	8003048 <HAL_RCC_OscConfig+0x324>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b05      	cmp	r3, #5
 8003014:	d10c      	bne.n	8003030 <HAL_RCC_OscConfig+0x30c>
 8003016:	4b5f      	ldr	r3, [pc, #380]	; (8003194 <HAL_RCC_OscConfig+0x470>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	4a5e      	ldr	r2, [pc, #376]	; (8003194 <HAL_RCC_OscConfig+0x470>)
 800301c:	f043 0304 	orr.w	r3, r3, #4
 8003020:	6713      	str	r3, [r2, #112]	; 0x70
 8003022:	4b5c      	ldr	r3, [pc, #368]	; (8003194 <HAL_RCC_OscConfig+0x470>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	4a5b      	ldr	r2, [pc, #364]	; (8003194 <HAL_RCC_OscConfig+0x470>)
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	6713      	str	r3, [r2, #112]	; 0x70
 800302e:	e00b      	b.n	8003048 <HAL_RCC_OscConfig+0x324>
 8003030:	4b58      	ldr	r3, [pc, #352]	; (8003194 <HAL_RCC_OscConfig+0x470>)
 8003032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003034:	4a57      	ldr	r2, [pc, #348]	; (8003194 <HAL_RCC_OscConfig+0x470>)
 8003036:	f023 0301 	bic.w	r3, r3, #1
 800303a:	6713      	str	r3, [r2, #112]	; 0x70
 800303c:	4b55      	ldr	r3, [pc, #340]	; (8003194 <HAL_RCC_OscConfig+0x470>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003040:	4a54      	ldr	r2, [pc, #336]	; (8003194 <HAL_RCC_OscConfig+0x470>)
 8003042:	f023 0304 	bic.w	r3, r3, #4
 8003046:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d015      	beq.n	800307c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003050:	f7fe feba 	bl	8001dc8 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003056:	e00a      	b.n	800306e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003058:	f7fe feb6 	bl	8001dc8 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	f241 3288 	movw	r2, #5000	; 0x1388
 8003066:	4293      	cmp	r3, r2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e0cb      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306e:	4b49      	ldr	r3, [pc, #292]	; (8003194 <HAL_RCC_OscConfig+0x470>)
 8003070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0ee      	beq.n	8003058 <HAL_RCC_OscConfig+0x334>
 800307a:	e014      	b.n	80030a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307c:	f7fe fea4 	bl	8001dc8 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003082:	e00a      	b.n	800309a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003084:	f7fe fea0 	bl	8001dc8 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003092:	4293      	cmp	r3, r2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e0b5      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800309a:	4b3e      	ldr	r3, [pc, #248]	; (8003194 <HAL_RCC_OscConfig+0x470>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1ee      	bne.n	8003084 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030a6:	7dfb      	ldrb	r3, [r7, #23]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d105      	bne.n	80030b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ac:	4b39      	ldr	r3, [pc, #228]	; (8003194 <HAL_RCC_OscConfig+0x470>)
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	4a38      	ldr	r2, [pc, #224]	; (8003194 <HAL_RCC_OscConfig+0x470>)
 80030b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80a1 	beq.w	8003204 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030c2:	4b34      	ldr	r3, [pc, #208]	; (8003194 <HAL_RCC_OscConfig+0x470>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b08      	cmp	r3, #8
 80030cc:	d05c      	beq.n	8003188 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d141      	bne.n	800315a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d6:	4b31      	ldr	r3, [pc, #196]	; (800319c <HAL_RCC_OscConfig+0x478>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030dc:	f7fe fe74 	bl	8001dc8 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e4:	f7fe fe70 	bl	8001dc8 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e087      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f6:	4b27      	ldr	r3, [pc, #156]	; (8003194 <HAL_RCC_OscConfig+0x470>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69da      	ldr	r2, [r3, #28]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	019b      	lsls	r3, r3, #6
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	085b      	lsrs	r3, r3, #1
 800311a:	3b01      	subs	r3, #1
 800311c:	041b      	lsls	r3, r3, #16
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	061b      	lsls	r3, r3, #24
 8003126:	491b      	ldr	r1, [pc, #108]	; (8003194 <HAL_RCC_OscConfig+0x470>)
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800312c:	4b1b      	ldr	r3, [pc, #108]	; (800319c <HAL_RCC_OscConfig+0x478>)
 800312e:	2201      	movs	r2, #1
 8003130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003132:	f7fe fe49 	bl	8001dc8 <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800313a:	f7fe fe45 	bl	8001dc8 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e05c      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314c:	4b11      	ldr	r3, [pc, #68]	; (8003194 <HAL_RCC_OscConfig+0x470>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f0      	beq.n	800313a <HAL_RCC_OscConfig+0x416>
 8003158:	e054      	b.n	8003204 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315a:	4b10      	ldr	r3, [pc, #64]	; (800319c <HAL_RCC_OscConfig+0x478>)
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003160:	f7fe fe32 	bl	8001dc8 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003168:	f7fe fe2e 	bl	8001dc8 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e045      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317a:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_RCC_OscConfig+0x470>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x444>
 8003186:	e03d      	b.n	8003204 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d107      	bne.n	80031a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e038      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
 8003194:	40023800 	.word	0x40023800
 8003198:	40007000 	.word	0x40007000
 800319c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031a0:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <HAL_RCC_OscConfig+0x4ec>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d028      	beq.n	8003200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d121      	bne.n	8003200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d11a      	bne.n	8003200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031d0:	4013      	ands	r3, r2
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031d8:	4293      	cmp	r3, r2
 80031da:	d111      	bne.n	8003200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	085b      	lsrs	r3, r3, #1
 80031e8:	3b01      	subs	r3, #1
 80031ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d107      	bne.n	8003200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d001      	beq.n	8003204 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40023800 	.word	0x40023800

08003214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0cc      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003228:	4b68      	ldr	r3, [pc, #416]	; (80033cc <HAL_RCC_ClockConfig+0x1b8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 030f 	and.w	r3, r3, #15
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d90c      	bls.n	8003250 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003236:	4b65      	ldr	r3, [pc, #404]	; (80033cc <HAL_RCC_ClockConfig+0x1b8>)
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323e:	4b63      	ldr	r3, [pc, #396]	; (80033cc <HAL_RCC_ClockConfig+0x1b8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d001      	beq.n	8003250 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0b8      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d020      	beq.n	800329e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003268:	4b59      	ldr	r3, [pc, #356]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	4a58      	ldr	r2, [pc, #352]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003272:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003280:	4b53      	ldr	r3, [pc, #332]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	4a52      	ldr	r2, [pc, #328]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800328a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800328c:	4b50      	ldr	r3, [pc, #320]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	494d      	ldr	r1, [pc, #308]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d044      	beq.n	8003334 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d107      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b2:	4b47      	ldr	r3, [pc, #284]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d119      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e07f      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d003      	beq.n	80032d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d107      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d2:	4b3f      	ldr	r3, [pc, #252]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e06f      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e2:	4b3b      	ldr	r3, [pc, #236]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e067      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032f2:	4b37      	ldr	r3, [pc, #220]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f023 0203 	bic.w	r2, r3, #3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	4934      	ldr	r1, [pc, #208]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	4313      	orrs	r3, r2
 8003302:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003304:	f7fe fd60 	bl	8001dc8 <HAL_GetTick>
 8003308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330a:	e00a      	b.n	8003322 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800330c:	f7fe fd5c 	bl	8001dc8 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f241 3288 	movw	r2, #5000	; 0x1388
 800331a:	4293      	cmp	r3, r2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e04f      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003322:	4b2b      	ldr	r3, [pc, #172]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 020c 	and.w	r2, r3, #12
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	429a      	cmp	r2, r3
 8003332:	d1eb      	bne.n	800330c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003334:	4b25      	ldr	r3, [pc, #148]	; (80033cc <HAL_RCC_ClockConfig+0x1b8>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d20c      	bcs.n	800335c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003342:	4b22      	ldr	r3, [pc, #136]	; (80033cc <HAL_RCC_ClockConfig+0x1b8>)
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334a:	4b20      	ldr	r3, [pc, #128]	; (80033cc <HAL_RCC_ClockConfig+0x1b8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	429a      	cmp	r2, r3
 8003356:	d001      	beq.n	800335c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e032      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d008      	beq.n	800337a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003368:	4b19      	ldr	r3, [pc, #100]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	4916      	ldr	r1, [pc, #88]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	4313      	orrs	r3, r2
 8003378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d009      	beq.n	800339a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003386:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	490e      	ldr	r1, [pc, #56]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	4313      	orrs	r3, r2
 8003398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800339a:	f000 f821 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 800339e:	4602      	mov	r2, r0
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	490a      	ldr	r1, [pc, #40]	; (80033d4 <HAL_RCC_ClockConfig+0x1c0>)
 80033ac:	5ccb      	ldrb	r3, [r1, r3]
 80033ae:	fa22 f303 	lsr.w	r3, r2, r3
 80033b2:	4a09      	ldr	r2, [pc, #36]	; (80033d8 <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033b6:	4b09      	ldr	r3, [pc, #36]	; (80033dc <HAL_RCC_ClockConfig+0x1c8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe fbd6 	bl	8001b6c <HAL_InitTick>

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40023c00 	.word	0x40023c00
 80033d0:	40023800 	.word	0x40023800
 80033d4:	08007a44 	.word	0x08007a44
 80033d8:	20000000 	.word	0x20000000
 80033dc:	20000004 	.word	0x20000004

080033e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033e4:	b094      	sub	sp, #80	; 0x50
 80033e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	647b      	str	r3, [r7, #68]	; 0x44
 80033ec:	2300      	movs	r3, #0
 80033ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033f0:	2300      	movs	r3, #0
 80033f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033f8:	4b79      	ldr	r3, [pc, #484]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 030c 	and.w	r3, r3, #12
 8003400:	2b08      	cmp	r3, #8
 8003402:	d00d      	beq.n	8003420 <HAL_RCC_GetSysClockFreq+0x40>
 8003404:	2b08      	cmp	r3, #8
 8003406:	f200 80e1 	bhi.w	80035cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <HAL_RCC_GetSysClockFreq+0x34>
 800340e:	2b04      	cmp	r3, #4
 8003410:	d003      	beq.n	800341a <HAL_RCC_GetSysClockFreq+0x3a>
 8003412:	e0db      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003414:	4b73      	ldr	r3, [pc, #460]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003416:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003418:	e0db      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800341a:	4b73      	ldr	r3, [pc, #460]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800341c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800341e:	e0d8      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003420:	4b6f      	ldr	r3, [pc, #444]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003428:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800342a:	4b6d      	ldr	r3, [pc, #436]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d063      	beq.n	80034fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003436:	4b6a      	ldr	r3, [pc, #424]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	099b      	lsrs	r3, r3, #6
 800343c:	2200      	movs	r2, #0
 800343e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003440:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003448:	633b      	str	r3, [r7, #48]	; 0x30
 800344a:	2300      	movs	r3, #0
 800344c:	637b      	str	r3, [r7, #52]	; 0x34
 800344e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003452:	4622      	mov	r2, r4
 8003454:	462b      	mov	r3, r5
 8003456:	f04f 0000 	mov.w	r0, #0
 800345a:	f04f 0100 	mov.w	r1, #0
 800345e:	0159      	lsls	r1, r3, #5
 8003460:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003464:	0150      	lsls	r0, r2, #5
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4621      	mov	r1, r4
 800346c:	1a51      	subs	r1, r2, r1
 800346e:	6139      	str	r1, [r7, #16]
 8003470:	4629      	mov	r1, r5
 8003472:	eb63 0301 	sbc.w	r3, r3, r1
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003484:	4659      	mov	r1, fp
 8003486:	018b      	lsls	r3, r1, #6
 8003488:	4651      	mov	r1, sl
 800348a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800348e:	4651      	mov	r1, sl
 8003490:	018a      	lsls	r2, r1, #6
 8003492:	4651      	mov	r1, sl
 8003494:	ebb2 0801 	subs.w	r8, r2, r1
 8003498:	4659      	mov	r1, fp
 800349a:	eb63 0901 	sbc.w	r9, r3, r1
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034b2:	4690      	mov	r8, r2
 80034b4:	4699      	mov	r9, r3
 80034b6:	4623      	mov	r3, r4
 80034b8:	eb18 0303 	adds.w	r3, r8, r3
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	462b      	mov	r3, r5
 80034c0:	eb49 0303 	adc.w	r3, r9, r3
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034d2:	4629      	mov	r1, r5
 80034d4:	024b      	lsls	r3, r1, #9
 80034d6:	4621      	mov	r1, r4
 80034d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034dc:	4621      	mov	r1, r4
 80034de:	024a      	lsls	r2, r1, #9
 80034e0:	4610      	mov	r0, r2
 80034e2:	4619      	mov	r1, r3
 80034e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034e6:	2200      	movs	r2, #0
 80034e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034f0:	f7fc fed6 	bl	80002a0 <__aeabi_uldivmod>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4613      	mov	r3, r2
 80034fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034fc:	e058      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034fe:	4b38      	ldr	r3, [pc, #224]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	099b      	lsrs	r3, r3, #6
 8003504:	2200      	movs	r2, #0
 8003506:	4618      	mov	r0, r3
 8003508:	4611      	mov	r1, r2
 800350a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800350e:	623b      	str	r3, [r7, #32]
 8003510:	2300      	movs	r3, #0
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
 8003514:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003518:	4642      	mov	r2, r8
 800351a:	464b      	mov	r3, r9
 800351c:	f04f 0000 	mov.w	r0, #0
 8003520:	f04f 0100 	mov.w	r1, #0
 8003524:	0159      	lsls	r1, r3, #5
 8003526:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800352a:	0150      	lsls	r0, r2, #5
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4641      	mov	r1, r8
 8003532:	ebb2 0a01 	subs.w	sl, r2, r1
 8003536:	4649      	mov	r1, r9
 8003538:	eb63 0b01 	sbc.w	fp, r3, r1
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003548:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800354c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003550:	ebb2 040a 	subs.w	r4, r2, sl
 8003554:	eb63 050b 	sbc.w	r5, r3, fp
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	00eb      	lsls	r3, r5, #3
 8003562:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003566:	00e2      	lsls	r2, r4, #3
 8003568:	4614      	mov	r4, r2
 800356a:	461d      	mov	r5, r3
 800356c:	4643      	mov	r3, r8
 800356e:	18e3      	adds	r3, r4, r3
 8003570:	603b      	str	r3, [r7, #0]
 8003572:	464b      	mov	r3, r9
 8003574:	eb45 0303 	adc.w	r3, r5, r3
 8003578:	607b      	str	r3, [r7, #4]
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003586:	4629      	mov	r1, r5
 8003588:	028b      	lsls	r3, r1, #10
 800358a:	4621      	mov	r1, r4
 800358c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003590:	4621      	mov	r1, r4
 8003592:	028a      	lsls	r2, r1, #10
 8003594:	4610      	mov	r0, r2
 8003596:	4619      	mov	r1, r3
 8003598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800359a:	2200      	movs	r2, #0
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	61fa      	str	r2, [r7, #28]
 80035a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035a4:	f7fc fe7c 	bl	80002a0 <__aeabi_uldivmod>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4613      	mov	r3, r2
 80035ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035b0:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	0c1b      	lsrs	r3, r3, #16
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	3301      	adds	r3, #1
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80035c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035ca:	e002      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035cc:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80035ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3750      	adds	r7, #80	; 0x50
 80035d8:	46bd      	mov	sp, r7
 80035da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800
 80035e4:	00f42400 	.word	0x00f42400
 80035e8:	007a1200 	.word	0x007a1200

080035ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f0:	4b03      	ldr	r3, [pc, #12]	; (8003600 <HAL_RCC_GetHCLKFreq+0x14>)
 80035f2:	681b      	ldr	r3, [r3, #0]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000000 	.word	0x20000000

08003604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003608:	f7ff fff0 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 800360c:	4602      	mov	r2, r0
 800360e:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	0a9b      	lsrs	r3, r3, #10
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	4903      	ldr	r1, [pc, #12]	; (8003628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40023800 	.word	0x40023800
 8003628:	08007a54 	.word	0x08007a54

0800362c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003630:	f7ff ffdc 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 8003634:	4602      	mov	r2, r0
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	0b5b      	lsrs	r3, r3, #13
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	4903      	ldr	r1, [pc, #12]	; (8003650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003642:	5ccb      	ldrb	r3, [r1, r3]
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003648:	4618      	mov	r0, r3
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40023800 	.word	0x40023800
 8003650:	08007a54 	.word	0x08007a54

08003654 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	220f      	movs	r2, #15
 8003662:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003664:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0203 	and.w	r2, r3, #3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003670:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800367c:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <HAL_RCC_GetClockConfig+0x5c>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003688:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <HAL_RCC_GetClockConfig+0x5c>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	08db      	lsrs	r3, r3, #3
 800368e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003696:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <HAL_RCC_GetClockConfig+0x60>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 020f 	and.w	r2, r3, #15
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	601a      	str	r2, [r3, #0]
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40023800 	.word	0x40023800
 80036b4:	40023c00 	.word	0x40023c00

080036b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10b      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d105      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d075      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036ec:	4b91      	ldr	r3, [pc, #580]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80036f2:	f7fe fb69 	bl	8001dc8 <HAL_GetTick>
 80036f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036f8:	e008      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80036fa:	f7fe fb65 	bl	8001dc8 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e189      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800370c:	4b8a      	ldr	r3, [pc, #552]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1f0      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d009      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	019a      	lsls	r2, r3, #6
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	071b      	lsls	r3, r3, #28
 8003730:	4981      	ldr	r1, [pc, #516]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d01f      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003744:	4b7c      	ldr	r3, [pc, #496]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800374a:	0f1b      	lsrs	r3, r3, #28
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	019a      	lsls	r2, r3, #6
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	061b      	lsls	r3, r3, #24
 800375e:	431a      	orrs	r2, r3
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	071b      	lsls	r3, r3, #28
 8003764:	4974      	ldr	r1, [pc, #464]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800376c:	4b72      	ldr	r3, [pc, #456]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800376e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003772:	f023 021f 	bic.w	r2, r3, #31
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	3b01      	subs	r3, #1
 800377c:	496e      	ldr	r1, [pc, #440]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00d      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	019a      	lsls	r2, r3, #6
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	061b      	lsls	r3, r3, #24
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	071b      	lsls	r3, r3, #28
 80037a4:	4964      	ldr	r1, [pc, #400]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037ac:	4b61      	ldr	r3, [pc, #388]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80037b2:	f7fe fb09 	bl	8001dc8 <HAL_GetTick>
 80037b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037b8:	e008      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80037ba:	f7fe fb05 	bl	8001dc8 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e129      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037cc:	4b5a      	ldr	r3, [pc, #360]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0f0      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d105      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d079      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80037f0:	4b52      	ldr	r3, [pc, #328]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80037f6:	f7fe fae7 	bl	8001dc8 <HAL_GetTick>
 80037fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037fc:	e008      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80037fe:	f7fe fae3 	bl	8001dc8 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e107      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003810:	4b49      	ldr	r3, [pc, #292]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800381c:	d0ef      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d020      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800382a:	4b43      	ldr	r3, [pc, #268]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800382c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003830:	0f1b      	lsrs	r3, r3, #28
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	019a      	lsls	r2, r3, #6
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	061b      	lsls	r3, r3, #24
 8003844:	431a      	orrs	r2, r3
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	071b      	lsls	r3, r3, #28
 800384a:	493b      	ldr	r1, [pc, #236]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003852:	4b39      	ldr	r3, [pc, #228]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003858:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	3b01      	subs	r3, #1
 8003862:	021b      	lsls	r3, r3, #8
 8003864:	4934      	ldr	r1, [pc, #208]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01e      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003878:	4b2f      	ldr	r3, [pc, #188]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387e:	0e1b      	lsrs	r3, r3, #24
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	019a      	lsls	r2, r3, #6
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	061b      	lsls	r3, r3, #24
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	071b      	lsls	r3, r3, #28
 8003898:	4927      	ldr	r1, [pc, #156]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80038a0:	4b25      	ldr	r3, [pc, #148]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	4922      	ldr	r1, [pc, #136]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80038b6:	4b21      	ldr	r3, [pc, #132]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80038b8:	2201      	movs	r2, #1
 80038ba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038bc:	f7fe fa84 	bl	8001dc8 <HAL_GetTick>
 80038c0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80038c4:	f7fe fa80 	bl	8001dc8 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e0a4      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038d6:	4b18      	ldr	r3, [pc, #96]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038e2:	d1ef      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 808b 	beq.w	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	4b10      	ldr	r3, [pc, #64]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	4a0f      	ldr	r2, [pc, #60]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003900:	6413      	str	r3, [r2, #64]	; 0x40
 8003902:	4b0d      	ldr	r3, [pc, #52]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800390e:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a0b      	ldr	r2, [pc, #44]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003918:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800391a:	f7fe fa55 	bl	8001dc8 <HAL_GetTick>
 800391e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003920:	e010      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003922:	f7fe fa51 	bl	8001dc8 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d909      	bls.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e075      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003934:	42470068 	.word	0x42470068
 8003938:	40023800 	.word	0x40023800
 800393c:	42470070 	.word	0x42470070
 8003940:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003944:	4b38      	ldr	r3, [pc, #224]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0e8      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003950:	4b36      	ldr	r3, [pc, #216]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003958:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d02f      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	429a      	cmp	r2, r3
 800396c:	d028      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800396e:	4b2f      	ldr	r3, [pc, #188]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003976:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003978:	4b2d      	ldr	r3, [pc, #180]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800397a:	2201      	movs	r2, #1
 800397c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800397e:	4b2c      	ldr	r3, [pc, #176]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003984:	4a29      	ldr	r2, [pc, #164]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800398a:	4b28      	ldr	r3, [pc, #160]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b01      	cmp	r3, #1
 8003994:	d114      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003996:	f7fe fa17 	bl	8001dc8 <HAL_GetTick>
 800399a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399c:	e00a      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800399e:	f7fe fa13 	bl	8001dc8 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e035      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b4:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80039b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0ee      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039cc:	d10d      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x332>
 80039ce:	4b17      	ldr	r3, [pc, #92]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80039de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e2:	4912      	ldr	r1, [pc, #72]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	608b      	str	r3, [r1, #8]
 80039e8:	e005      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80039ea:	4b10      	ldr	r3, [pc, #64]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	4a0f      	ldr	r2, [pc, #60]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80039f0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039f4:	6093      	str	r3, [r2, #8]
 80039f6:	4b0d      	ldr	r3, [pc, #52]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80039f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a02:	490a      	ldr	r1, [pc, #40]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d004      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003a1c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40007000 	.word	0x40007000
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	42470e40 	.word	0x42470e40
 8003a34:	424711e0 	.word	0x424711e0

08003a38 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e066      	b.n	8003b1c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	7f5b      	ldrb	r3, [r3, #29]
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d105      	bne.n	8003a64 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7fd ffb0 	bl	80019c4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	22ca      	movs	r2, #202	; 0xca
 8003a70:	625a      	str	r2, [r3, #36]	; 0x24
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2253      	movs	r2, #83	; 0x53
 8003a78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f87a 	bl	8003b74 <RTC_EnterInitMode>
 8003a80:	4603      	mov	r3, r0
 8003a82:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d12c      	bne.n	8003ae4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6812      	ldr	r2, [r2, #0]
 8003a94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a9c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6899      	ldr	r1, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	68d2      	ldr	r2, [r2, #12]
 8003ac4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6919      	ldr	r1, [r3, #16]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	041a      	lsls	r2, r3, #16
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f881 	bl	8003be2 <RTC_ExitInitMode>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d113      	bne.n	8003b12 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003af8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699a      	ldr	r2, [r3, #24]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	22ff      	movs	r2, #255	; 0xff
 8003b18:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b3e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b40:	f7fe f942 	bl	8001dc8 <HAL_GetTick>
 8003b44:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b46:	e009      	b.n	8003b5c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b48:	f7fe f93e 	bl	8001dc8 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b56:	d901      	bls.n	8003b5c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e007      	b.n	8003b6c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0ee      	beq.n	8003b48 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d122      	bne.n	8003bd8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ba0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ba2:	f7fe f911 	bl	8001dc8 <HAL_GetTick>
 8003ba6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003ba8:	e00c      	b.n	8003bc4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003baa:	f7fe f90d 	bl	8001dc8 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bb8:	d904      	bls.n	8003bc4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d102      	bne.n	8003bd8 <RTC_EnterInitMode+0x64>
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d1e8      	bne.n	8003baa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bfc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10a      	bne.n	8003c22 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff ff89 	bl	8003b24 <HAL_RTC_WaitForSynchro>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d004      	beq.n	8003c22 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2204      	movs	r2, #4
 8003c1c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e041      	b.n	8003cc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d106      	bne.n	8003c58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f839 	bl	8003cca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3304      	adds	r3, #4
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	f000 f9d8 	bl	8004020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d001      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e04e      	b.n	8003d96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a23      	ldr	r2, [pc, #140]	; (8003da4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d022      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x80>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d22:	d01d      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x80>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a1f      	ldr	r2, [pc, #124]	; (8003da8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d018      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x80>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a1e      	ldr	r2, [pc, #120]	; (8003dac <HAL_TIM_Base_Start_IT+0xcc>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d013      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x80>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a1c      	ldr	r2, [pc, #112]	; (8003db0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00e      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x80>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1b      	ldr	r2, [pc, #108]	; (8003db4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d009      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x80>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a19      	ldr	r2, [pc, #100]	; (8003db8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d004      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x80>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a18      	ldr	r2, [pc, #96]	; (8003dbc <HAL_TIM_Base_Start_IT+0xdc>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d111      	bne.n	8003d84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b06      	cmp	r3, #6
 8003d70:	d010      	beq.n	8003d94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f042 0201 	orr.w	r2, r2, #1
 8003d80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d82:	e007      	b.n	8003d94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40010000 	.word	0x40010000
 8003da8:	40000400 	.word	0x40000400
 8003dac:	40000800 	.word	0x40000800
 8003db0:	40000c00 	.word	0x40000c00
 8003db4:	40010400 	.word	0x40010400
 8003db8:	40014000 	.word	0x40014000
 8003dbc:	40001800 	.word	0x40001800

08003dc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d122      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d11b      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f06f 0202 	mvn.w	r2, #2
 8003dec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f8ee 	bl	8003fe4 <HAL_TIM_IC_CaptureCallback>
 8003e08:	e005      	b.n	8003e16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f8e0 	bl	8003fd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f8f1 	bl	8003ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d122      	bne.n	8003e70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d11b      	bne.n	8003e70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0204 	mvn.w	r2, #4
 8003e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2202      	movs	r2, #2
 8003e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f8c4 	bl	8003fe4 <HAL_TIM_IC_CaptureCallback>
 8003e5c:	e005      	b.n	8003e6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f8b6 	bl	8003fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f8c7 	bl	8003ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d122      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d11b      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0208 	mvn.w	r2, #8
 8003e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2204      	movs	r2, #4
 8003e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f89a 	bl	8003fe4 <HAL_TIM_IC_CaptureCallback>
 8003eb0:	e005      	b.n	8003ebe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f88c 	bl	8003fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f89d 	bl	8003ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	2b10      	cmp	r3, #16
 8003ed0:	d122      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	2b10      	cmp	r3, #16
 8003ede:	d11b      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0210 	mvn.w	r2, #16
 8003ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2208      	movs	r2, #8
 8003eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f870 	bl	8003fe4 <HAL_TIM_IC_CaptureCallback>
 8003f04:	e005      	b.n	8003f12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f862 	bl	8003fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f873 	bl	8003ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d10e      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d107      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0201 	mvn.w	r2, #1
 8003f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fd fc36 	bl	80017b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4e:	2b80      	cmp	r3, #128	; 0x80
 8003f50:	d10e      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5c:	2b80      	cmp	r3, #128	; 0x80
 8003f5e:	d107      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f902 	bl	8004174 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7a:	2b40      	cmp	r3, #64	; 0x40
 8003f7c:	d10e      	bne.n	8003f9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f88:	2b40      	cmp	r3, #64	; 0x40
 8003f8a:	d107      	bne.n	8003f9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f838 	bl	800400c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b20      	cmp	r3, #32
 8003fa8:	d10e      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	2b20      	cmp	r3, #32
 8003fb6:	d107      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f06f 0220 	mvn.w	r2, #32
 8003fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f8cc 	bl	8004160 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fc8:	bf00      	nop
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a40      	ldr	r2, [pc, #256]	; (8004134 <TIM_Base_SetConfig+0x114>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d013      	beq.n	8004060 <TIM_Base_SetConfig+0x40>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403e:	d00f      	beq.n	8004060 <TIM_Base_SetConfig+0x40>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a3d      	ldr	r2, [pc, #244]	; (8004138 <TIM_Base_SetConfig+0x118>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00b      	beq.n	8004060 <TIM_Base_SetConfig+0x40>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a3c      	ldr	r2, [pc, #240]	; (800413c <TIM_Base_SetConfig+0x11c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d007      	beq.n	8004060 <TIM_Base_SetConfig+0x40>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a3b      	ldr	r2, [pc, #236]	; (8004140 <TIM_Base_SetConfig+0x120>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d003      	beq.n	8004060 <TIM_Base_SetConfig+0x40>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a3a      	ldr	r2, [pc, #232]	; (8004144 <TIM_Base_SetConfig+0x124>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d108      	bne.n	8004072 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a2f      	ldr	r2, [pc, #188]	; (8004134 <TIM_Base_SetConfig+0x114>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d02b      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004080:	d027      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a2c      	ldr	r2, [pc, #176]	; (8004138 <TIM_Base_SetConfig+0x118>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d023      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a2b      	ldr	r2, [pc, #172]	; (800413c <TIM_Base_SetConfig+0x11c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d01f      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a2a      	ldr	r2, [pc, #168]	; (8004140 <TIM_Base_SetConfig+0x120>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d01b      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a29      	ldr	r2, [pc, #164]	; (8004144 <TIM_Base_SetConfig+0x124>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d017      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a28      	ldr	r2, [pc, #160]	; (8004148 <TIM_Base_SetConfig+0x128>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d013      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a27      	ldr	r2, [pc, #156]	; (800414c <TIM_Base_SetConfig+0x12c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00f      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a26      	ldr	r2, [pc, #152]	; (8004150 <TIM_Base_SetConfig+0x130>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00b      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a25      	ldr	r2, [pc, #148]	; (8004154 <TIM_Base_SetConfig+0x134>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d007      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a24      	ldr	r2, [pc, #144]	; (8004158 <TIM_Base_SetConfig+0x138>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d003      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a23      	ldr	r2, [pc, #140]	; (800415c <TIM_Base_SetConfig+0x13c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d108      	bne.n	80040e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a0a      	ldr	r2, [pc, #40]	; (8004134 <TIM_Base_SetConfig+0x114>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d003      	beq.n	8004118 <TIM_Base_SetConfig+0xf8>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a0c      	ldr	r2, [pc, #48]	; (8004144 <TIM_Base_SetConfig+0x124>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d103      	bne.n	8004120 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	615a      	str	r2, [r3, #20]
}
 8004126:	bf00      	nop
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40010000 	.word	0x40010000
 8004138:	40000400 	.word	0x40000400
 800413c:	40000800 	.word	0x40000800
 8004140:	40000c00 	.word	0x40000c00
 8004144:	40010400 	.word	0x40010400
 8004148:	40014000 	.word	0x40014000
 800414c:	40014400 	.word	0x40014400
 8004150:	40014800 	.word	0x40014800
 8004154:	40001800 	.word	0x40001800
 8004158:	40001c00 	.word	0x40001c00
 800415c:	40002000 	.word	0x40002000

08004160 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e03f      	b.n	800421a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d106      	bne.n	80041b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fd fc32 	bl	8001a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2224      	movs	r2, #36	; 0x24
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fde9 	bl	8004da4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695a      	ldr	r2, [r3, #20]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004200:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b08a      	sub	sp, #40	; 0x28
 8004226:	af02      	add	r7, sp, #8
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	603b      	str	r3, [r7, #0]
 800422e:	4613      	mov	r3, r2
 8004230:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b20      	cmp	r3, #32
 8004240:	d17c      	bne.n	800433c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <HAL_UART_Transmit+0x2c>
 8004248:	88fb      	ldrh	r3, [r7, #6]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e075      	b.n	800433e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_UART_Transmit+0x3e>
 800425c:	2302      	movs	r3, #2
 800425e:	e06e      	b.n	800433e <HAL_UART_Transmit+0x11c>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2221      	movs	r2, #33	; 0x21
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004276:	f7fd fda7 	bl	8001dc8 <HAL_GetTick>
 800427a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	88fa      	ldrh	r2, [r7, #6]
 8004280:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	88fa      	ldrh	r2, [r7, #6]
 8004286:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004290:	d108      	bne.n	80042a4 <HAL_UART_Transmit+0x82>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d104      	bne.n	80042a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	61bb      	str	r3, [r7, #24]
 80042a2:	e003      	b.n	80042ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80042b4:	e02a      	b.n	800430c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2200      	movs	r2, #0
 80042be:	2180      	movs	r1, #128	; 0x80
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 fb29 	bl	8004918 <UART_WaitOnFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e036      	b.n	800433e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10b      	bne.n	80042ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	3302      	adds	r3, #2
 80042ea:	61bb      	str	r3, [r7, #24]
 80042ec:	e007      	b.n	80042fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	781a      	ldrb	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	3301      	adds	r3, #1
 80042fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1cf      	bne.n	80042b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2200      	movs	r2, #0
 800431e:	2140      	movs	r1, #64	; 0x40
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 faf9 	bl	8004918 <UART_WaitOnFlagUntilTimeout>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e006      	b.n	800433e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004338:	2300      	movs	r3, #0
 800433a:	e000      	b.n	800433e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800433c:	2302      	movs	r3, #2
  }
}
 800433e:	4618      	mov	r0, r3
 8004340:	3720      	adds	r7, #32
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	4613      	mov	r3, r2
 8004352:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b20      	cmp	r3, #32
 800435e:	d11d      	bne.n	800439c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_UART_Receive_IT+0x26>
 8004366:	88fb      	ldrh	r3, [r7, #6]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e016      	b.n	800439e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004376:	2b01      	cmp	r3, #1
 8004378:	d101      	bne.n	800437e <HAL_UART_Receive_IT+0x38>
 800437a:	2302      	movs	r3, #2
 800437c:	e00f      	b.n	800439e <HAL_UART_Receive_IT+0x58>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800438c:	88fb      	ldrh	r3, [r7, #6]
 800438e:	461a      	mov	r2, r3
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 fb2e 	bl	80049f4 <UART_Start_Receive_IT>
 8004398:	4603      	mov	r3, r0
 800439a:	e000      	b.n	800439e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800439c:	2302      	movs	r3, #2
  }
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b0ba      	sub	sp, #232	; 0xe8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80043ce:	2300      	movs	r3, #0
 80043d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80043e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10f      	bne.n	800440e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f2:	f003 0320 	and.w	r3, r3, #32
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d009      	beq.n	800440e <HAL_UART_IRQHandler+0x66>
 80043fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043fe:	f003 0320 	and.w	r3, r3, #32
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fc11 	bl	8004c2e <UART_Receive_IT>
      return;
 800440c:	e256      	b.n	80048bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800440e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 80de 	beq.w	80045d4 <HAL_UART_IRQHandler+0x22c>
 8004418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d106      	bne.n	8004432 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004428:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 80d1 	beq.w	80045d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00b      	beq.n	8004456 <HAL_UART_IRQHandler+0xae>
 800443e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004446:	2b00      	cmp	r3, #0
 8004448:	d005      	beq.n	8004456 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f043 0201 	orr.w	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00b      	beq.n	800447a <HAL_UART_IRQHandler+0xd2>
 8004462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	f043 0202 	orr.w	r2, r3, #2
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800447a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00b      	beq.n	800449e <HAL_UART_IRQHandler+0xf6>
 8004486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f043 0204 	orr.w	r2, r3, #4
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800449e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d011      	beq.n	80044ce <HAL_UART_IRQHandler+0x126>
 80044aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d105      	bne.n	80044c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80044b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d005      	beq.n	80044ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	f043 0208 	orr.w	r2, r3, #8
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 81ed 	beq.w	80048b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044dc:	f003 0320 	and.w	r3, r3, #32
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <HAL_UART_IRQHandler+0x14e>
 80044e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044e8:	f003 0320 	and.w	r3, r3, #32
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 fb9c 	bl	8004c2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004500:	2b40      	cmp	r3, #64	; 0x40
 8004502:	bf0c      	ite	eq
 8004504:	2301      	moveq	r3, #1
 8004506:	2300      	movne	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d103      	bne.n	8004522 <HAL_UART_IRQHandler+0x17a>
 800451a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800451e:	2b00      	cmp	r3, #0
 8004520:	d04f      	beq.n	80045c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 faa4 	bl	8004a70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004532:	2b40      	cmp	r3, #64	; 0x40
 8004534:	d141      	bne.n	80045ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3314      	adds	r3, #20
 800453c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800454c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004554:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3314      	adds	r3, #20
 800455e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004562:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004566:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800456e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004572:	e841 2300 	strex	r3, r2, [r1]
 8004576:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800457a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1d9      	bne.n	8004536 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	2b00      	cmp	r3, #0
 8004588:	d013      	beq.n	80045b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	4a7d      	ldr	r2, [pc, #500]	; (8004784 <HAL_UART_IRQHandler+0x3dc>)
 8004590:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004596:	4618      	mov	r0, r3
 8004598:	f7fd fd98 	bl	80020cc <HAL_DMA_Abort_IT>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d016      	beq.n	80045d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045ac:	4610      	mov	r0, r2
 80045ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b0:	e00e      	b.n	80045d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f99a 	bl	80048ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b8:	e00a      	b.n	80045d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f996 	bl	80048ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c0:	e006      	b.n	80045d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f992 	bl	80048ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80045ce:	e170      	b.n	80048b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d0:	bf00      	nop
    return;
 80045d2:	e16e      	b.n	80048b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d8:	2b01      	cmp	r3, #1
 80045da:	f040 814a 	bne.w	8004872 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80045de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e2:	f003 0310 	and.w	r3, r3, #16
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 8143 	beq.w	8004872 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80045ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045f0:	f003 0310 	and.w	r3, r3, #16
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 813c 	beq.w	8004872 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045fa:	2300      	movs	r3, #0
 80045fc:	60bb      	str	r3, [r7, #8]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461a:	2b40      	cmp	r3, #64	; 0x40
 800461c:	f040 80b4 	bne.w	8004788 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800462c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 8140 	beq.w	80048b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800463a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800463e:	429a      	cmp	r2, r3
 8004640:	f080 8139 	bcs.w	80048b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800464a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004656:	f000 8088 	beq.w	800476a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	330c      	adds	r3, #12
 8004660:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004664:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004668:	e853 3f00 	ldrex	r3, [r3]
 800466c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004670:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004678:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	330c      	adds	r3, #12
 8004682:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004686:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800468a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004692:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004696:	e841 2300 	strex	r3, r2, [r1]
 800469a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800469e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1d9      	bne.n	800465a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3314      	adds	r3, #20
 80046ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80046b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046b8:	f023 0301 	bic.w	r3, r3, #1
 80046bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3314      	adds	r3, #20
 80046c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046d6:	e841 2300 	strex	r3, r2, [r1]
 80046da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80046dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1e1      	bne.n	80046a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3314      	adds	r3, #20
 80046e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046ec:	e853 3f00 	ldrex	r3, [r3]
 80046f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80046f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3314      	adds	r3, #20
 8004702:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004706:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004708:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800470c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800470e:	e841 2300 	strex	r3, r2, [r1]
 8004712:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1e3      	bne.n	80046e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2220      	movs	r2, #32
 800471e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	330c      	adds	r3, #12
 800472e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004732:	e853 3f00 	ldrex	r3, [r3]
 8004736:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800473a:	f023 0310 	bic.w	r3, r3, #16
 800473e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	330c      	adds	r3, #12
 8004748:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800474c:	65ba      	str	r2, [r7, #88]	; 0x58
 800474e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004750:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004752:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004754:	e841 2300 	strex	r3, r2, [r1]
 8004758:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800475a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1e3      	bne.n	8004728 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	4618      	mov	r0, r3
 8004766:	f7fd fc41 	bl	8001fec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004772:	b29b      	uxth	r3, r3
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	b29b      	uxth	r3, r3
 8004778:	4619      	mov	r1, r3
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f8c0 	bl	8004900 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004780:	e099      	b.n	80048b6 <HAL_UART_IRQHandler+0x50e>
 8004782:	bf00      	nop
 8004784:	08004b37 	.word	0x08004b37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004790:	b29b      	uxth	r3, r3
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 808b 	beq.w	80048ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80047a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 8086 	beq.w	80048ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	330c      	adds	r3, #12
 80047b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	330c      	adds	r3, #12
 80047ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80047d2:	647a      	str	r2, [r7, #68]	; 0x44
 80047d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047da:	e841 2300 	strex	r3, r2, [r1]
 80047de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1e3      	bne.n	80047ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3314      	adds	r3, #20
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	e853 3f00 	ldrex	r3, [r3]
 80047f4:	623b      	str	r3, [r7, #32]
   return(result);
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	f023 0301 	bic.w	r3, r3, #1
 80047fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3314      	adds	r3, #20
 8004806:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800480a:	633a      	str	r2, [r7, #48]	; 0x30
 800480c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004812:	e841 2300 	strex	r3, r2, [r1]
 8004816:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1e3      	bne.n	80047e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	330c      	adds	r3, #12
 8004832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	e853 3f00 	ldrex	r3, [r3]
 800483a:	60fb      	str	r3, [r7, #12]
   return(result);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0310 	bic.w	r3, r3, #16
 8004842:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	330c      	adds	r3, #12
 800484c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004850:	61fa      	str	r2, [r7, #28]
 8004852:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004854:	69b9      	ldr	r1, [r7, #24]
 8004856:	69fa      	ldr	r2, [r7, #28]
 8004858:	e841 2300 	strex	r3, r2, [r1]
 800485c:	617b      	str	r3, [r7, #20]
   return(result);
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1e3      	bne.n	800482c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004864:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004868:	4619      	mov	r1, r3
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f848 	bl	8004900 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004870:	e023      	b.n	80048ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487a:	2b00      	cmp	r3, #0
 800487c:	d009      	beq.n	8004892 <HAL_UART_IRQHandler+0x4ea>
 800487e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f967 	bl	8004b5e <UART_Transmit_IT>
    return;
 8004890:	e014      	b.n	80048bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00e      	beq.n	80048bc <HAL_UART_IRQHandler+0x514>
 800489e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d008      	beq.n	80048bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f9a7 	bl	8004bfe <UART_EndTransmit_IT>
    return;
 80048b0:	e004      	b.n	80048bc <HAL_UART_IRQHandler+0x514>
    return;
 80048b2:	bf00      	nop
 80048b4:	e002      	b.n	80048bc <HAL_UART_IRQHandler+0x514>
      return;
 80048b6:	bf00      	nop
 80048b8:	e000      	b.n	80048bc <HAL_UART_IRQHandler+0x514>
      return;
 80048ba:	bf00      	nop
  }
}
 80048bc:	37e8      	adds	r7, #232	; 0xe8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop

080048c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	460b      	mov	r3, r1
 800490a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b090      	sub	sp, #64	; 0x40
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	4613      	mov	r3, r2
 8004926:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004928:	e050      	b.n	80049cc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800492c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004930:	d04c      	beq.n	80049cc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004934:	2b00      	cmp	r3, #0
 8004936:	d007      	beq.n	8004948 <UART_WaitOnFlagUntilTimeout+0x30>
 8004938:	f7fd fa46 	bl	8001dc8 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004944:	429a      	cmp	r2, r3
 8004946:	d241      	bcs.n	80049cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	330c      	adds	r3, #12
 800494e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004952:	e853 3f00 	ldrex	r3, [r3]
 8004956:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800495e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	330c      	adds	r3, #12
 8004966:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004968:	637a      	str	r2, [r7, #52]	; 0x34
 800496a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800496e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004970:	e841 2300 	strex	r3, r2, [r1]
 8004974:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1e5      	bne.n	8004948 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3314      	adds	r3, #20
 8004982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	e853 3f00 	ldrex	r3, [r3]
 800498a:	613b      	str	r3, [r7, #16]
   return(result);
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f023 0301 	bic.w	r3, r3, #1
 8004992:	63bb      	str	r3, [r7, #56]	; 0x38
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3314      	adds	r3, #20
 800499a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800499c:	623a      	str	r2, [r7, #32]
 800499e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a0:	69f9      	ldr	r1, [r7, #28]
 80049a2:	6a3a      	ldr	r2, [r7, #32]
 80049a4:	e841 2300 	strex	r3, r2, [r1]
 80049a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1e5      	bne.n	800497c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e00f      	b.n	80049ec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	4013      	ands	r3, r2
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	429a      	cmp	r2, r3
 80049da:	bf0c      	ite	eq
 80049dc:	2301      	moveq	r3, #1
 80049de:	2300      	movne	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	461a      	mov	r2, r3
 80049e4:	79fb      	ldrb	r3, [r7, #7]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d09f      	beq.n	800492a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3740      	adds	r7, #64	; 0x40
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	4613      	mov	r3, r2
 8004a00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	88fa      	ldrh	r2, [r7, #6]
 8004a0c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	88fa      	ldrh	r2, [r7, #6]
 8004a12:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2222      	movs	r2, #34	; 0x22
 8004a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d007      	beq.n	8004a42 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68da      	ldr	r2, [r3, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a40:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695a      	ldr	r2, [r3, #20]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f042 0201 	orr.w	r2, r2, #1
 8004a50:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0220 	orr.w	r2, r2, #32
 8004a60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b095      	sub	sp, #84	; 0x54
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	330c      	adds	r3, #12
 8004a7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	330c      	adds	r3, #12
 8004a96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a98:	643a      	str	r2, [r7, #64]	; 0x40
 8004a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e5      	bne.n	8004a78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3314      	adds	r3, #20
 8004ab2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	e853 3f00 	ldrex	r3, [r3]
 8004aba:	61fb      	str	r3, [r7, #28]
   return(result);
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	f023 0301 	bic.w	r3, r3, #1
 8004ac2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3314      	adds	r3, #20
 8004aca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004acc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ace:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ad4:	e841 2300 	strex	r3, r2, [r1]
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1e5      	bne.n	8004aac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d119      	bne.n	8004b1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	330c      	adds	r3, #12
 8004aee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	e853 3f00 	ldrex	r3, [r3]
 8004af6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f023 0310 	bic.w	r3, r3, #16
 8004afe:	647b      	str	r3, [r7, #68]	; 0x44
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	330c      	adds	r3, #12
 8004b06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b08:	61ba      	str	r2, [r7, #24]
 8004b0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0c:	6979      	ldr	r1, [r7, #20]
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	e841 2300 	strex	r3, r2, [r1]
 8004b14:	613b      	str	r3, [r7, #16]
   return(result);
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1e5      	bne.n	8004ae8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b2a:	bf00      	nop
 8004b2c:	3754      	adds	r7, #84	; 0x54
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b084      	sub	sp, #16
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f7ff fecb 	bl	80048ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b56:	bf00      	nop
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b085      	sub	sp, #20
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b21      	cmp	r3, #33	; 0x21
 8004b70:	d13e      	bne.n	8004bf0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7a:	d114      	bne.n	8004ba6 <UART_Transmit_IT+0x48>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d110      	bne.n	8004ba6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	1c9a      	adds	r2, r3, #2
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	621a      	str	r2, [r3, #32]
 8004ba4:	e008      	b.n	8004bb8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	1c59      	adds	r1, r3, #1
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6211      	str	r1, [r2, #32]
 8004bb0:	781a      	ldrb	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10f      	bne.n	8004bec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	e000      	b.n	8004bf2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004bf0:	2302      	movs	r3, #2
  }
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b082      	sub	sp, #8
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff fe50 	bl	80048c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b08c      	sub	sp, #48	; 0x30
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b22      	cmp	r3, #34	; 0x22
 8004c40:	f040 80ab 	bne.w	8004d9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c4c:	d117      	bne.n	8004c7e <UART_Receive_IT+0x50>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d113      	bne.n	8004c7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c56:	2300      	movs	r3, #0
 8004c58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c76:	1c9a      	adds	r2, r3, #2
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	629a      	str	r2, [r3, #40]	; 0x28
 8004c7c:	e026      	b.n	8004ccc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c84:	2300      	movs	r3, #0
 8004c86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c90:	d007      	beq.n	8004ca2 <UART_Receive_IT+0x74>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10a      	bne.n	8004cb0 <UART_Receive_IT+0x82>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cac:	701a      	strb	r2, [r3, #0]
 8004cae:	e008      	b.n	8004cc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d15a      	bne.n	8004d96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0220 	bic.w	r2, r2, #32
 8004cee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695a      	ldr	r2, [r3, #20]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0201 	bic.w	r2, r2, #1
 8004d0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d135      	bne.n	8004d8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	330c      	adds	r3, #12
 8004d2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	e853 3f00 	ldrex	r3, [r3]
 8004d34:	613b      	str	r3, [r7, #16]
   return(result);
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f023 0310 	bic.w	r3, r3, #16
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	330c      	adds	r3, #12
 8004d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d46:	623a      	str	r2, [r7, #32]
 8004d48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4a:	69f9      	ldr	r1, [r7, #28]
 8004d4c:	6a3a      	ldr	r2, [r7, #32]
 8004d4e:	e841 2300 	strex	r3, r2, [r1]
 8004d52:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1e5      	bne.n	8004d26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0310 	and.w	r3, r3, #16
 8004d64:	2b10      	cmp	r3, #16
 8004d66:	d10a      	bne.n	8004d7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d82:	4619      	mov	r1, r3
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff fdbb 	bl	8004900 <HAL_UARTEx_RxEventCallback>
 8004d8a:	e002      	b.n	8004d92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7ff fda3 	bl	80048d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	e002      	b.n	8004d9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	e000      	b.n	8004d9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004d9a:	2302      	movs	r3, #2
  }
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3730      	adds	r7, #48	; 0x30
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004da8:	b0c0      	sub	sp, #256	; 0x100
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc0:	68d9      	ldr	r1, [r3, #12]
 8004dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	ea40 0301 	orr.w	r3, r0, r1
 8004dcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004dfc:	f021 010c 	bic.w	r1, r1, #12
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e0a:	430b      	orrs	r3, r1
 8004e0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e1e:	6999      	ldr	r1, [r3, #24]
 8004e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	ea40 0301 	orr.w	r3, r0, r1
 8004e2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	4b8f      	ldr	r3, [pc, #572]	; (8005070 <UART_SetConfig+0x2cc>)
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d005      	beq.n	8004e44 <UART_SetConfig+0xa0>
 8004e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	4b8d      	ldr	r3, [pc, #564]	; (8005074 <UART_SetConfig+0x2d0>)
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d104      	bne.n	8004e4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e44:	f7fe fbf2 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 8004e48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e4c:	e003      	b.n	8004e56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e4e:	f7fe fbd9 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 8004e52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e60:	f040 810c 	bne.w	800507c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e76:	4622      	mov	r2, r4
 8004e78:	462b      	mov	r3, r5
 8004e7a:	1891      	adds	r1, r2, r2
 8004e7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e7e:	415b      	adcs	r3, r3
 8004e80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e86:	4621      	mov	r1, r4
 8004e88:	eb12 0801 	adds.w	r8, r2, r1
 8004e8c:	4629      	mov	r1, r5
 8004e8e:	eb43 0901 	adc.w	r9, r3, r1
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ea6:	4690      	mov	r8, r2
 8004ea8:	4699      	mov	r9, r3
 8004eaa:	4623      	mov	r3, r4
 8004eac:	eb18 0303 	adds.w	r3, r8, r3
 8004eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004eb4:	462b      	mov	r3, r5
 8004eb6:	eb49 0303 	adc.w	r3, r9, r3
 8004eba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004eca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ece:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	18db      	adds	r3, r3, r3
 8004ed6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ed8:	4613      	mov	r3, r2
 8004eda:	eb42 0303 	adc.w	r3, r2, r3
 8004ede:	657b      	str	r3, [r7, #84]	; 0x54
 8004ee0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ee4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ee8:	f7fb f9da 	bl	80002a0 <__aeabi_uldivmod>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4b61      	ldr	r3, [pc, #388]	; (8005078 <UART_SetConfig+0x2d4>)
 8004ef2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	011c      	lsls	r4, r3, #4
 8004efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f0c:	4642      	mov	r2, r8
 8004f0e:	464b      	mov	r3, r9
 8004f10:	1891      	adds	r1, r2, r2
 8004f12:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f14:	415b      	adcs	r3, r3
 8004f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f1c:	4641      	mov	r1, r8
 8004f1e:	eb12 0a01 	adds.w	sl, r2, r1
 8004f22:	4649      	mov	r1, r9
 8004f24:	eb43 0b01 	adc.w	fp, r3, r1
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f3c:	4692      	mov	sl, r2
 8004f3e:	469b      	mov	fp, r3
 8004f40:	4643      	mov	r3, r8
 8004f42:	eb1a 0303 	adds.w	r3, sl, r3
 8004f46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f4a:	464b      	mov	r3, r9
 8004f4c:	eb4b 0303 	adc.w	r3, fp, r3
 8004f50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	18db      	adds	r3, r3, r3
 8004f6c:	643b      	str	r3, [r7, #64]	; 0x40
 8004f6e:	4613      	mov	r3, r2
 8004f70:	eb42 0303 	adc.w	r3, r2, r3
 8004f74:	647b      	str	r3, [r7, #68]	; 0x44
 8004f76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f7e:	f7fb f98f 	bl	80002a0 <__aeabi_uldivmod>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4611      	mov	r1, r2
 8004f88:	4b3b      	ldr	r3, [pc, #236]	; (8005078 <UART_SetConfig+0x2d4>)
 8004f8a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	2264      	movs	r2, #100	; 0x64
 8004f92:	fb02 f303 	mul.w	r3, r2, r3
 8004f96:	1acb      	subs	r3, r1, r3
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f9e:	4b36      	ldr	r3, [pc, #216]	; (8005078 <UART_SetConfig+0x2d4>)
 8004fa0:	fba3 2302 	umull	r2, r3, r3, r2
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fac:	441c      	add	r4, r3
 8004fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fb8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004fbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004fc0:	4642      	mov	r2, r8
 8004fc2:	464b      	mov	r3, r9
 8004fc4:	1891      	adds	r1, r2, r2
 8004fc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fc8:	415b      	adcs	r3, r3
 8004fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004fd0:	4641      	mov	r1, r8
 8004fd2:	1851      	adds	r1, r2, r1
 8004fd4:	6339      	str	r1, [r7, #48]	; 0x30
 8004fd6:	4649      	mov	r1, r9
 8004fd8:	414b      	adcs	r3, r1
 8004fda:	637b      	str	r3, [r7, #52]	; 0x34
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004fe8:	4659      	mov	r1, fp
 8004fea:	00cb      	lsls	r3, r1, #3
 8004fec:	4651      	mov	r1, sl
 8004fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ff2:	4651      	mov	r1, sl
 8004ff4:	00ca      	lsls	r2, r1, #3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	4642      	mov	r2, r8
 8004ffe:	189b      	adds	r3, r3, r2
 8005000:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005004:	464b      	mov	r3, r9
 8005006:	460a      	mov	r2, r1
 8005008:	eb42 0303 	adc.w	r3, r2, r3
 800500c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800501c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005020:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005024:	460b      	mov	r3, r1
 8005026:	18db      	adds	r3, r3, r3
 8005028:	62bb      	str	r3, [r7, #40]	; 0x28
 800502a:	4613      	mov	r3, r2
 800502c:	eb42 0303 	adc.w	r3, r2, r3
 8005030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005032:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005036:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800503a:	f7fb f931 	bl	80002a0 <__aeabi_uldivmod>
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	4b0d      	ldr	r3, [pc, #52]	; (8005078 <UART_SetConfig+0x2d4>)
 8005044:	fba3 1302 	umull	r1, r3, r3, r2
 8005048:	095b      	lsrs	r3, r3, #5
 800504a:	2164      	movs	r1, #100	; 0x64
 800504c:	fb01 f303 	mul.w	r3, r1, r3
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	3332      	adds	r3, #50	; 0x32
 8005056:	4a08      	ldr	r2, [pc, #32]	; (8005078 <UART_SetConfig+0x2d4>)
 8005058:	fba2 2303 	umull	r2, r3, r2, r3
 800505c:	095b      	lsrs	r3, r3, #5
 800505e:	f003 0207 	and.w	r2, r3, #7
 8005062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4422      	add	r2, r4
 800506a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800506c:	e105      	b.n	800527a <UART_SetConfig+0x4d6>
 800506e:	bf00      	nop
 8005070:	40011000 	.word	0x40011000
 8005074:	40011400 	.word	0x40011400
 8005078:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800507c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005080:	2200      	movs	r2, #0
 8005082:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005086:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800508a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800508e:	4642      	mov	r2, r8
 8005090:	464b      	mov	r3, r9
 8005092:	1891      	adds	r1, r2, r2
 8005094:	6239      	str	r1, [r7, #32]
 8005096:	415b      	adcs	r3, r3
 8005098:	627b      	str	r3, [r7, #36]	; 0x24
 800509a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800509e:	4641      	mov	r1, r8
 80050a0:	1854      	adds	r4, r2, r1
 80050a2:	4649      	mov	r1, r9
 80050a4:	eb43 0501 	adc.w	r5, r3, r1
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	00eb      	lsls	r3, r5, #3
 80050b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050b6:	00e2      	lsls	r2, r4, #3
 80050b8:	4614      	mov	r4, r2
 80050ba:	461d      	mov	r5, r3
 80050bc:	4643      	mov	r3, r8
 80050be:	18e3      	adds	r3, r4, r3
 80050c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050c4:	464b      	mov	r3, r9
 80050c6:	eb45 0303 	adc.w	r3, r5, r3
 80050ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80050ea:	4629      	mov	r1, r5
 80050ec:	008b      	lsls	r3, r1, #2
 80050ee:	4621      	mov	r1, r4
 80050f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050f4:	4621      	mov	r1, r4
 80050f6:	008a      	lsls	r2, r1, #2
 80050f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80050fc:	f7fb f8d0 	bl	80002a0 <__aeabi_uldivmod>
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	4b60      	ldr	r3, [pc, #384]	; (8005288 <UART_SetConfig+0x4e4>)
 8005106:	fba3 2302 	umull	r2, r3, r3, r2
 800510a:	095b      	lsrs	r3, r3, #5
 800510c:	011c      	lsls	r4, r3, #4
 800510e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005112:	2200      	movs	r2, #0
 8005114:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005118:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800511c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005120:	4642      	mov	r2, r8
 8005122:	464b      	mov	r3, r9
 8005124:	1891      	adds	r1, r2, r2
 8005126:	61b9      	str	r1, [r7, #24]
 8005128:	415b      	adcs	r3, r3
 800512a:	61fb      	str	r3, [r7, #28]
 800512c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005130:	4641      	mov	r1, r8
 8005132:	1851      	adds	r1, r2, r1
 8005134:	6139      	str	r1, [r7, #16]
 8005136:	4649      	mov	r1, r9
 8005138:	414b      	adcs	r3, r1
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	f04f 0200 	mov.w	r2, #0
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005148:	4659      	mov	r1, fp
 800514a:	00cb      	lsls	r3, r1, #3
 800514c:	4651      	mov	r1, sl
 800514e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005152:	4651      	mov	r1, sl
 8005154:	00ca      	lsls	r2, r1, #3
 8005156:	4610      	mov	r0, r2
 8005158:	4619      	mov	r1, r3
 800515a:	4603      	mov	r3, r0
 800515c:	4642      	mov	r2, r8
 800515e:	189b      	adds	r3, r3, r2
 8005160:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005164:	464b      	mov	r3, r9
 8005166:	460a      	mov	r2, r1
 8005168:	eb42 0303 	adc.w	r3, r2, r3
 800516c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	67bb      	str	r3, [r7, #120]	; 0x78
 800517a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005188:	4649      	mov	r1, r9
 800518a:	008b      	lsls	r3, r1, #2
 800518c:	4641      	mov	r1, r8
 800518e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005192:	4641      	mov	r1, r8
 8005194:	008a      	lsls	r2, r1, #2
 8005196:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800519a:	f7fb f881 	bl	80002a0 <__aeabi_uldivmod>
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	4b39      	ldr	r3, [pc, #228]	; (8005288 <UART_SetConfig+0x4e4>)
 80051a4:	fba3 1302 	umull	r1, r3, r3, r2
 80051a8:	095b      	lsrs	r3, r3, #5
 80051aa:	2164      	movs	r1, #100	; 0x64
 80051ac:	fb01 f303 	mul.w	r3, r1, r3
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	3332      	adds	r3, #50	; 0x32
 80051b6:	4a34      	ldr	r2, [pc, #208]	; (8005288 <UART_SetConfig+0x4e4>)
 80051b8:	fba2 2303 	umull	r2, r3, r2, r3
 80051bc:	095b      	lsrs	r3, r3, #5
 80051be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051c2:	441c      	add	r4, r3
 80051c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051c8:	2200      	movs	r2, #0
 80051ca:	673b      	str	r3, [r7, #112]	; 0x70
 80051cc:	677a      	str	r2, [r7, #116]	; 0x74
 80051ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051d2:	4642      	mov	r2, r8
 80051d4:	464b      	mov	r3, r9
 80051d6:	1891      	adds	r1, r2, r2
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	415b      	adcs	r3, r3
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051e2:	4641      	mov	r1, r8
 80051e4:	1851      	adds	r1, r2, r1
 80051e6:	6039      	str	r1, [r7, #0]
 80051e8:	4649      	mov	r1, r9
 80051ea:	414b      	adcs	r3, r1
 80051ec:	607b      	str	r3, [r7, #4]
 80051ee:	f04f 0200 	mov.w	r2, #0
 80051f2:	f04f 0300 	mov.w	r3, #0
 80051f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051fa:	4659      	mov	r1, fp
 80051fc:	00cb      	lsls	r3, r1, #3
 80051fe:	4651      	mov	r1, sl
 8005200:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005204:	4651      	mov	r1, sl
 8005206:	00ca      	lsls	r2, r1, #3
 8005208:	4610      	mov	r0, r2
 800520a:	4619      	mov	r1, r3
 800520c:	4603      	mov	r3, r0
 800520e:	4642      	mov	r2, r8
 8005210:	189b      	adds	r3, r3, r2
 8005212:	66bb      	str	r3, [r7, #104]	; 0x68
 8005214:	464b      	mov	r3, r9
 8005216:	460a      	mov	r2, r1
 8005218:	eb42 0303 	adc.w	r3, r2, r3
 800521c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800521e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	663b      	str	r3, [r7, #96]	; 0x60
 8005228:	667a      	str	r2, [r7, #100]	; 0x64
 800522a:	f04f 0200 	mov.w	r2, #0
 800522e:	f04f 0300 	mov.w	r3, #0
 8005232:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005236:	4649      	mov	r1, r9
 8005238:	008b      	lsls	r3, r1, #2
 800523a:	4641      	mov	r1, r8
 800523c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005240:	4641      	mov	r1, r8
 8005242:	008a      	lsls	r2, r1, #2
 8005244:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005248:	f7fb f82a 	bl	80002a0 <__aeabi_uldivmod>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4b0d      	ldr	r3, [pc, #52]	; (8005288 <UART_SetConfig+0x4e4>)
 8005252:	fba3 1302 	umull	r1, r3, r3, r2
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	2164      	movs	r1, #100	; 0x64
 800525a:	fb01 f303 	mul.w	r3, r1, r3
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	011b      	lsls	r3, r3, #4
 8005262:	3332      	adds	r3, #50	; 0x32
 8005264:	4a08      	ldr	r2, [pc, #32]	; (8005288 <UART_SetConfig+0x4e4>)
 8005266:	fba2 2303 	umull	r2, r3, r2, r3
 800526a:	095b      	lsrs	r3, r3, #5
 800526c:	f003 020f 	and.w	r2, r3, #15
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4422      	add	r2, r4
 8005278:	609a      	str	r2, [r3, #8]
}
 800527a:	bf00      	nop
 800527c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005280:	46bd      	mov	sp, r7
 8005282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005286:	bf00      	nop
 8005288:	51eb851f 	.word	0x51eb851f

0800528c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800528c:	b084      	sub	sp, #16
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	f107 001c 	add.w	r0, r7, #28
 800529a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d122      	bne.n	80052ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80052b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d105      	bne.n	80052de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 faa2 	bl	8005828 <USB_CoreReset>
 80052e4:	4603      	mov	r3, r0
 80052e6:	73fb      	strb	r3, [r7, #15]
 80052e8:	e01a      	b.n	8005320 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fa96 	bl	8005828 <USB_CoreReset>
 80052fc:	4603      	mov	r3, r0
 80052fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005302:	2b00      	cmp	r3, #0
 8005304:	d106      	bne.n	8005314 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	639a      	str	r2, [r3, #56]	; 0x38
 8005312:	e005      	b.n	8005320 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005318:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005322:	2b01      	cmp	r3, #1
 8005324:	d10b      	bne.n	800533e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f043 0206 	orr.w	r2, r3, #6
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f043 0220 	orr.w	r2, r3, #32
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800533e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800534a:	b004      	add	sp, #16
 800534c:	4770      	bx	lr

0800534e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f023 0201 	bic.w	r2, r3, #1
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	460b      	mov	r3, r1
 800537a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800538c:	78fb      	ldrb	r3, [r7, #3]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d115      	bne.n	80053be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800539e:	2001      	movs	r0, #1
 80053a0:	f7fc fd1e 	bl	8001de0 <HAL_Delay>
      ms++;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3301      	adds	r3, #1
 80053a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fa2e 	bl	800580c <USB_GetMode>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d01e      	beq.n	80053f4 <USB_SetCurrentMode+0x84>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b31      	cmp	r3, #49	; 0x31
 80053ba:	d9f0      	bls.n	800539e <USB_SetCurrentMode+0x2e>
 80053bc:	e01a      	b.n	80053f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053be:	78fb      	ldrb	r3, [r7, #3]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d115      	bne.n	80053f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053d0:	2001      	movs	r0, #1
 80053d2:	f7fc fd05 	bl	8001de0 <HAL_Delay>
      ms++;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	3301      	adds	r3, #1
 80053da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 fa15 	bl	800580c <USB_GetMode>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d005      	beq.n	80053f4 <USB_SetCurrentMode+0x84>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b31      	cmp	r3, #49	; 0x31
 80053ec:	d9f0      	bls.n	80053d0 <USB_SetCurrentMode+0x60>
 80053ee:	e001      	b.n	80053f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e005      	b.n	8005400 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b32      	cmp	r3, #50	; 0x32
 80053f8:	d101      	bne.n	80053fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e000      	b.n	8005400 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005408:	b084      	sub	sp, #16
 800540a:	b580      	push	{r7, lr}
 800540c:	b086      	sub	sp, #24
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005422:	2300      	movs	r3, #0
 8005424:	613b      	str	r3, [r7, #16]
 8005426:	e009      	b.n	800543c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	3340      	adds	r3, #64	; 0x40
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	2200      	movs	r2, #0
 8005434:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	3301      	adds	r3, #1
 800543a:	613b      	str	r3, [r7, #16]
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	2b0e      	cmp	r3, #14
 8005440:	d9f2      	bls.n	8005428 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005444:	2b00      	cmp	r3, #0
 8005446:	d11c      	bne.n	8005482 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005456:	f043 0302 	orr.w	r3, r3, #2
 800545a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005478:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	639a      	str	r2, [r3, #56]	; 0x38
 8005480:	e00b      	b.n	800549a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005486:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005492:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054a0:	461a      	mov	r2, r3
 80054a2:	2300      	movs	r3, #0
 80054a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ac:	4619      	mov	r1, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b4:	461a      	mov	r2, r3
 80054b6:	680b      	ldr	r3, [r1, #0]
 80054b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d10c      	bne.n	80054da <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80054c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d104      	bne.n	80054d0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80054c6:	2100      	movs	r1, #0
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f965 	bl	8005798 <USB_SetDevSpeed>
 80054ce:	e008      	b.n	80054e2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80054d0:	2101      	movs	r1, #1
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f960 	bl	8005798 <USB_SetDevSpeed>
 80054d8:	e003      	b.n	80054e2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80054da:	2103      	movs	r1, #3
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f95b 	bl	8005798 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054e2:	2110      	movs	r1, #16
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f8f3 	bl	80056d0 <USB_FlushTxFifo>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f91f 	bl	8005738 <USB_FlushRxFifo>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550a:	461a      	mov	r2, r3
 800550c:	2300      	movs	r3, #0
 800550e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005516:	461a      	mov	r2, r3
 8005518:	2300      	movs	r3, #0
 800551a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005522:	461a      	mov	r2, r3
 8005524:	2300      	movs	r3, #0
 8005526:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005528:	2300      	movs	r3, #0
 800552a:	613b      	str	r3, [r7, #16]
 800552c:	e043      	b.n	80055b6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005544:	d118      	bne.n	8005578 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10a      	bne.n	8005562 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005558:	461a      	mov	r2, r3
 800555a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	e013      	b.n	800558a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556e:	461a      	mov	r2, r3
 8005570:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	e008      	b.n	800558a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005584:	461a      	mov	r2, r3
 8005586:	2300      	movs	r3, #0
 8005588:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005596:	461a      	mov	r2, r3
 8005598:	2300      	movs	r3, #0
 800559a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a8:	461a      	mov	r2, r3
 80055aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	3301      	adds	r3, #1
 80055b4:	613b      	str	r3, [r7, #16]
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d3b7      	bcc.n	800552e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055be:	2300      	movs	r3, #0
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	e043      	b.n	800564c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055da:	d118      	bne.n	800560e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10a      	bne.n	80055f8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ee:	461a      	mov	r2, r3
 80055f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	e013      	b.n	8005620 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005604:	461a      	mov	r2, r3
 8005606:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800560a:	6013      	str	r3, [r2, #0]
 800560c:	e008      	b.n	8005620 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561a:	461a      	mov	r2, r3
 800561c:	2300      	movs	r3, #0
 800561e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562c:	461a      	mov	r2, r3
 800562e:	2300      	movs	r3, #0
 8005630:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563e:	461a      	mov	r2, r3
 8005640:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005644:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	3301      	adds	r3, #1
 800564a:	613b      	str	r3, [r7, #16]
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	429a      	cmp	r2, r3
 8005652:	d3b7      	bcc.n	80055c4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005662:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005666:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005674:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	2b00      	cmp	r3, #0
 800567a:	d105      	bne.n	8005688 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	f043 0210 	orr.w	r2, r3, #16
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	699a      	ldr	r2, [r3, #24]
 800568c:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <USB_DevInit+0x2c4>)
 800568e:	4313      	orrs	r3, r2
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	f043 0208 	orr.w	r2, r3, #8
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80056a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d107      	bne.n	80056bc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056b4:	f043 0304 	orr.w	r3, r3, #4
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056c8:	b004      	add	sp, #16
 80056ca:	4770      	bx	lr
 80056cc:	803c3800 	.word	0x803c3800

080056d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056da:	2300      	movs	r3, #0
 80056dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	3301      	adds	r3, #1
 80056e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4a13      	ldr	r2, [pc, #76]	; (8005734 <USB_FlushTxFifo+0x64>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d901      	bls.n	80056f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e01b      	b.n	8005728 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	daf2      	bge.n	80056de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	019b      	lsls	r3, r3, #6
 8005700:	f043 0220 	orr.w	r2, r3, #32
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	3301      	adds	r3, #1
 800570c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4a08      	ldr	r2, [pc, #32]	; (8005734 <USB_FlushTxFifo+0x64>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d901      	bls.n	800571a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e006      	b.n	8005728 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f003 0320 	and.w	r3, r3, #32
 8005722:	2b20      	cmp	r3, #32
 8005724:	d0f0      	beq.n	8005708 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	00030d40 	.word	0x00030d40

08005738 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	3301      	adds	r3, #1
 8005748:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4a11      	ldr	r2, [pc, #68]	; (8005794 <USB_FlushRxFifo+0x5c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d901      	bls.n	8005756 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e018      	b.n	8005788 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	daf2      	bge.n	8005744 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800575e:	2300      	movs	r3, #0
 8005760:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2210      	movs	r2, #16
 8005766:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	3301      	adds	r3, #1
 800576c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4a08      	ldr	r2, [pc, #32]	; (8005794 <USB_FlushRxFifo+0x5c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d901      	bls.n	800577a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e006      	b.n	8005788 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	f003 0310 	and.w	r3, r3, #16
 8005782:	2b10      	cmp	r3, #16
 8005784:	d0f0      	beq.n	8005768 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	00030d40 	.word	0x00030d40

08005798 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	460b      	mov	r3, r1
 80057a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	78fb      	ldrb	r3, [r7, #3]
 80057b2:	68f9      	ldr	r1, [r7, #12]
 80057b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057b8:	4313      	orrs	r3, r2
 80057ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b085      	sub	sp, #20
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80057e4:	f023 0303 	bic.w	r3, r3, #3
 80057e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057f8:	f043 0302 	orr.w	r3, r3, #2
 80057fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	f003 0301 	and.w	r3, r3, #1
}
 800581c:	4618      	mov	r0, r3
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3301      	adds	r3, #1
 8005838:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4a13      	ldr	r2, [pc, #76]	; (800588c <USB_CoreReset+0x64>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d901      	bls.n	8005846 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e01b      	b.n	800587e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	2b00      	cmp	r3, #0
 800584c:	daf2      	bge.n	8005834 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f043 0201 	orr.w	r2, r3, #1
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3301      	adds	r3, #1
 8005862:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4a09      	ldr	r2, [pc, #36]	; (800588c <USB_CoreReset+0x64>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d901      	bls.n	8005870 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e006      	b.n	800587e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b01      	cmp	r3, #1
 800587a:	d0f0      	beq.n	800585e <USB_CoreReset+0x36>

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	00030d40 	.word	0x00030d40

08005890 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	4603      	mov	r3, r0
 8005898:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800589a:	2300      	movs	r3, #0
 800589c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800589e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058a2:	2b84      	cmp	r3, #132	; 0x84
 80058a4:	d005      	beq.n	80058b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80058a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4413      	add	r3, r2
 80058ae:	3303      	adds	r3, #3
 80058b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80058b2:	68fb      	ldr	r3, [r7, #12]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80058c4:	f000 fade 	bl	8005e84 <vTaskStartScheduler>
  
  return osOK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	bd80      	pop	{r7, pc}

080058ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80058ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058d0:	b089      	sub	sp, #36	; 0x24
 80058d2:	af04      	add	r7, sp, #16
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d020      	beq.n	8005922 <osThreadCreate+0x54>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d01c      	beq.n	8005922 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685c      	ldr	r4, [r3, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681d      	ldr	r5, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691e      	ldr	r6, [r3, #16]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff ffc8 	bl	8005890 <makeFreeRtosPriority>
 8005900:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800590a:	9202      	str	r2, [sp, #8]
 800590c:	9301      	str	r3, [sp, #4]
 800590e:	9100      	str	r1, [sp, #0]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	4632      	mov	r2, r6
 8005914:	4629      	mov	r1, r5
 8005916:	4620      	mov	r0, r4
 8005918:	f000 f8ed 	bl	8005af6 <xTaskCreateStatic>
 800591c:	4603      	mov	r3, r0
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	e01c      	b.n	800595c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685c      	ldr	r4, [r3, #4]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800592e:	b29e      	uxth	r6, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff ffaa 	bl	8005890 <makeFreeRtosPriority>
 800593c:	4602      	mov	r2, r0
 800593e:	f107 030c 	add.w	r3, r7, #12
 8005942:	9301      	str	r3, [sp, #4]
 8005944:	9200      	str	r2, [sp, #0]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	4632      	mov	r2, r6
 800594a:	4629      	mov	r1, r5
 800594c:	4620      	mov	r0, r4
 800594e:	f000 f92f 	bl	8005bb0 <xTaskCreate>
 8005952:	4603      	mov	r3, r0
 8005954:	2b01      	cmp	r3, #1
 8005956:	d001      	beq.n	800595c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005958:	2300      	movs	r3, #0
 800595a:	e000      	b.n	800595e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800595c:	68fb      	ldr	r3, [r7, #12]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005966 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b084      	sub	sp, #16
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <osDelay+0x16>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	e000      	b.n	800597e <osDelay+0x18>
 800597c:	2301      	movs	r3, #1
 800597e:	4618      	mov	r0, r3
 8005980:	f000 fa4c 	bl	8005e1c <vTaskDelay>
  
  return osOK;
 8005984:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800598e:	b480      	push	{r7}
 8005990:	b083      	sub	sp, #12
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f103 0208 	add.w	r2, r3, #8
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f04f 32ff 	mov.w	r2, #4294967295
 80059a6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f103 0208 	add.w	r2, r3, #8
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f103 0208 	add.w	r2, r3, #8
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	601a      	str	r2, [r3, #0]
}
 8005a24:	bf00      	nop
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a46:	d103      	bne.n	8005a50 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	e00c      	b.n	8005a6a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3308      	adds	r3, #8
 8005a54:	60fb      	str	r3, [r7, #12]
 8005a56:	e002      	b.n	8005a5e <vListInsert+0x2e>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d2f6      	bcs.n	8005a58 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	601a      	str	r2, [r3, #0]
}
 8005a96:	bf00      	nop
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6892      	ldr	r2, [r2, #8]
 8005ab8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6852      	ldr	r2, [r2, #4]
 8005ac2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d103      	bne.n	8005ad6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	1e5a      	subs	r2, r3, #1
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b08e      	sub	sp, #56	; 0x38
 8005afa:	af04      	add	r7, sp, #16
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	607a      	str	r2, [r7, #4]
 8005b02:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10a      	bne.n	8005b20 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b1c:	bf00      	nop
 8005b1e:	e7fe      	b.n	8005b1e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10a      	bne.n	8005b3c <xTaskCreateStatic+0x46>
	__asm volatile
 8005b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	61fb      	str	r3, [r7, #28]
}
 8005b38:	bf00      	nop
 8005b3a:	e7fe      	b.n	8005b3a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b3c:	2354      	movs	r3, #84	; 0x54
 8005b3e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2b54      	cmp	r3, #84	; 0x54
 8005b44:	d00a      	beq.n	8005b5c <xTaskCreateStatic+0x66>
	__asm volatile
 8005b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4a:	f383 8811 	msr	BASEPRI, r3
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	61bb      	str	r3, [r7, #24]
}
 8005b58:	bf00      	nop
 8005b5a:	e7fe      	b.n	8005b5a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b5c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d01e      	beq.n	8005ba2 <xTaskCreateStatic+0xac>
 8005b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d01b      	beq.n	8005ba2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b72:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	9303      	str	r3, [sp, #12]
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	9302      	str	r3, [sp, #8]
 8005b84:	f107 0314 	add.w	r3, r7, #20
 8005b88:	9301      	str	r3, [sp, #4]
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	68b9      	ldr	r1, [r7, #8]
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 f850 	bl	8005c3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b9c:	f000 f8d4 	bl	8005d48 <prvAddNewTaskToReadyList>
 8005ba0:	e001      	b.n	8005ba6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ba6:	697b      	ldr	r3, [r7, #20]
	}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3728      	adds	r7, #40	; 0x28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08c      	sub	sp, #48	; 0x30
 8005bb4:	af04      	add	r7, sp, #16
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	603b      	str	r3, [r7, #0]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005bc0:	88fb      	ldrh	r3, [r7, #6]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 fec7 	bl	8006958 <pvPortMalloc>
 8005bca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00e      	beq.n	8005bf0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005bd2:	2054      	movs	r0, #84	; 0x54
 8005bd4:	f000 fec0 	bl	8006958 <pvPortMalloc>
 8005bd8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	631a      	str	r2, [r3, #48]	; 0x30
 8005be6:	e005      	b.n	8005bf4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005be8:	6978      	ldr	r0, [r7, #20]
 8005bea:	f000 ff81 	bl	8006af0 <vPortFree>
 8005bee:	e001      	b.n	8005bf4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d017      	beq.n	8005c2a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c02:	88fa      	ldrh	r2, [r7, #6]
 8005c04:	2300      	movs	r3, #0
 8005c06:	9303      	str	r3, [sp, #12]
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	9302      	str	r3, [sp, #8]
 8005c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0e:	9301      	str	r3, [sp, #4]
 8005c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	68b9      	ldr	r1, [r7, #8]
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 f80e 	bl	8005c3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c1e:	69f8      	ldr	r0, [r7, #28]
 8005c20:	f000 f892 	bl	8005d48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c24:	2301      	movs	r3, #1
 8005c26:	61bb      	str	r3, [r7, #24]
 8005c28:	e002      	b.n	8005c30 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c2e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c30:	69bb      	ldr	r3, [r7, #24]
	}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3720      	adds	r7, #32
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b088      	sub	sp, #32
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	607a      	str	r2, [r7, #4]
 8005c46:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c52:	3b01      	subs	r3, #1
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	f023 0307 	bic.w	r3, r3, #7
 8005c60:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00a      	beq.n	8005c82 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	617b      	str	r3, [r7, #20]
}
 8005c7e:	bf00      	nop
 8005c80:	e7fe      	b.n	8005c80 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d01f      	beq.n	8005cc8 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c88:	2300      	movs	r3, #0
 8005c8a:	61fb      	str	r3, [r7, #28]
 8005c8c:	e012      	b.n	8005cb4 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	4413      	add	r3, r2
 8005c94:	7819      	ldrb	r1, [r3, #0]
 8005c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	3334      	adds	r3, #52	; 0x34
 8005c9e:	460a      	mov	r2, r1
 8005ca0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d006      	beq.n	8005cbc <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	61fb      	str	r3, [r7, #28]
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	2b0f      	cmp	r3, #15
 8005cb8:	d9e9      	bls.n	8005c8e <prvInitialiseNewTask+0x54>
 8005cba:	e000      	b.n	8005cbe <prvInitialiseNewTask+0x84>
			{
				break;
 8005cbc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cc6:	e003      	b.n	8005cd0 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd2:	2b06      	cmp	r3, #6
 8005cd4:	d901      	bls.n	8005cda <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005cd6:	2306      	movs	r3, #6
 8005cd8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cde:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ce4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce8:	2200      	movs	r2, #0
 8005cea:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cee:	3304      	adds	r3, #4
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff fe6c 	bl	80059ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	3318      	adds	r3, #24
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7ff fe67 	bl	80059ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d04:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d08:	f1c3 0207 	rsb	r2, r3, #7
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d14:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d18:	2200      	movs	r2, #0
 8005d1a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	68f9      	ldr	r1, [r7, #12]
 8005d28:	69b8      	ldr	r0, [r7, #24]
 8005d2a:	f000 fc05 	bl	8006538 <pxPortInitialiseStack>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d32:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d40:	bf00      	nop
 8005d42:	3720      	adds	r7, #32
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d50:	f000 fd20 	bl	8006794 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d54:	4b2a      	ldr	r3, [pc, #168]	; (8005e00 <prvAddNewTaskToReadyList+0xb8>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	4a29      	ldr	r2, [pc, #164]	; (8005e00 <prvAddNewTaskToReadyList+0xb8>)
 8005d5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d5e:	4b29      	ldr	r3, [pc, #164]	; (8005e04 <prvAddNewTaskToReadyList+0xbc>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d109      	bne.n	8005d7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d66:	4a27      	ldr	r2, [pc, #156]	; (8005e04 <prvAddNewTaskToReadyList+0xbc>)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d6c:	4b24      	ldr	r3, [pc, #144]	; (8005e00 <prvAddNewTaskToReadyList+0xb8>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d110      	bne.n	8005d96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d74:	f000 fabc 	bl	80062f0 <prvInitialiseTaskLists>
 8005d78:	e00d      	b.n	8005d96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d7a:	4b23      	ldr	r3, [pc, #140]	; (8005e08 <prvAddNewTaskToReadyList+0xc0>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d109      	bne.n	8005d96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d82:	4b20      	ldr	r3, [pc, #128]	; (8005e04 <prvAddNewTaskToReadyList+0xbc>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d802      	bhi.n	8005d96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d90:	4a1c      	ldr	r2, [pc, #112]	; (8005e04 <prvAddNewTaskToReadyList+0xbc>)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d96:	4b1d      	ldr	r3, [pc, #116]	; (8005e0c <prvAddNewTaskToReadyList+0xc4>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	4a1b      	ldr	r2, [pc, #108]	; (8005e0c <prvAddNewTaskToReadyList+0xc4>)
 8005d9e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	2201      	movs	r2, #1
 8005da6:	409a      	lsls	r2, r3
 8005da8:	4b19      	ldr	r3, [pc, #100]	; (8005e10 <prvAddNewTaskToReadyList+0xc8>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	4a18      	ldr	r2, [pc, #96]	; (8005e10 <prvAddNewTaskToReadyList+0xc8>)
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db6:	4613      	mov	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4a15      	ldr	r2, [pc, #84]	; (8005e14 <prvAddNewTaskToReadyList+0xcc>)
 8005dc0:	441a      	add	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	4610      	mov	r0, r2
 8005dca:	f7ff fe0d 	bl	80059e8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005dce:	f000 fd11 	bl	80067f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005dd2:	4b0d      	ldr	r3, [pc, #52]	; (8005e08 <prvAddNewTaskToReadyList+0xc0>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00e      	beq.n	8005df8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005dda:	4b0a      	ldr	r3, [pc, #40]	; (8005e04 <prvAddNewTaskToReadyList+0xbc>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d207      	bcs.n	8005df8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005de8:	4b0b      	ldr	r3, [pc, #44]	; (8005e18 <prvAddNewTaskToReadyList+0xd0>)
 8005dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005df8:	bf00      	nop
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	20000f08 	.word	0x20000f08
 8005e04:	20000e08 	.word	0x20000e08
 8005e08:	20000f14 	.word	0x20000f14
 8005e0c:	20000f24 	.word	0x20000f24
 8005e10:	20000f10 	.word	0x20000f10
 8005e14:	20000e0c 	.word	0x20000e0c
 8005e18:	e000ed04 	.word	0xe000ed04

08005e1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e24:	2300      	movs	r3, #0
 8005e26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d017      	beq.n	8005e5e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e2e:	4b13      	ldr	r3, [pc, #76]	; (8005e7c <vTaskDelay+0x60>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <vTaskDelay+0x30>
	__asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	60bb      	str	r3, [r7, #8]
}
 8005e48:	bf00      	nop
 8005e4a:	e7fe      	b.n	8005e4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e4c:	f000 f87a 	bl	8005f44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e50:	2100      	movs	r1, #0
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fb0a 	bl	800646c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e58:	f000 f882 	bl	8005f60 <xTaskResumeAll>
 8005e5c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d107      	bne.n	8005e74 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005e64:	4b06      	ldr	r3, [pc, #24]	; (8005e80 <vTaskDelay+0x64>)
 8005e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e74:	bf00      	nop
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	20000f30 	.word	0x20000f30
 8005e80:	e000ed04 	.word	0xe000ed04

08005e84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b08a      	sub	sp, #40	; 0x28
 8005e88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e92:	463a      	mov	r2, r7
 8005e94:	1d39      	adds	r1, r7, #4
 8005e96:	f107 0308 	add.w	r3, r7, #8
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fb f9c0 	bl	8001220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ea0:	6839      	ldr	r1, [r7, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	9202      	str	r2, [sp, #8]
 8005ea8:	9301      	str	r3, [sp, #4]
 8005eaa:	2300      	movs	r3, #0
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	2300      	movs	r3, #0
 8005eb0:	460a      	mov	r2, r1
 8005eb2:	491e      	ldr	r1, [pc, #120]	; (8005f2c <vTaskStartScheduler+0xa8>)
 8005eb4:	481e      	ldr	r0, [pc, #120]	; (8005f30 <vTaskStartScheduler+0xac>)
 8005eb6:	f7ff fe1e 	bl	8005af6 <xTaskCreateStatic>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	4a1d      	ldr	r2, [pc, #116]	; (8005f34 <vTaskStartScheduler+0xb0>)
 8005ebe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ec0:	4b1c      	ldr	r3, [pc, #112]	; (8005f34 <vTaskStartScheduler+0xb0>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	617b      	str	r3, [r7, #20]
 8005ecc:	e001      	b.n	8005ed2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d116      	bne.n	8005f06 <vTaskStartScheduler+0x82>
	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	613b      	str	r3, [r7, #16]
}
 8005eea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005eec:	4b12      	ldr	r3, [pc, #72]	; (8005f38 <vTaskStartScheduler+0xb4>)
 8005eee:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ef4:	4b11      	ldr	r3, [pc, #68]	; (8005f3c <vTaskStartScheduler+0xb8>)
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005efa:	4b11      	ldr	r3, [pc, #68]	; (8005f40 <vTaskStartScheduler+0xbc>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f00:	f000 fba6 	bl	8006650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f04:	e00e      	b.n	8005f24 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0c:	d10a      	bne.n	8005f24 <vTaskStartScheduler+0xa0>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	60fb      	str	r3, [r7, #12]
}
 8005f20:	bf00      	nop
 8005f22:	e7fe      	b.n	8005f22 <vTaskStartScheduler+0x9e>
}
 8005f24:	bf00      	nop
 8005f26:	3718      	adds	r7, #24
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	08007a0c 	.word	0x08007a0c
 8005f30:	080062c1 	.word	0x080062c1
 8005f34:	20000f2c 	.word	0x20000f2c
 8005f38:	20000f28 	.word	0x20000f28
 8005f3c:	20000f14 	.word	0x20000f14
 8005f40:	20000f0c 	.word	0x20000f0c

08005f44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f44:	b480      	push	{r7}
 8005f46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f48:	4b04      	ldr	r3, [pc, #16]	; (8005f5c <vTaskSuspendAll+0x18>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	4a03      	ldr	r2, [pc, #12]	; (8005f5c <vTaskSuspendAll+0x18>)
 8005f50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f52:	bf00      	nop
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	20000f30 	.word	0x20000f30

08005f60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f66:	2300      	movs	r3, #0
 8005f68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f6e:	4b41      	ldr	r3, [pc, #260]	; (8006074 <xTaskResumeAll+0x114>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10a      	bne.n	8005f8c <xTaskResumeAll+0x2c>
	__asm volatile
 8005f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	603b      	str	r3, [r7, #0]
}
 8005f88:	bf00      	nop
 8005f8a:	e7fe      	b.n	8005f8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f8c:	f000 fc02 	bl	8006794 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f90:	4b38      	ldr	r3, [pc, #224]	; (8006074 <xTaskResumeAll+0x114>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3b01      	subs	r3, #1
 8005f96:	4a37      	ldr	r2, [pc, #220]	; (8006074 <xTaskResumeAll+0x114>)
 8005f98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f9a:	4b36      	ldr	r3, [pc, #216]	; (8006074 <xTaskResumeAll+0x114>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d161      	bne.n	8006066 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fa2:	4b35      	ldr	r3, [pc, #212]	; (8006078 <xTaskResumeAll+0x118>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d05d      	beq.n	8006066 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005faa:	e02e      	b.n	800600a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fac:	4b33      	ldr	r3, [pc, #204]	; (800607c <xTaskResumeAll+0x11c>)
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	3318      	adds	r3, #24
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7ff fd72 	bl	8005aa2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7ff fd6d 	bl	8005aa2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fcc:	2201      	movs	r2, #1
 8005fce:	409a      	lsls	r2, r3
 8005fd0:	4b2b      	ldr	r3, [pc, #172]	; (8006080 <xTaskResumeAll+0x120>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	4a2a      	ldr	r2, [pc, #168]	; (8006080 <xTaskResumeAll+0x120>)
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fde:	4613      	mov	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4a27      	ldr	r2, [pc, #156]	; (8006084 <xTaskResumeAll+0x124>)
 8005fe8:	441a      	add	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3304      	adds	r3, #4
 8005fee:	4619      	mov	r1, r3
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	f7ff fcf9 	bl	80059e8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffa:	4b23      	ldr	r3, [pc, #140]	; (8006088 <xTaskResumeAll+0x128>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	429a      	cmp	r2, r3
 8006002:	d302      	bcc.n	800600a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006004:	4b21      	ldr	r3, [pc, #132]	; (800608c <xTaskResumeAll+0x12c>)
 8006006:	2201      	movs	r2, #1
 8006008:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800600a:	4b1c      	ldr	r3, [pc, #112]	; (800607c <xTaskResumeAll+0x11c>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1cc      	bne.n	8005fac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006018:	f000 fa08 	bl	800642c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800601c:	4b1c      	ldr	r3, [pc, #112]	; (8006090 <xTaskResumeAll+0x130>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d010      	beq.n	800604a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006028:	f000 f836 	bl	8006098 <xTaskIncrementTick>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d002      	beq.n	8006038 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006032:	4b16      	ldr	r3, [pc, #88]	; (800608c <xTaskResumeAll+0x12c>)
 8006034:	2201      	movs	r2, #1
 8006036:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3b01      	subs	r3, #1
 800603c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1f1      	bne.n	8006028 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006044:	4b12      	ldr	r3, [pc, #72]	; (8006090 <xTaskResumeAll+0x130>)
 8006046:	2200      	movs	r2, #0
 8006048:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800604a:	4b10      	ldr	r3, [pc, #64]	; (800608c <xTaskResumeAll+0x12c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d009      	beq.n	8006066 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006052:	2301      	movs	r3, #1
 8006054:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006056:	4b0f      	ldr	r3, [pc, #60]	; (8006094 <xTaskResumeAll+0x134>)
 8006058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006066:	f000 fbc5 	bl	80067f4 <vPortExitCritical>

	return xAlreadyYielded;
 800606a:	68bb      	ldr	r3, [r7, #8]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	20000f30 	.word	0x20000f30
 8006078:	20000f08 	.word	0x20000f08
 800607c:	20000ec8 	.word	0x20000ec8
 8006080:	20000f10 	.word	0x20000f10
 8006084:	20000e0c 	.word	0x20000e0c
 8006088:	20000e08 	.word	0x20000e08
 800608c:	20000f1c 	.word	0x20000f1c
 8006090:	20000f18 	.word	0x20000f18
 8006094:	e000ed04 	.word	0xe000ed04

08006098 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800609e:	2300      	movs	r3, #0
 80060a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060a2:	4b4e      	ldr	r3, [pc, #312]	; (80061dc <xTaskIncrementTick+0x144>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f040 808e 	bne.w	80061c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060ac:	4b4c      	ldr	r3, [pc, #304]	; (80061e0 <xTaskIncrementTick+0x148>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3301      	adds	r3, #1
 80060b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060b4:	4a4a      	ldr	r2, [pc, #296]	; (80061e0 <xTaskIncrementTick+0x148>)
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d120      	bne.n	8006102 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80060c0:	4b48      	ldr	r3, [pc, #288]	; (80061e4 <xTaskIncrementTick+0x14c>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80060ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ce:	f383 8811 	msr	BASEPRI, r3
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	603b      	str	r3, [r7, #0]
}
 80060dc:	bf00      	nop
 80060de:	e7fe      	b.n	80060de <xTaskIncrementTick+0x46>
 80060e0:	4b40      	ldr	r3, [pc, #256]	; (80061e4 <xTaskIncrementTick+0x14c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	60fb      	str	r3, [r7, #12]
 80060e6:	4b40      	ldr	r3, [pc, #256]	; (80061e8 <xTaskIncrementTick+0x150>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a3e      	ldr	r2, [pc, #248]	; (80061e4 <xTaskIncrementTick+0x14c>)
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	4a3e      	ldr	r2, [pc, #248]	; (80061e8 <xTaskIncrementTick+0x150>)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	4b3d      	ldr	r3, [pc, #244]	; (80061ec <xTaskIncrementTick+0x154>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3301      	adds	r3, #1
 80060fa:	4a3c      	ldr	r2, [pc, #240]	; (80061ec <xTaskIncrementTick+0x154>)
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	f000 f995 	bl	800642c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006102:	4b3b      	ldr	r3, [pc, #236]	; (80061f0 <xTaskIncrementTick+0x158>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	429a      	cmp	r2, r3
 800610a:	d348      	bcc.n	800619e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800610c:	4b35      	ldr	r3, [pc, #212]	; (80061e4 <xTaskIncrementTick+0x14c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d104      	bne.n	8006120 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006116:	4b36      	ldr	r3, [pc, #216]	; (80061f0 <xTaskIncrementTick+0x158>)
 8006118:	f04f 32ff 	mov.w	r2, #4294967295
 800611c:	601a      	str	r2, [r3, #0]
					break;
 800611e:	e03e      	b.n	800619e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006120:	4b30      	ldr	r3, [pc, #192]	; (80061e4 <xTaskIncrementTick+0x14c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	429a      	cmp	r2, r3
 8006136:	d203      	bcs.n	8006140 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006138:	4a2d      	ldr	r2, [pc, #180]	; (80061f0 <xTaskIncrementTick+0x158>)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800613e:	e02e      	b.n	800619e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	3304      	adds	r3, #4
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff fcac 	bl	8005aa2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614e:	2b00      	cmp	r3, #0
 8006150:	d004      	beq.n	800615c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	3318      	adds	r3, #24
 8006156:	4618      	mov	r0, r3
 8006158:	f7ff fca3 	bl	8005aa2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	2201      	movs	r2, #1
 8006162:	409a      	lsls	r2, r3
 8006164:	4b23      	ldr	r3, [pc, #140]	; (80061f4 <xTaskIncrementTick+0x15c>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4313      	orrs	r3, r2
 800616a:	4a22      	ldr	r2, [pc, #136]	; (80061f4 <xTaskIncrementTick+0x15c>)
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006172:	4613      	mov	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4a1f      	ldr	r2, [pc, #124]	; (80061f8 <xTaskIncrementTick+0x160>)
 800617c:	441a      	add	r2, r3
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	3304      	adds	r3, #4
 8006182:	4619      	mov	r1, r3
 8006184:	4610      	mov	r0, r2
 8006186:	f7ff fc2f 	bl	80059e8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800618e:	4b1b      	ldr	r3, [pc, #108]	; (80061fc <xTaskIncrementTick+0x164>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006194:	429a      	cmp	r2, r3
 8006196:	d3b9      	bcc.n	800610c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006198:	2301      	movs	r3, #1
 800619a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800619c:	e7b6      	b.n	800610c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800619e:	4b17      	ldr	r3, [pc, #92]	; (80061fc <xTaskIncrementTick+0x164>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a4:	4914      	ldr	r1, [pc, #80]	; (80061f8 <xTaskIncrementTick+0x160>)
 80061a6:	4613      	mov	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	440b      	add	r3, r1
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d901      	bls.n	80061ba <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80061b6:	2301      	movs	r3, #1
 80061b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80061ba:	4b11      	ldr	r3, [pc, #68]	; (8006200 <xTaskIncrementTick+0x168>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d007      	beq.n	80061d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80061c2:	2301      	movs	r3, #1
 80061c4:	617b      	str	r3, [r7, #20]
 80061c6:	e004      	b.n	80061d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80061c8:	4b0e      	ldr	r3, [pc, #56]	; (8006204 <xTaskIncrementTick+0x16c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3301      	adds	r3, #1
 80061ce:	4a0d      	ldr	r2, [pc, #52]	; (8006204 <xTaskIncrementTick+0x16c>)
 80061d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80061d2:	697b      	ldr	r3, [r7, #20]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	20000f30 	.word	0x20000f30
 80061e0:	20000f0c 	.word	0x20000f0c
 80061e4:	20000ec0 	.word	0x20000ec0
 80061e8:	20000ec4 	.word	0x20000ec4
 80061ec:	20000f20 	.word	0x20000f20
 80061f0:	20000f28 	.word	0x20000f28
 80061f4:	20000f10 	.word	0x20000f10
 80061f8:	20000e0c 	.word	0x20000e0c
 80061fc:	20000e08 	.word	0x20000e08
 8006200:	20000f1c 	.word	0x20000f1c
 8006204:	20000f18 	.word	0x20000f18

08006208 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800620e:	4b27      	ldr	r3, [pc, #156]	; (80062ac <vTaskSwitchContext+0xa4>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006216:	4b26      	ldr	r3, [pc, #152]	; (80062b0 <vTaskSwitchContext+0xa8>)
 8006218:	2201      	movs	r2, #1
 800621a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800621c:	e03f      	b.n	800629e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800621e:	4b24      	ldr	r3, [pc, #144]	; (80062b0 <vTaskSwitchContext+0xa8>)
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006224:	4b23      	ldr	r3, [pc, #140]	; (80062b4 <vTaskSwitchContext+0xac>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	fab3 f383 	clz	r3, r3
 8006230:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006232:	7afb      	ldrb	r3, [r7, #11]
 8006234:	f1c3 031f 	rsb	r3, r3, #31
 8006238:	617b      	str	r3, [r7, #20]
 800623a:	491f      	ldr	r1, [pc, #124]	; (80062b8 <vTaskSwitchContext+0xb0>)
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	4613      	mov	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	440b      	add	r3, r1
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10a      	bne.n	8006264 <vTaskSwitchContext+0x5c>
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	607b      	str	r3, [r7, #4]
}
 8006260:	bf00      	nop
 8006262:	e7fe      	b.n	8006262 <vTaskSwitchContext+0x5a>
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	4613      	mov	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4413      	add	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4a12      	ldr	r2, [pc, #72]	; (80062b8 <vTaskSwitchContext+0xb0>)
 8006270:	4413      	add	r3, r2
 8006272:	613b      	str	r3, [r7, #16]
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	605a      	str	r2, [r3, #4]
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	3308      	adds	r3, #8
 8006286:	429a      	cmp	r2, r3
 8006288:	d104      	bne.n	8006294 <vTaskSwitchContext+0x8c>
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	605a      	str	r2, [r3, #4]
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	4a08      	ldr	r2, [pc, #32]	; (80062bc <vTaskSwitchContext+0xb4>)
 800629c:	6013      	str	r3, [r2, #0]
}
 800629e:	bf00      	nop
 80062a0:	371c      	adds	r7, #28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	20000f30 	.word	0x20000f30
 80062b0:	20000f1c 	.word	0x20000f1c
 80062b4:	20000f10 	.word	0x20000f10
 80062b8:	20000e0c 	.word	0x20000e0c
 80062bc:	20000e08 	.word	0x20000e08

080062c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80062c8:	f000 f852 	bl	8006370 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062cc:	4b06      	ldr	r3, [pc, #24]	; (80062e8 <prvIdleTask+0x28>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d9f9      	bls.n	80062c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80062d4:	4b05      	ldr	r3, [pc, #20]	; (80062ec <prvIdleTask+0x2c>)
 80062d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80062e4:	e7f0      	b.n	80062c8 <prvIdleTask+0x8>
 80062e6:	bf00      	nop
 80062e8:	20000e0c 	.word	0x20000e0c
 80062ec:	e000ed04 	.word	0xe000ed04

080062f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062f6:	2300      	movs	r3, #0
 80062f8:	607b      	str	r3, [r7, #4]
 80062fa:	e00c      	b.n	8006316 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	4613      	mov	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4413      	add	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4a12      	ldr	r2, [pc, #72]	; (8006350 <prvInitialiseTaskLists+0x60>)
 8006308:	4413      	add	r3, r2
 800630a:	4618      	mov	r0, r3
 800630c:	f7ff fb3f 	bl	800598e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	3301      	adds	r3, #1
 8006314:	607b      	str	r3, [r7, #4]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b06      	cmp	r3, #6
 800631a:	d9ef      	bls.n	80062fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800631c:	480d      	ldr	r0, [pc, #52]	; (8006354 <prvInitialiseTaskLists+0x64>)
 800631e:	f7ff fb36 	bl	800598e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006322:	480d      	ldr	r0, [pc, #52]	; (8006358 <prvInitialiseTaskLists+0x68>)
 8006324:	f7ff fb33 	bl	800598e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006328:	480c      	ldr	r0, [pc, #48]	; (800635c <prvInitialiseTaskLists+0x6c>)
 800632a:	f7ff fb30 	bl	800598e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800632e:	480c      	ldr	r0, [pc, #48]	; (8006360 <prvInitialiseTaskLists+0x70>)
 8006330:	f7ff fb2d 	bl	800598e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006334:	480b      	ldr	r0, [pc, #44]	; (8006364 <prvInitialiseTaskLists+0x74>)
 8006336:	f7ff fb2a 	bl	800598e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800633a:	4b0b      	ldr	r3, [pc, #44]	; (8006368 <prvInitialiseTaskLists+0x78>)
 800633c:	4a05      	ldr	r2, [pc, #20]	; (8006354 <prvInitialiseTaskLists+0x64>)
 800633e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006340:	4b0a      	ldr	r3, [pc, #40]	; (800636c <prvInitialiseTaskLists+0x7c>)
 8006342:	4a05      	ldr	r2, [pc, #20]	; (8006358 <prvInitialiseTaskLists+0x68>)
 8006344:	601a      	str	r2, [r3, #0]
}
 8006346:	bf00      	nop
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	20000e0c 	.word	0x20000e0c
 8006354:	20000e98 	.word	0x20000e98
 8006358:	20000eac 	.word	0x20000eac
 800635c:	20000ec8 	.word	0x20000ec8
 8006360:	20000edc 	.word	0x20000edc
 8006364:	20000ef4 	.word	0x20000ef4
 8006368:	20000ec0 	.word	0x20000ec0
 800636c:	20000ec4 	.word	0x20000ec4

08006370 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006376:	e019      	b.n	80063ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006378:	f000 fa0c 	bl	8006794 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800637c:	4b10      	ldr	r3, [pc, #64]	; (80063c0 <prvCheckTasksWaitingTermination+0x50>)
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3304      	adds	r3, #4
 8006388:	4618      	mov	r0, r3
 800638a:	f7ff fb8a 	bl	8005aa2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800638e:	4b0d      	ldr	r3, [pc, #52]	; (80063c4 <prvCheckTasksWaitingTermination+0x54>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3b01      	subs	r3, #1
 8006394:	4a0b      	ldr	r2, [pc, #44]	; (80063c4 <prvCheckTasksWaitingTermination+0x54>)
 8006396:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006398:	4b0b      	ldr	r3, [pc, #44]	; (80063c8 <prvCheckTasksWaitingTermination+0x58>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3b01      	subs	r3, #1
 800639e:	4a0a      	ldr	r2, [pc, #40]	; (80063c8 <prvCheckTasksWaitingTermination+0x58>)
 80063a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80063a2:	f000 fa27 	bl	80067f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f810 	bl	80063cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063ac:	4b06      	ldr	r3, [pc, #24]	; (80063c8 <prvCheckTasksWaitingTermination+0x58>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1e1      	bne.n	8006378 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80063b4:	bf00      	nop
 80063b6:	bf00      	nop
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20000edc 	.word	0x20000edc
 80063c4:	20000f08 	.word	0x20000f08
 80063c8:	20000ef0 	.word	0x20000ef0

080063cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d108      	bne.n	80063f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fb84 	bl	8006af0 <vPortFree>
				vPortFree( pxTCB );
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fb81 	bl	8006af0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80063ee:	e018      	b.n	8006422 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d103      	bne.n	8006402 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fb78 	bl	8006af0 <vPortFree>
	}
 8006400:	e00f      	b.n	8006422 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006408:	2b02      	cmp	r3, #2
 800640a:	d00a      	beq.n	8006422 <prvDeleteTCB+0x56>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	60fb      	str	r3, [r7, #12]
}
 800641e:	bf00      	nop
 8006420:	e7fe      	b.n	8006420 <prvDeleteTCB+0x54>
	}
 8006422:	bf00      	nop
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
	...

0800642c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006432:	4b0c      	ldr	r3, [pc, #48]	; (8006464 <prvResetNextTaskUnblockTime+0x38>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d104      	bne.n	8006446 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800643c:	4b0a      	ldr	r3, [pc, #40]	; (8006468 <prvResetNextTaskUnblockTime+0x3c>)
 800643e:	f04f 32ff 	mov.w	r2, #4294967295
 8006442:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006444:	e008      	b.n	8006458 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006446:	4b07      	ldr	r3, [pc, #28]	; (8006464 <prvResetNextTaskUnblockTime+0x38>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	4a04      	ldr	r2, [pc, #16]	; (8006468 <prvResetNextTaskUnblockTime+0x3c>)
 8006456:	6013      	str	r3, [r2, #0]
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	20000ec0 	.word	0x20000ec0
 8006468:	20000f28 	.word	0x20000f28

0800646c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006476:	4b29      	ldr	r3, [pc, #164]	; (800651c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800647c:	4b28      	ldr	r3, [pc, #160]	; (8006520 <prvAddCurrentTaskToDelayedList+0xb4>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3304      	adds	r3, #4
 8006482:	4618      	mov	r0, r3
 8006484:	f7ff fb0d 	bl	8005aa2 <uxListRemove>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10b      	bne.n	80064a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800648e:	4b24      	ldr	r3, [pc, #144]	; (8006520 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006494:	2201      	movs	r2, #1
 8006496:	fa02 f303 	lsl.w	r3, r2, r3
 800649a:	43da      	mvns	r2, r3
 800649c:	4b21      	ldr	r3, [pc, #132]	; (8006524 <prvAddCurrentTaskToDelayedList+0xb8>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4013      	ands	r3, r2
 80064a2:	4a20      	ldr	r2, [pc, #128]	; (8006524 <prvAddCurrentTaskToDelayedList+0xb8>)
 80064a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ac:	d10a      	bne.n	80064c4 <prvAddCurrentTaskToDelayedList+0x58>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d007      	beq.n	80064c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064b4:	4b1a      	ldr	r3, [pc, #104]	; (8006520 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3304      	adds	r3, #4
 80064ba:	4619      	mov	r1, r3
 80064bc:	481a      	ldr	r0, [pc, #104]	; (8006528 <prvAddCurrentTaskToDelayedList+0xbc>)
 80064be:	f7ff fa93 	bl	80059e8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80064c2:	e026      	b.n	8006512 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4413      	add	r3, r2
 80064ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80064cc:	4b14      	ldr	r3, [pc, #80]	; (8006520 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d209      	bcs.n	80064f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064dc:	4b13      	ldr	r3, [pc, #76]	; (800652c <prvAddCurrentTaskToDelayedList+0xc0>)
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	4b0f      	ldr	r3, [pc, #60]	; (8006520 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3304      	adds	r3, #4
 80064e6:	4619      	mov	r1, r3
 80064e8:	4610      	mov	r0, r2
 80064ea:	f7ff faa1 	bl	8005a30 <vListInsert>
}
 80064ee:	e010      	b.n	8006512 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064f0:	4b0f      	ldr	r3, [pc, #60]	; (8006530 <prvAddCurrentTaskToDelayedList+0xc4>)
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	4b0a      	ldr	r3, [pc, #40]	; (8006520 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3304      	adds	r3, #4
 80064fa:	4619      	mov	r1, r3
 80064fc:	4610      	mov	r0, r2
 80064fe:	f7ff fa97 	bl	8005a30 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006502:	4b0c      	ldr	r3, [pc, #48]	; (8006534 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	429a      	cmp	r2, r3
 800650a:	d202      	bcs.n	8006512 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800650c:	4a09      	ldr	r2, [pc, #36]	; (8006534 <prvAddCurrentTaskToDelayedList+0xc8>)
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	6013      	str	r3, [r2, #0]
}
 8006512:	bf00      	nop
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20000f0c 	.word	0x20000f0c
 8006520:	20000e08 	.word	0x20000e08
 8006524:	20000f10 	.word	0x20000f10
 8006528:	20000ef4 	.word	0x20000ef4
 800652c:	20000ec4 	.word	0x20000ec4
 8006530:	20000ec0 	.word	0x20000ec0
 8006534:	20000f28 	.word	0x20000f28

08006538 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	3b04      	subs	r3, #4
 8006548:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006550:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3b04      	subs	r3, #4
 8006556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f023 0201 	bic.w	r2, r3, #1
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3b04      	subs	r3, #4
 8006566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006568:	4a0c      	ldr	r2, [pc, #48]	; (800659c <pxPortInitialiseStack+0x64>)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	3b14      	subs	r3, #20
 8006572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3b04      	subs	r3, #4
 800657e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f06f 0202 	mvn.w	r2, #2
 8006586:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	3b20      	subs	r3, #32
 800658c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800658e:	68fb      	ldr	r3, [r7, #12]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	080065a1 	.word	0x080065a1

080065a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80065a6:	2300      	movs	r3, #0
 80065a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065aa:	4b12      	ldr	r3, [pc, #72]	; (80065f4 <prvTaskExitError+0x54>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b2:	d00a      	beq.n	80065ca <prvTaskExitError+0x2a>
	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	60fb      	str	r3, [r7, #12]
}
 80065c6:	bf00      	nop
 80065c8:	e7fe      	b.n	80065c8 <prvTaskExitError+0x28>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	60bb      	str	r3, [r7, #8]
}
 80065dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065de:	bf00      	nop
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0fc      	beq.n	80065e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065e6:	bf00      	nop
 80065e8:	bf00      	nop
 80065ea:	3714      	adds	r7, #20
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr
 80065f4:	2000000c 	.word	0x2000000c
	...

08006600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006600:	4b07      	ldr	r3, [pc, #28]	; (8006620 <pxCurrentTCBConst2>)
 8006602:	6819      	ldr	r1, [r3, #0]
 8006604:	6808      	ldr	r0, [r1, #0]
 8006606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660a:	f380 8809 	msr	PSP, r0
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f04f 0000 	mov.w	r0, #0
 8006616:	f380 8811 	msr	BASEPRI, r0
 800661a:	4770      	bx	lr
 800661c:	f3af 8000 	nop.w

08006620 <pxCurrentTCBConst2>:
 8006620:	20000e08 	.word	0x20000e08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop

08006628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006628:	4808      	ldr	r0, [pc, #32]	; (800664c <prvPortStartFirstTask+0x24>)
 800662a:	6800      	ldr	r0, [r0, #0]
 800662c:	6800      	ldr	r0, [r0, #0]
 800662e:	f380 8808 	msr	MSP, r0
 8006632:	f04f 0000 	mov.w	r0, #0
 8006636:	f380 8814 	msr	CONTROL, r0
 800663a:	b662      	cpsie	i
 800663c:	b661      	cpsie	f
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	df00      	svc	0
 8006648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800664a:	bf00      	nop
 800664c:	e000ed08 	.word	0xe000ed08

08006650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006656:	4b46      	ldr	r3, [pc, #280]	; (8006770 <xPortStartScheduler+0x120>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a46      	ldr	r2, [pc, #280]	; (8006774 <xPortStartScheduler+0x124>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d10a      	bne.n	8006676 <xPortStartScheduler+0x26>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	613b      	str	r3, [r7, #16]
}
 8006672:	bf00      	nop
 8006674:	e7fe      	b.n	8006674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006676:	4b3e      	ldr	r3, [pc, #248]	; (8006770 <xPortStartScheduler+0x120>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a3f      	ldr	r2, [pc, #252]	; (8006778 <xPortStartScheduler+0x128>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d10a      	bne.n	8006696 <xPortStartScheduler+0x46>
	__asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	60fb      	str	r3, [r7, #12]
}
 8006692:	bf00      	nop
 8006694:	e7fe      	b.n	8006694 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006696:	4b39      	ldr	r3, [pc, #228]	; (800677c <xPortStartScheduler+0x12c>)
 8006698:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	22ff      	movs	r2, #255	; 0xff
 80066a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	4b31      	ldr	r3, [pc, #196]	; (8006780 <xPortStartScheduler+0x130>)
 80066bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066be:	4b31      	ldr	r3, [pc, #196]	; (8006784 <xPortStartScheduler+0x134>)
 80066c0:	2207      	movs	r2, #7
 80066c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066c4:	e009      	b.n	80066da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80066c6:	4b2f      	ldr	r3, [pc, #188]	; (8006784 <xPortStartScheduler+0x134>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3b01      	subs	r3, #1
 80066cc:	4a2d      	ldr	r2, [pc, #180]	; (8006784 <xPortStartScheduler+0x134>)
 80066ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066d0:	78fb      	ldrb	r3, [r7, #3]
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066da:	78fb      	ldrb	r3, [r7, #3]
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e2:	2b80      	cmp	r3, #128	; 0x80
 80066e4:	d0ef      	beq.n	80066c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066e6:	4b27      	ldr	r3, [pc, #156]	; (8006784 <xPortStartScheduler+0x134>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f1c3 0307 	rsb	r3, r3, #7
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d00a      	beq.n	8006708 <xPortStartScheduler+0xb8>
	__asm volatile
 80066f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	60bb      	str	r3, [r7, #8]
}
 8006704:	bf00      	nop
 8006706:	e7fe      	b.n	8006706 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006708:	4b1e      	ldr	r3, [pc, #120]	; (8006784 <xPortStartScheduler+0x134>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	021b      	lsls	r3, r3, #8
 800670e:	4a1d      	ldr	r2, [pc, #116]	; (8006784 <xPortStartScheduler+0x134>)
 8006710:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006712:	4b1c      	ldr	r3, [pc, #112]	; (8006784 <xPortStartScheduler+0x134>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800671a:	4a1a      	ldr	r2, [pc, #104]	; (8006784 <xPortStartScheduler+0x134>)
 800671c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	b2da      	uxtb	r2, r3
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006726:	4b18      	ldr	r3, [pc, #96]	; (8006788 <xPortStartScheduler+0x138>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a17      	ldr	r2, [pc, #92]	; (8006788 <xPortStartScheduler+0x138>)
 800672c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006730:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006732:	4b15      	ldr	r3, [pc, #84]	; (8006788 <xPortStartScheduler+0x138>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a14      	ldr	r2, [pc, #80]	; (8006788 <xPortStartScheduler+0x138>)
 8006738:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800673c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800673e:	f000 f8dd 	bl	80068fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006742:	4b12      	ldr	r3, [pc, #72]	; (800678c <xPortStartScheduler+0x13c>)
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006748:	f000 f8fc 	bl	8006944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800674c:	4b10      	ldr	r3, [pc, #64]	; (8006790 <xPortStartScheduler+0x140>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a0f      	ldr	r2, [pc, #60]	; (8006790 <xPortStartScheduler+0x140>)
 8006752:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006756:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006758:	f7ff ff66 	bl	8006628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800675c:	f7ff fd54 	bl	8006208 <vTaskSwitchContext>
	prvTaskExitError();
 8006760:	f7ff ff1e 	bl	80065a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	e000ed00 	.word	0xe000ed00
 8006774:	410fc271 	.word	0x410fc271
 8006778:	410fc270 	.word	0x410fc270
 800677c:	e000e400 	.word	0xe000e400
 8006780:	20000f34 	.word	0x20000f34
 8006784:	20000f38 	.word	0x20000f38
 8006788:	e000ed20 	.word	0xe000ed20
 800678c:	2000000c 	.word	0x2000000c
 8006790:	e000ef34 	.word	0xe000ef34

08006794 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
	__asm volatile
 800679a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	607b      	str	r3, [r7, #4]
}
 80067ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067ae:	4b0f      	ldr	r3, [pc, #60]	; (80067ec <vPortEnterCritical+0x58>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	3301      	adds	r3, #1
 80067b4:	4a0d      	ldr	r2, [pc, #52]	; (80067ec <vPortEnterCritical+0x58>)
 80067b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067b8:	4b0c      	ldr	r3, [pc, #48]	; (80067ec <vPortEnterCritical+0x58>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d10f      	bne.n	80067e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067c0:	4b0b      	ldr	r3, [pc, #44]	; (80067f0 <vPortEnterCritical+0x5c>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	603b      	str	r3, [r7, #0]
}
 80067dc:	bf00      	nop
 80067de:	e7fe      	b.n	80067de <vPortEnterCritical+0x4a>
	}
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	2000000c 	.word	0x2000000c
 80067f0:	e000ed04 	.word	0xe000ed04

080067f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067fa:	4b12      	ldr	r3, [pc, #72]	; (8006844 <vPortExitCritical+0x50>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10a      	bne.n	8006818 <vPortExitCritical+0x24>
	__asm volatile
 8006802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006806:	f383 8811 	msr	BASEPRI, r3
 800680a:	f3bf 8f6f 	isb	sy
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	607b      	str	r3, [r7, #4]
}
 8006814:	bf00      	nop
 8006816:	e7fe      	b.n	8006816 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006818:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <vPortExitCritical+0x50>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3b01      	subs	r3, #1
 800681e:	4a09      	ldr	r2, [pc, #36]	; (8006844 <vPortExitCritical+0x50>)
 8006820:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006822:	4b08      	ldr	r3, [pc, #32]	; (8006844 <vPortExitCritical+0x50>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d105      	bne.n	8006836 <vPortExitCritical+0x42>
 800682a:	2300      	movs	r3, #0
 800682c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006834:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	2000000c 	.word	0x2000000c
	...

08006850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006850:	f3ef 8009 	mrs	r0, PSP
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	4b15      	ldr	r3, [pc, #84]	; (80068b0 <pxCurrentTCBConst>)
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	f01e 0f10 	tst.w	lr, #16
 8006860:	bf08      	it	eq
 8006862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800686a:	6010      	str	r0, [r2, #0]
 800686c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006870:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006874:	f380 8811 	msr	BASEPRI, r0
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f7ff fcc2 	bl	8006208 <vTaskSwitchContext>
 8006884:	f04f 0000 	mov.w	r0, #0
 8006888:	f380 8811 	msr	BASEPRI, r0
 800688c:	bc09      	pop	{r0, r3}
 800688e:	6819      	ldr	r1, [r3, #0]
 8006890:	6808      	ldr	r0, [r1, #0]
 8006892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006896:	f01e 0f10 	tst.w	lr, #16
 800689a:	bf08      	it	eq
 800689c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80068a0:	f380 8809 	msr	PSP, r0
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	f3af 8000 	nop.w

080068b0 <pxCurrentTCBConst>:
 80068b0:	20000e08 	.word	0x20000e08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop

080068b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
	__asm volatile
 80068be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	607b      	str	r3, [r7, #4]
}
 80068d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068d2:	f7ff fbe1 	bl	8006098 <xTaskIncrementTick>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068dc:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <SysTick_Handler+0x40>)
 80068de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	2300      	movs	r3, #0
 80068e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	f383 8811 	msr	BASEPRI, r3
}
 80068ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068f0:	bf00      	nop
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	e000ed04 	.word	0xe000ed04

080068fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006900:	4b0b      	ldr	r3, [pc, #44]	; (8006930 <vPortSetupTimerInterrupt+0x34>)
 8006902:	2200      	movs	r2, #0
 8006904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006906:	4b0b      	ldr	r3, [pc, #44]	; (8006934 <vPortSetupTimerInterrupt+0x38>)
 8006908:	2200      	movs	r2, #0
 800690a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800690c:	4b0a      	ldr	r3, [pc, #40]	; (8006938 <vPortSetupTimerInterrupt+0x3c>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a0a      	ldr	r2, [pc, #40]	; (800693c <vPortSetupTimerInterrupt+0x40>)
 8006912:	fba2 2303 	umull	r2, r3, r2, r3
 8006916:	099b      	lsrs	r3, r3, #6
 8006918:	4a09      	ldr	r2, [pc, #36]	; (8006940 <vPortSetupTimerInterrupt+0x44>)
 800691a:	3b01      	subs	r3, #1
 800691c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800691e:	4b04      	ldr	r3, [pc, #16]	; (8006930 <vPortSetupTimerInterrupt+0x34>)
 8006920:	2207      	movs	r2, #7
 8006922:	601a      	str	r2, [r3, #0]
}
 8006924:	bf00      	nop
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	e000e010 	.word	0xe000e010
 8006934:	e000e018 	.word	0xe000e018
 8006938:	20000000 	.word	0x20000000
 800693c:	10624dd3 	.word	0x10624dd3
 8006940:	e000e014 	.word	0xe000e014

08006944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006944:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006954 <vPortEnableVFP+0x10>
 8006948:	6801      	ldr	r1, [r0, #0]
 800694a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800694e:	6001      	str	r1, [r0, #0]
 8006950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006952:	bf00      	nop
 8006954:	e000ed88 	.word	0xe000ed88

08006958 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b08a      	sub	sp, #40	; 0x28
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006960:	2300      	movs	r3, #0
 8006962:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006964:	f7ff faee 	bl	8005f44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006968:	4b5b      	ldr	r3, [pc, #364]	; (8006ad8 <pvPortMalloc+0x180>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006970:	f000 f920 	bl	8006bb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006974:	4b59      	ldr	r3, [pc, #356]	; (8006adc <pvPortMalloc+0x184>)
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4013      	ands	r3, r2
 800697c:	2b00      	cmp	r3, #0
 800697e:	f040 8093 	bne.w	8006aa8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d01d      	beq.n	80069c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006988:	2208      	movs	r2, #8
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4413      	add	r3, r2
 800698e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f003 0307 	and.w	r3, r3, #7
 8006996:	2b00      	cmp	r3, #0
 8006998:	d014      	beq.n	80069c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f023 0307 	bic.w	r3, r3, #7
 80069a0:	3308      	adds	r3, #8
 80069a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f003 0307 	and.w	r3, r3, #7
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00a      	beq.n	80069c4 <pvPortMalloc+0x6c>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	617b      	str	r3, [r7, #20]
}
 80069c0:	bf00      	nop
 80069c2:	e7fe      	b.n	80069c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d06e      	beq.n	8006aa8 <pvPortMalloc+0x150>
 80069ca:	4b45      	ldr	r3, [pc, #276]	; (8006ae0 <pvPortMalloc+0x188>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d869      	bhi.n	8006aa8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069d4:	4b43      	ldr	r3, [pc, #268]	; (8006ae4 <pvPortMalloc+0x18c>)
 80069d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069d8:	4b42      	ldr	r3, [pc, #264]	; (8006ae4 <pvPortMalloc+0x18c>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069de:	e004      	b.n	80069ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d903      	bls.n	80069fc <pvPortMalloc+0xa4>
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1f1      	bne.n	80069e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80069fc:	4b36      	ldr	r3, [pc, #216]	; (8006ad8 <pvPortMalloc+0x180>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d050      	beq.n	8006aa8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2208      	movs	r2, #8
 8006a0c:	4413      	add	r3, r2
 8006a0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	1ad2      	subs	r2, r2, r3
 8006a20:	2308      	movs	r3, #8
 8006a22:	005b      	lsls	r3, r3, #1
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d91f      	bls.n	8006a68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	f003 0307 	and.w	r3, r3, #7
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00a      	beq.n	8006a50 <pvPortMalloc+0xf8>
	__asm volatile
 8006a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	613b      	str	r3, [r7, #16]
}
 8006a4c:	bf00      	nop
 8006a4e:	e7fe      	b.n	8006a4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	1ad2      	subs	r2, r2, r3
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a62:	69b8      	ldr	r0, [r7, #24]
 8006a64:	f000 f908 	bl	8006c78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a68:	4b1d      	ldr	r3, [pc, #116]	; (8006ae0 <pvPortMalloc+0x188>)
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	4a1b      	ldr	r2, [pc, #108]	; (8006ae0 <pvPortMalloc+0x188>)
 8006a74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a76:	4b1a      	ldr	r3, [pc, #104]	; (8006ae0 <pvPortMalloc+0x188>)
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	4b1b      	ldr	r3, [pc, #108]	; (8006ae8 <pvPortMalloc+0x190>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d203      	bcs.n	8006a8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a82:	4b17      	ldr	r3, [pc, #92]	; (8006ae0 <pvPortMalloc+0x188>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a18      	ldr	r2, [pc, #96]	; (8006ae8 <pvPortMalloc+0x190>)
 8006a88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	4b13      	ldr	r3, [pc, #76]	; (8006adc <pvPortMalloc+0x184>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	431a      	orrs	r2, r3
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006a9e:	4b13      	ldr	r3, [pc, #76]	; (8006aec <pvPortMalloc+0x194>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	4a11      	ldr	r2, [pc, #68]	; (8006aec <pvPortMalloc+0x194>)
 8006aa6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006aa8:	f7ff fa5a 	bl	8005f60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	f003 0307 	and.w	r3, r3, #7
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00a      	beq.n	8006acc <pvPortMalloc+0x174>
	__asm volatile
 8006ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aba:	f383 8811 	msr	BASEPRI, r3
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	60fb      	str	r3, [r7, #12]
}
 8006ac8:	bf00      	nop
 8006aca:	e7fe      	b.n	8006aca <pvPortMalloc+0x172>
	return pvReturn;
 8006acc:	69fb      	ldr	r3, [r7, #28]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3728      	adds	r7, #40	; 0x28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20004b44 	.word	0x20004b44
 8006adc:	20004b58 	.word	0x20004b58
 8006ae0:	20004b48 	.word	0x20004b48
 8006ae4:	20004b3c 	.word	0x20004b3c
 8006ae8:	20004b4c 	.word	0x20004b4c
 8006aec:	20004b50 	.word	0x20004b50

08006af0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d04d      	beq.n	8006b9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b02:	2308      	movs	r3, #8
 8006b04:	425b      	negs	r3, r3
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4413      	add	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	4b24      	ldr	r3, [pc, #144]	; (8006ba8 <vPortFree+0xb8>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4013      	ands	r3, r2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10a      	bne.n	8006b34 <vPortFree+0x44>
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	60fb      	str	r3, [r7, #12]
}
 8006b30:	bf00      	nop
 8006b32:	e7fe      	b.n	8006b32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00a      	beq.n	8006b52 <vPortFree+0x62>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	60bb      	str	r3, [r7, #8]
}
 8006b4e:	bf00      	nop
 8006b50:	e7fe      	b.n	8006b50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	4b14      	ldr	r3, [pc, #80]	; (8006ba8 <vPortFree+0xb8>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d01e      	beq.n	8006b9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d11a      	bne.n	8006b9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ba8 <vPortFree+0xb8>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	43db      	mvns	r3, r3
 8006b72:	401a      	ands	r2, r3
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b78:	f7ff f9e4 	bl	8005f44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	4b0a      	ldr	r3, [pc, #40]	; (8006bac <vPortFree+0xbc>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4413      	add	r3, r2
 8006b86:	4a09      	ldr	r2, [pc, #36]	; (8006bac <vPortFree+0xbc>)
 8006b88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b8a:	6938      	ldr	r0, [r7, #16]
 8006b8c:	f000 f874 	bl	8006c78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006b90:	4b07      	ldr	r3, [pc, #28]	; (8006bb0 <vPortFree+0xc0>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3301      	adds	r3, #1
 8006b96:	4a06      	ldr	r2, [pc, #24]	; (8006bb0 <vPortFree+0xc0>)
 8006b98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006b9a:	f7ff f9e1 	bl	8005f60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b9e:	bf00      	nop
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20004b58 	.word	0x20004b58
 8006bac:	20004b48 	.word	0x20004b48
 8006bb0:	20004b54 	.word	0x20004b54

08006bb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006bba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006bbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006bc0:	4b27      	ldr	r3, [pc, #156]	; (8006c60 <prvHeapInit+0xac>)
 8006bc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f003 0307 	and.w	r3, r3, #7
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00c      	beq.n	8006be8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	3307      	adds	r3, #7
 8006bd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f023 0307 	bic.w	r3, r3, #7
 8006bda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	4a1f      	ldr	r2, [pc, #124]	; (8006c60 <prvHeapInit+0xac>)
 8006be4:	4413      	add	r3, r2
 8006be6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006bec:	4a1d      	ldr	r2, [pc, #116]	; (8006c64 <prvHeapInit+0xb0>)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006bf2:	4b1c      	ldr	r3, [pc, #112]	; (8006c64 <prvHeapInit+0xb0>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c00:	2208      	movs	r2, #8
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	1a9b      	subs	r3, r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f023 0307 	bic.w	r3, r3, #7
 8006c0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4a15      	ldr	r2, [pc, #84]	; (8006c68 <prvHeapInit+0xb4>)
 8006c14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c16:	4b14      	ldr	r3, [pc, #80]	; (8006c68 <prvHeapInit+0xb4>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c1e:	4b12      	ldr	r3, [pc, #72]	; (8006c68 <prvHeapInit+0xb4>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2200      	movs	r2, #0
 8006c24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	1ad2      	subs	r2, r2, r3
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c34:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <prvHeapInit+0xb4>)
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	4a0a      	ldr	r2, [pc, #40]	; (8006c6c <prvHeapInit+0xb8>)
 8006c42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	4a09      	ldr	r2, [pc, #36]	; (8006c70 <prvHeapInit+0xbc>)
 8006c4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c4c:	4b09      	ldr	r3, [pc, #36]	; (8006c74 <prvHeapInit+0xc0>)
 8006c4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c52:	601a      	str	r2, [r3, #0]
}
 8006c54:	bf00      	nop
 8006c56:	3714      	adds	r7, #20
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr
 8006c60:	20000f3c 	.word	0x20000f3c
 8006c64:	20004b3c 	.word	0x20004b3c
 8006c68:	20004b44 	.word	0x20004b44
 8006c6c:	20004b4c 	.word	0x20004b4c
 8006c70:	20004b48 	.word	0x20004b48
 8006c74:	20004b58 	.word	0x20004b58

08006c78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c80:	4b28      	ldr	r3, [pc, #160]	; (8006d24 <prvInsertBlockIntoFreeList+0xac>)
 8006c82:	60fb      	str	r3, [r7, #12]
 8006c84:	e002      	b.n	8006c8c <prvInsertBlockIntoFreeList+0x14>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	60fb      	str	r3, [r7, #12]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d8f7      	bhi.n	8006c86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d108      	bne.n	8006cba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	441a      	add	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	441a      	add	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d118      	bne.n	8006d00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	4b15      	ldr	r3, [pc, #84]	; (8006d28 <prvInsertBlockIntoFreeList+0xb0>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d00d      	beq.n	8006cf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685a      	ldr	r2, [r3, #4]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	441a      	add	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	e008      	b.n	8006d08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006cf6:	4b0c      	ldr	r3, [pc, #48]	; (8006d28 <prvInsertBlockIntoFreeList+0xb0>)
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	e003      	b.n	8006d08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d002      	beq.n	8006d16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d16:	bf00      	nop
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	20004b3c 	.word	0x20004b3c
 8006d28:	20004b44 	.word	0x20004b44

08006d2c <__errno>:
 8006d2c:	4b01      	ldr	r3, [pc, #4]	; (8006d34 <__errno+0x8>)
 8006d2e:	6818      	ldr	r0, [r3, #0]
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	20000010 	.word	0x20000010

08006d38 <__libc_init_array>:
 8006d38:	b570      	push	{r4, r5, r6, lr}
 8006d3a:	4d0d      	ldr	r5, [pc, #52]	; (8006d70 <__libc_init_array+0x38>)
 8006d3c:	4c0d      	ldr	r4, [pc, #52]	; (8006d74 <__libc_init_array+0x3c>)
 8006d3e:	1b64      	subs	r4, r4, r5
 8006d40:	10a4      	asrs	r4, r4, #2
 8006d42:	2600      	movs	r6, #0
 8006d44:	42a6      	cmp	r6, r4
 8006d46:	d109      	bne.n	8006d5c <__libc_init_array+0x24>
 8006d48:	4d0b      	ldr	r5, [pc, #44]	; (8006d78 <__libc_init_array+0x40>)
 8006d4a:	4c0c      	ldr	r4, [pc, #48]	; (8006d7c <__libc_init_array+0x44>)
 8006d4c:	f000 fc8e 	bl	800766c <_init>
 8006d50:	1b64      	subs	r4, r4, r5
 8006d52:	10a4      	asrs	r4, r4, #2
 8006d54:	2600      	movs	r6, #0
 8006d56:	42a6      	cmp	r6, r4
 8006d58:	d105      	bne.n	8006d66 <__libc_init_array+0x2e>
 8006d5a:	bd70      	pop	{r4, r5, r6, pc}
 8006d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d60:	4798      	blx	r3
 8006d62:	3601      	adds	r6, #1
 8006d64:	e7ee      	b.n	8006d44 <__libc_init_array+0xc>
 8006d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d6a:	4798      	blx	r3
 8006d6c:	3601      	adds	r6, #1
 8006d6e:	e7f2      	b.n	8006d56 <__libc_init_array+0x1e>
 8006d70:	08007a98 	.word	0x08007a98
 8006d74:	08007a98 	.word	0x08007a98
 8006d78:	08007a98 	.word	0x08007a98
 8006d7c:	08007a9c 	.word	0x08007a9c

08006d80 <memcpy>:
 8006d80:	440a      	add	r2, r1
 8006d82:	4291      	cmp	r1, r2
 8006d84:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d88:	d100      	bne.n	8006d8c <memcpy+0xc>
 8006d8a:	4770      	bx	lr
 8006d8c:	b510      	push	{r4, lr}
 8006d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d96:	4291      	cmp	r1, r2
 8006d98:	d1f9      	bne.n	8006d8e <memcpy+0xe>
 8006d9a:	bd10      	pop	{r4, pc}

08006d9c <memset>:
 8006d9c:	4402      	add	r2, r0
 8006d9e:	4603      	mov	r3, r0
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d100      	bne.n	8006da6 <memset+0xa>
 8006da4:	4770      	bx	lr
 8006da6:	f803 1b01 	strb.w	r1, [r3], #1
 8006daa:	e7f9      	b.n	8006da0 <memset+0x4>

08006dac <_vsiprintf_r>:
 8006dac:	b500      	push	{lr}
 8006dae:	b09b      	sub	sp, #108	; 0x6c
 8006db0:	9100      	str	r1, [sp, #0]
 8006db2:	9104      	str	r1, [sp, #16]
 8006db4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006db8:	9105      	str	r1, [sp, #20]
 8006dba:	9102      	str	r1, [sp, #8]
 8006dbc:	4905      	ldr	r1, [pc, #20]	; (8006dd4 <_vsiprintf_r+0x28>)
 8006dbe:	9103      	str	r1, [sp, #12]
 8006dc0:	4669      	mov	r1, sp
 8006dc2:	f000 f86f 	bl	8006ea4 <_svfiprintf_r>
 8006dc6:	9b00      	ldr	r3, [sp, #0]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	701a      	strb	r2, [r3, #0]
 8006dcc:	b01b      	add	sp, #108	; 0x6c
 8006dce:	f85d fb04 	ldr.w	pc, [sp], #4
 8006dd2:	bf00      	nop
 8006dd4:	ffff0208 	.word	0xffff0208

08006dd8 <vsiprintf>:
 8006dd8:	4613      	mov	r3, r2
 8006dda:	460a      	mov	r2, r1
 8006ddc:	4601      	mov	r1, r0
 8006dde:	4802      	ldr	r0, [pc, #8]	; (8006de8 <vsiprintf+0x10>)
 8006de0:	6800      	ldr	r0, [r0, #0]
 8006de2:	f7ff bfe3 	b.w	8006dac <_vsiprintf_r>
 8006de6:	bf00      	nop
 8006de8:	20000010 	.word	0x20000010

08006dec <__ssputs_r>:
 8006dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df0:	688e      	ldr	r6, [r1, #8]
 8006df2:	429e      	cmp	r6, r3
 8006df4:	4682      	mov	sl, r0
 8006df6:	460c      	mov	r4, r1
 8006df8:	4690      	mov	r8, r2
 8006dfa:	461f      	mov	r7, r3
 8006dfc:	d838      	bhi.n	8006e70 <__ssputs_r+0x84>
 8006dfe:	898a      	ldrh	r2, [r1, #12]
 8006e00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e04:	d032      	beq.n	8006e6c <__ssputs_r+0x80>
 8006e06:	6825      	ldr	r5, [r4, #0]
 8006e08:	6909      	ldr	r1, [r1, #16]
 8006e0a:	eba5 0901 	sub.w	r9, r5, r1
 8006e0e:	6965      	ldr	r5, [r4, #20]
 8006e10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e18:	3301      	adds	r3, #1
 8006e1a:	444b      	add	r3, r9
 8006e1c:	106d      	asrs	r5, r5, #1
 8006e1e:	429d      	cmp	r5, r3
 8006e20:	bf38      	it	cc
 8006e22:	461d      	movcc	r5, r3
 8006e24:	0553      	lsls	r3, r2, #21
 8006e26:	d531      	bpl.n	8006e8c <__ssputs_r+0xa0>
 8006e28:	4629      	mov	r1, r5
 8006e2a:	f000 fb55 	bl	80074d8 <_malloc_r>
 8006e2e:	4606      	mov	r6, r0
 8006e30:	b950      	cbnz	r0, 8006e48 <__ssputs_r+0x5c>
 8006e32:	230c      	movs	r3, #12
 8006e34:	f8ca 3000 	str.w	r3, [sl]
 8006e38:	89a3      	ldrh	r3, [r4, #12]
 8006e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e3e:	81a3      	strh	r3, [r4, #12]
 8006e40:	f04f 30ff 	mov.w	r0, #4294967295
 8006e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e48:	6921      	ldr	r1, [r4, #16]
 8006e4a:	464a      	mov	r2, r9
 8006e4c:	f7ff ff98 	bl	8006d80 <memcpy>
 8006e50:	89a3      	ldrh	r3, [r4, #12]
 8006e52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e5a:	81a3      	strh	r3, [r4, #12]
 8006e5c:	6126      	str	r6, [r4, #16]
 8006e5e:	6165      	str	r5, [r4, #20]
 8006e60:	444e      	add	r6, r9
 8006e62:	eba5 0509 	sub.w	r5, r5, r9
 8006e66:	6026      	str	r6, [r4, #0]
 8006e68:	60a5      	str	r5, [r4, #8]
 8006e6a:	463e      	mov	r6, r7
 8006e6c:	42be      	cmp	r6, r7
 8006e6e:	d900      	bls.n	8006e72 <__ssputs_r+0x86>
 8006e70:	463e      	mov	r6, r7
 8006e72:	6820      	ldr	r0, [r4, #0]
 8006e74:	4632      	mov	r2, r6
 8006e76:	4641      	mov	r1, r8
 8006e78:	f000 faa8 	bl	80073cc <memmove>
 8006e7c:	68a3      	ldr	r3, [r4, #8]
 8006e7e:	1b9b      	subs	r3, r3, r6
 8006e80:	60a3      	str	r3, [r4, #8]
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	4433      	add	r3, r6
 8006e86:	6023      	str	r3, [r4, #0]
 8006e88:	2000      	movs	r0, #0
 8006e8a:	e7db      	b.n	8006e44 <__ssputs_r+0x58>
 8006e8c:	462a      	mov	r2, r5
 8006e8e:	f000 fb97 	bl	80075c0 <_realloc_r>
 8006e92:	4606      	mov	r6, r0
 8006e94:	2800      	cmp	r0, #0
 8006e96:	d1e1      	bne.n	8006e5c <__ssputs_r+0x70>
 8006e98:	6921      	ldr	r1, [r4, #16]
 8006e9a:	4650      	mov	r0, sl
 8006e9c:	f000 fab0 	bl	8007400 <_free_r>
 8006ea0:	e7c7      	b.n	8006e32 <__ssputs_r+0x46>
	...

08006ea4 <_svfiprintf_r>:
 8006ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea8:	4698      	mov	r8, r3
 8006eaa:	898b      	ldrh	r3, [r1, #12]
 8006eac:	061b      	lsls	r3, r3, #24
 8006eae:	b09d      	sub	sp, #116	; 0x74
 8006eb0:	4607      	mov	r7, r0
 8006eb2:	460d      	mov	r5, r1
 8006eb4:	4614      	mov	r4, r2
 8006eb6:	d50e      	bpl.n	8006ed6 <_svfiprintf_r+0x32>
 8006eb8:	690b      	ldr	r3, [r1, #16]
 8006eba:	b963      	cbnz	r3, 8006ed6 <_svfiprintf_r+0x32>
 8006ebc:	2140      	movs	r1, #64	; 0x40
 8006ebe:	f000 fb0b 	bl	80074d8 <_malloc_r>
 8006ec2:	6028      	str	r0, [r5, #0]
 8006ec4:	6128      	str	r0, [r5, #16]
 8006ec6:	b920      	cbnz	r0, 8006ed2 <_svfiprintf_r+0x2e>
 8006ec8:	230c      	movs	r3, #12
 8006eca:	603b      	str	r3, [r7, #0]
 8006ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed0:	e0d1      	b.n	8007076 <_svfiprintf_r+0x1d2>
 8006ed2:	2340      	movs	r3, #64	; 0x40
 8006ed4:	616b      	str	r3, [r5, #20]
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8006eda:	2320      	movs	r3, #32
 8006edc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ee0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ee4:	2330      	movs	r3, #48	; 0x30
 8006ee6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007090 <_svfiprintf_r+0x1ec>
 8006eea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006eee:	f04f 0901 	mov.w	r9, #1
 8006ef2:	4623      	mov	r3, r4
 8006ef4:	469a      	mov	sl, r3
 8006ef6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006efa:	b10a      	cbz	r2, 8006f00 <_svfiprintf_r+0x5c>
 8006efc:	2a25      	cmp	r2, #37	; 0x25
 8006efe:	d1f9      	bne.n	8006ef4 <_svfiprintf_r+0x50>
 8006f00:	ebba 0b04 	subs.w	fp, sl, r4
 8006f04:	d00b      	beq.n	8006f1e <_svfiprintf_r+0x7a>
 8006f06:	465b      	mov	r3, fp
 8006f08:	4622      	mov	r2, r4
 8006f0a:	4629      	mov	r1, r5
 8006f0c:	4638      	mov	r0, r7
 8006f0e:	f7ff ff6d 	bl	8006dec <__ssputs_r>
 8006f12:	3001      	adds	r0, #1
 8006f14:	f000 80aa 	beq.w	800706c <_svfiprintf_r+0x1c8>
 8006f18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f1a:	445a      	add	r2, fp
 8006f1c:	9209      	str	r2, [sp, #36]	; 0x24
 8006f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f000 80a2 	beq.w	800706c <_svfiprintf_r+0x1c8>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f32:	f10a 0a01 	add.w	sl, sl, #1
 8006f36:	9304      	str	r3, [sp, #16]
 8006f38:	9307      	str	r3, [sp, #28]
 8006f3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f3e:	931a      	str	r3, [sp, #104]	; 0x68
 8006f40:	4654      	mov	r4, sl
 8006f42:	2205      	movs	r2, #5
 8006f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f48:	4851      	ldr	r0, [pc, #324]	; (8007090 <_svfiprintf_r+0x1ec>)
 8006f4a:	f7f9 f959 	bl	8000200 <memchr>
 8006f4e:	9a04      	ldr	r2, [sp, #16]
 8006f50:	b9d8      	cbnz	r0, 8006f8a <_svfiprintf_r+0xe6>
 8006f52:	06d0      	lsls	r0, r2, #27
 8006f54:	bf44      	itt	mi
 8006f56:	2320      	movmi	r3, #32
 8006f58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f5c:	0711      	lsls	r1, r2, #28
 8006f5e:	bf44      	itt	mi
 8006f60:	232b      	movmi	r3, #43	; 0x2b
 8006f62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f66:	f89a 3000 	ldrb.w	r3, [sl]
 8006f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8006f6c:	d015      	beq.n	8006f9a <_svfiprintf_r+0xf6>
 8006f6e:	9a07      	ldr	r2, [sp, #28]
 8006f70:	4654      	mov	r4, sl
 8006f72:	2000      	movs	r0, #0
 8006f74:	f04f 0c0a 	mov.w	ip, #10
 8006f78:	4621      	mov	r1, r4
 8006f7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f7e:	3b30      	subs	r3, #48	; 0x30
 8006f80:	2b09      	cmp	r3, #9
 8006f82:	d94e      	bls.n	8007022 <_svfiprintf_r+0x17e>
 8006f84:	b1b0      	cbz	r0, 8006fb4 <_svfiprintf_r+0x110>
 8006f86:	9207      	str	r2, [sp, #28]
 8006f88:	e014      	b.n	8006fb4 <_svfiprintf_r+0x110>
 8006f8a:	eba0 0308 	sub.w	r3, r0, r8
 8006f8e:	fa09 f303 	lsl.w	r3, r9, r3
 8006f92:	4313      	orrs	r3, r2
 8006f94:	9304      	str	r3, [sp, #16]
 8006f96:	46a2      	mov	sl, r4
 8006f98:	e7d2      	b.n	8006f40 <_svfiprintf_r+0x9c>
 8006f9a:	9b03      	ldr	r3, [sp, #12]
 8006f9c:	1d19      	adds	r1, r3, #4
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	9103      	str	r1, [sp, #12]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	bfbb      	ittet	lt
 8006fa6:	425b      	neglt	r3, r3
 8006fa8:	f042 0202 	orrlt.w	r2, r2, #2
 8006fac:	9307      	strge	r3, [sp, #28]
 8006fae:	9307      	strlt	r3, [sp, #28]
 8006fb0:	bfb8      	it	lt
 8006fb2:	9204      	strlt	r2, [sp, #16]
 8006fb4:	7823      	ldrb	r3, [r4, #0]
 8006fb6:	2b2e      	cmp	r3, #46	; 0x2e
 8006fb8:	d10c      	bne.n	8006fd4 <_svfiprintf_r+0x130>
 8006fba:	7863      	ldrb	r3, [r4, #1]
 8006fbc:	2b2a      	cmp	r3, #42	; 0x2a
 8006fbe:	d135      	bne.n	800702c <_svfiprintf_r+0x188>
 8006fc0:	9b03      	ldr	r3, [sp, #12]
 8006fc2:	1d1a      	adds	r2, r3, #4
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	9203      	str	r2, [sp, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	bfb8      	it	lt
 8006fcc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fd0:	3402      	adds	r4, #2
 8006fd2:	9305      	str	r3, [sp, #20]
 8006fd4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80070a0 <_svfiprintf_r+0x1fc>
 8006fd8:	7821      	ldrb	r1, [r4, #0]
 8006fda:	2203      	movs	r2, #3
 8006fdc:	4650      	mov	r0, sl
 8006fde:	f7f9 f90f 	bl	8000200 <memchr>
 8006fe2:	b140      	cbz	r0, 8006ff6 <_svfiprintf_r+0x152>
 8006fe4:	2340      	movs	r3, #64	; 0x40
 8006fe6:	eba0 000a 	sub.w	r0, r0, sl
 8006fea:	fa03 f000 	lsl.w	r0, r3, r0
 8006fee:	9b04      	ldr	r3, [sp, #16]
 8006ff0:	4303      	orrs	r3, r0
 8006ff2:	3401      	adds	r4, #1
 8006ff4:	9304      	str	r3, [sp, #16]
 8006ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ffa:	4826      	ldr	r0, [pc, #152]	; (8007094 <_svfiprintf_r+0x1f0>)
 8006ffc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007000:	2206      	movs	r2, #6
 8007002:	f7f9 f8fd 	bl	8000200 <memchr>
 8007006:	2800      	cmp	r0, #0
 8007008:	d038      	beq.n	800707c <_svfiprintf_r+0x1d8>
 800700a:	4b23      	ldr	r3, [pc, #140]	; (8007098 <_svfiprintf_r+0x1f4>)
 800700c:	bb1b      	cbnz	r3, 8007056 <_svfiprintf_r+0x1b2>
 800700e:	9b03      	ldr	r3, [sp, #12]
 8007010:	3307      	adds	r3, #7
 8007012:	f023 0307 	bic.w	r3, r3, #7
 8007016:	3308      	adds	r3, #8
 8007018:	9303      	str	r3, [sp, #12]
 800701a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800701c:	4433      	add	r3, r6
 800701e:	9309      	str	r3, [sp, #36]	; 0x24
 8007020:	e767      	b.n	8006ef2 <_svfiprintf_r+0x4e>
 8007022:	fb0c 3202 	mla	r2, ip, r2, r3
 8007026:	460c      	mov	r4, r1
 8007028:	2001      	movs	r0, #1
 800702a:	e7a5      	b.n	8006f78 <_svfiprintf_r+0xd4>
 800702c:	2300      	movs	r3, #0
 800702e:	3401      	adds	r4, #1
 8007030:	9305      	str	r3, [sp, #20]
 8007032:	4619      	mov	r1, r3
 8007034:	f04f 0c0a 	mov.w	ip, #10
 8007038:	4620      	mov	r0, r4
 800703a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800703e:	3a30      	subs	r2, #48	; 0x30
 8007040:	2a09      	cmp	r2, #9
 8007042:	d903      	bls.n	800704c <_svfiprintf_r+0x1a8>
 8007044:	2b00      	cmp	r3, #0
 8007046:	d0c5      	beq.n	8006fd4 <_svfiprintf_r+0x130>
 8007048:	9105      	str	r1, [sp, #20]
 800704a:	e7c3      	b.n	8006fd4 <_svfiprintf_r+0x130>
 800704c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007050:	4604      	mov	r4, r0
 8007052:	2301      	movs	r3, #1
 8007054:	e7f0      	b.n	8007038 <_svfiprintf_r+0x194>
 8007056:	ab03      	add	r3, sp, #12
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	462a      	mov	r2, r5
 800705c:	4b0f      	ldr	r3, [pc, #60]	; (800709c <_svfiprintf_r+0x1f8>)
 800705e:	a904      	add	r1, sp, #16
 8007060:	4638      	mov	r0, r7
 8007062:	f3af 8000 	nop.w
 8007066:	1c42      	adds	r2, r0, #1
 8007068:	4606      	mov	r6, r0
 800706a:	d1d6      	bne.n	800701a <_svfiprintf_r+0x176>
 800706c:	89ab      	ldrh	r3, [r5, #12]
 800706e:	065b      	lsls	r3, r3, #25
 8007070:	f53f af2c 	bmi.w	8006ecc <_svfiprintf_r+0x28>
 8007074:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007076:	b01d      	add	sp, #116	; 0x74
 8007078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800707c:	ab03      	add	r3, sp, #12
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	462a      	mov	r2, r5
 8007082:	4b06      	ldr	r3, [pc, #24]	; (800709c <_svfiprintf_r+0x1f8>)
 8007084:	a904      	add	r1, sp, #16
 8007086:	4638      	mov	r0, r7
 8007088:	f000 f87a 	bl	8007180 <_printf_i>
 800708c:	e7eb      	b.n	8007066 <_svfiprintf_r+0x1c2>
 800708e:	bf00      	nop
 8007090:	08007a5c 	.word	0x08007a5c
 8007094:	08007a66 	.word	0x08007a66
 8007098:	00000000 	.word	0x00000000
 800709c:	08006ded 	.word	0x08006ded
 80070a0:	08007a62 	.word	0x08007a62

080070a4 <_printf_common>:
 80070a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070a8:	4616      	mov	r6, r2
 80070aa:	4699      	mov	r9, r3
 80070ac:	688a      	ldr	r2, [r1, #8]
 80070ae:	690b      	ldr	r3, [r1, #16]
 80070b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070b4:	4293      	cmp	r3, r2
 80070b6:	bfb8      	it	lt
 80070b8:	4613      	movlt	r3, r2
 80070ba:	6033      	str	r3, [r6, #0]
 80070bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070c0:	4607      	mov	r7, r0
 80070c2:	460c      	mov	r4, r1
 80070c4:	b10a      	cbz	r2, 80070ca <_printf_common+0x26>
 80070c6:	3301      	adds	r3, #1
 80070c8:	6033      	str	r3, [r6, #0]
 80070ca:	6823      	ldr	r3, [r4, #0]
 80070cc:	0699      	lsls	r1, r3, #26
 80070ce:	bf42      	ittt	mi
 80070d0:	6833      	ldrmi	r3, [r6, #0]
 80070d2:	3302      	addmi	r3, #2
 80070d4:	6033      	strmi	r3, [r6, #0]
 80070d6:	6825      	ldr	r5, [r4, #0]
 80070d8:	f015 0506 	ands.w	r5, r5, #6
 80070dc:	d106      	bne.n	80070ec <_printf_common+0x48>
 80070de:	f104 0a19 	add.w	sl, r4, #25
 80070e2:	68e3      	ldr	r3, [r4, #12]
 80070e4:	6832      	ldr	r2, [r6, #0]
 80070e6:	1a9b      	subs	r3, r3, r2
 80070e8:	42ab      	cmp	r3, r5
 80070ea:	dc26      	bgt.n	800713a <_printf_common+0x96>
 80070ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070f0:	1e13      	subs	r3, r2, #0
 80070f2:	6822      	ldr	r2, [r4, #0]
 80070f4:	bf18      	it	ne
 80070f6:	2301      	movne	r3, #1
 80070f8:	0692      	lsls	r2, r2, #26
 80070fa:	d42b      	bmi.n	8007154 <_printf_common+0xb0>
 80070fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007100:	4649      	mov	r1, r9
 8007102:	4638      	mov	r0, r7
 8007104:	47c0      	blx	r8
 8007106:	3001      	adds	r0, #1
 8007108:	d01e      	beq.n	8007148 <_printf_common+0xa4>
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	68e5      	ldr	r5, [r4, #12]
 800710e:	6832      	ldr	r2, [r6, #0]
 8007110:	f003 0306 	and.w	r3, r3, #6
 8007114:	2b04      	cmp	r3, #4
 8007116:	bf08      	it	eq
 8007118:	1aad      	subeq	r5, r5, r2
 800711a:	68a3      	ldr	r3, [r4, #8]
 800711c:	6922      	ldr	r2, [r4, #16]
 800711e:	bf0c      	ite	eq
 8007120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007124:	2500      	movne	r5, #0
 8007126:	4293      	cmp	r3, r2
 8007128:	bfc4      	itt	gt
 800712a:	1a9b      	subgt	r3, r3, r2
 800712c:	18ed      	addgt	r5, r5, r3
 800712e:	2600      	movs	r6, #0
 8007130:	341a      	adds	r4, #26
 8007132:	42b5      	cmp	r5, r6
 8007134:	d11a      	bne.n	800716c <_printf_common+0xc8>
 8007136:	2000      	movs	r0, #0
 8007138:	e008      	b.n	800714c <_printf_common+0xa8>
 800713a:	2301      	movs	r3, #1
 800713c:	4652      	mov	r2, sl
 800713e:	4649      	mov	r1, r9
 8007140:	4638      	mov	r0, r7
 8007142:	47c0      	blx	r8
 8007144:	3001      	adds	r0, #1
 8007146:	d103      	bne.n	8007150 <_printf_common+0xac>
 8007148:	f04f 30ff 	mov.w	r0, #4294967295
 800714c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007150:	3501      	adds	r5, #1
 8007152:	e7c6      	b.n	80070e2 <_printf_common+0x3e>
 8007154:	18e1      	adds	r1, r4, r3
 8007156:	1c5a      	adds	r2, r3, #1
 8007158:	2030      	movs	r0, #48	; 0x30
 800715a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800715e:	4422      	add	r2, r4
 8007160:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007164:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007168:	3302      	adds	r3, #2
 800716a:	e7c7      	b.n	80070fc <_printf_common+0x58>
 800716c:	2301      	movs	r3, #1
 800716e:	4622      	mov	r2, r4
 8007170:	4649      	mov	r1, r9
 8007172:	4638      	mov	r0, r7
 8007174:	47c0      	blx	r8
 8007176:	3001      	adds	r0, #1
 8007178:	d0e6      	beq.n	8007148 <_printf_common+0xa4>
 800717a:	3601      	adds	r6, #1
 800717c:	e7d9      	b.n	8007132 <_printf_common+0x8e>
	...

08007180 <_printf_i>:
 8007180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007184:	7e0f      	ldrb	r7, [r1, #24]
 8007186:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007188:	2f78      	cmp	r7, #120	; 0x78
 800718a:	4691      	mov	r9, r2
 800718c:	4680      	mov	r8, r0
 800718e:	460c      	mov	r4, r1
 8007190:	469a      	mov	sl, r3
 8007192:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007196:	d807      	bhi.n	80071a8 <_printf_i+0x28>
 8007198:	2f62      	cmp	r7, #98	; 0x62
 800719a:	d80a      	bhi.n	80071b2 <_printf_i+0x32>
 800719c:	2f00      	cmp	r7, #0
 800719e:	f000 80d8 	beq.w	8007352 <_printf_i+0x1d2>
 80071a2:	2f58      	cmp	r7, #88	; 0x58
 80071a4:	f000 80a3 	beq.w	80072ee <_printf_i+0x16e>
 80071a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071b0:	e03a      	b.n	8007228 <_printf_i+0xa8>
 80071b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071b6:	2b15      	cmp	r3, #21
 80071b8:	d8f6      	bhi.n	80071a8 <_printf_i+0x28>
 80071ba:	a101      	add	r1, pc, #4	; (adr r1, 80071c0 <_printf_i+0x40>)
 80071bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071c0:	08007219 	.word	0x08007219
 80071c4:	0800722d 	.word	0x0800722d
 80071c8:	080071a9 	.word	0x080071a9
 80071cc:	080071a9 	.word	0x080071a9
 80071d0:	080071a9 	.word	0x080071a9
 80071d4:	080071a9 	.word	0x080071a9
 80071d8:	0800722d 	.word	0x0800722d
 80071dc:	080071a9 	.word	0x080071a9
 80071e0:	080071a9 	.word	0x080071a9
 80071e4:	080071a9 	.word	0x080071a9
 80071e8:	080071a9 	.word	0x080071a9
 80071ec:	08007339 	.word	0x08007339
 80071f0:	0800725d 	.word	0x0800725d
 80071f4:	0800731b 	.word	0x0800731b
 80071f8:	080071a9 	.word	0x080071a9
 80071fc:	080071a9 	.word	0x080071a9
 8007200:	0800735b 	.word	0x0800735b
 8007204:	080071a9 	.word	0x080071a9
 8007208:	0800725d 	.word	0x0800725d
 800720c:	080071a9 	.word	0x080071a9
 8007210:	080071a9 	.word	0x080071a9
 8007214:	08007323 	.word	0x08007323
 8007218:	682b      	ldr	r3, [r5, #0]
 800721a:	1d1a      	adds	r2, r3, #4
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	602a      	str	r2, [r5, #0]
 8007220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007224:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007228:	2301      	movs	r3, #1
 800722a:	e0a3      	b.n	8007374 <_printf_i+0x1f4>
 800722c:	6820      	ldr	r0, [r4, #0]
 800722e:	6829      	ldr	r1, [r5, #0]
 8007230:	0606      	lsls	r6, r0, #24
 8007232:	f101 0304 	add.w	r3, r1, #4
 8007236:	d50a      	bpl.n	800724e <_printf_i+0xce>
 8007238:	680e      	ldr	r6, [r1, #0]
 800723a:	602b      	str	r3, [r5, #0]
 800723c:	2e00      	cmp	r6, #0
 800723e:	da03      	bge.n	8007248 <_printf_i+0xc8>
 8007240:	232d      	movs	r3, #45	; 0x2d
 8007242:	4276      	negs	r6, r6
 8007244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007248:	485e      	ldr	r0, [pc, #376]	; (80073c4 <_printf_i+0x244>)
 800724a:	230a      	movs	r3, #10
 800724c:	e019      	b.n	8007282 <_printf_i+0x102>
 800724e:	680e      	ldr	r6, [r1, #0]
 8007250:	602b      	str	r3, [r5, #0]
 8007252:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007256:	bf18      	it	ne
 8007258:	b236      	sxthne	r6, r6
 800725a:	e7ef      	b.n	800723c <_printf_i+0xbc>
 800725c:	682b      	ldr	r3, [r5, #0]
 800725e:	6820      	ldr	r0, [r4, #0]
 8007260:	1d19      	adds	r1, r3, #4
 8007262:	6029      	str	r1, [r5, #0]
 8007264:	0601      	lsls	r1, r0, #24
 8007266:	d501      	bpl.n	800726c <_printf_i+0xec>
 8007268:	681e      	ldr	r6, [r3, #0]
 800726a:	e002      	b.n	8007272 <_printf_i+0xf2>
 800726c:	0646      	lsls	r6, r0, #25
 800726e:	d5fb      	bpl.n	8007268 <_printf_i+0xe8>
 8007270:	881e      	ldrh	r6, [r3, #0]
 8007272:	4854      	ldr	r0, [pc, #336]	; (80073c4 <_printf_i+0x244>)
 8007274:	2f6f      	cmp	r7, #111	; 0x6f
 8007276:	bf0c      	ite	eq
 8007278:	2308      	moveq	r3, #8
 800727a:	230a      	movne	r3, #10
 800727c:	2100      	movs	r1, #0
 800727e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007282:	6865      	ldr	r5, [r4, #4]
 8007284:	60a5      	str	r5, [r4, #8]
 8007286:	2d00      	cmp	r5, #0
 8007288:	bfa2      	ittt	ge
 800728a:	6821      	ldrge	r1, [r4, #0]
 800728c:	f021 0104 	bicge.w	r1, r1, #4
 8007290:	6021      	strge	r1, [r4, #0]
 8007292:	b90e      	cbnz	r6, 8007298 <_printf_i+0x118>
 8007294:	2d00      	cmp	r5, #0
 8007296:	d04d      	beq.n	8007334 <_printf_i+0x1b4>
 8007298:	4615      	mov	r5, r2
 800729a:	fbb6 f1f3 	udiv	r1, r6, r3
 800729e:	fb03 6711 	mls	r7, r3, r1, r6
 80072a2:	5dc7      	ldrb	r7, [r0, r7]
 80072a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072a8:	4637      	mov	r7, r6
 80072aa:	42bb      	cmp	r3, r7
 80072ac:	460e      	mov	r6, r1
 80072ae:	d9f4      	bls.n	800729a <_printf_i+0x11a>
 80072b0:	2b08      	cmp	r3, #8
 80072b2:	d10b      	bne.n	80072cc <_printf_i+0x14c>
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	07de      	lsls	r6, r3, #31
 80072b8:	d508      	bpl.n	80072cc <_printf_i+0x14c>
 80072ba:	6923      	ldr	r3, [r4, #16]
 80072bc:	6861      	ldr	r1, [r4, #4]
 80072be:	4299      	cmp	r1, r3
 80072c0:	bfde      	ittt	le
 80072c2:	2330      	movle	r3, #48	; 0x30
 80072c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072cc:	1b52      	subs	r2, r2, r5
 80072ce:	6122      	str	r2, [r4, #16]
 80072d0:	f8cd a000 	str.w	sl, [sp]
 80072d4:	464b      	mov	r3, r9
 80072d6:	aa03      	add	r2, sp, #12
 80072d8:	4621      	mov	r1, r4
 80072da:	4640      	mov	r0, r8
 80072dc:	f7ff fee2 	bl	80070a4 <_printf_common>
 80072e0:	3001      	adds	r0, #1
 80072e2:	d14c      	bne.n	800737e <_printf_i+0x1fe>
 80072e4:	f04f 30ff 	mov.w	r0, #4294967295
 80072e8:	b004      	add	sp, #16
 80072ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ee:	4835      	ldr	r0, [pc, #212]	; (80073c4 <_printf_i+0x244>)
 80072f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072f4:	6829      	ldr	r1, [r5, #0]
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80072fc:	6029      	str	r1, [r5, #0]
 80072fe:	061d      	lsls	r5, r3, #24
 8007300:	d514      	bpl.n	800732c <_printf_i+0x1ac>
 8007302:	07df      	lsls	r7, r3, #31
 8007304:	bf44      	itt	mi
 8007306:	f043 0320 	orrmi.w	r3, r3, #32
 800730a:	6023      	strmi	r3, [r4, #0]
 800730c:	b91e      	cbnz	r6, 8007316 <_printf_i+0x196>
 800730e:	6823      	ldr	r3, [r4, #0]
 8007310:	f023 0320 	bic.w	r3, r3, #32
 8007314:	6023      	str	r3, [r4, #0]
 8007316:	2310      	movs	r3, #16
 8007318:	e7b0      	b.n	800727c <_printf_i+0xfc>
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	f043 0320 	orr.w	r3, r3, #32
 8007320:	6023      	str	r3, [r4, #0]
 8007322:	2378      	movs	r3, #120	; 0x78
 8007324:	4828      	ldr	r0, [pc, #160]	; (80073c8 <_printf_i+0x248>)
 8007326:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800732a:	e7e3      	b.n	80072f4 <_printf_i+0x174>
 800732c:	0659      	lsls	r1, r3, #25
 800732e:	bf48      	it	mi
 8007330:	b2b6      	uxthmi	r6, r6
 8007332:	e7e6      	b.n	8007302 <_printf_i+0x182>
 8007334:	4615      	mov	r5, r2
 8007336:	e7bb      	b.n	80072b0 <_printf_i+0x130>
 8007338:	682b      	ldr	r3, [r5, #0]
 800733a:	6826      	ldr	r6, [r4, #0]
 800733c:	6961      	ldr	r1, [r4, #20]
 800733e:	1d18      	adds	r0, r3, #4
 8007340:	6028      	str	r0, [r5, #0]
 8007342:	0635      	lsls	r5, r6, #24
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	d501      	bpl.n	800734c <_printf_i+0x1cc>
 8007348:	6019      	str	r1, [r3, #0]
 800734a:	e002      	b.n	8007352 <_printf_i+0x1d2>
 800734c:	0670      	lsls	r0, r6, #25
 800734e:	d5fb      	bpl.n	8007348 <_printf_i+0x1c8>
 8007350:	8019      	strh	r1, [r3, #0]
 8007352:	2300      	movs	r3, #0
 8007354:	6123      	str	r3, [r4, #16]
 8007356:	4615      	mov	r5, r2
 8007358:	e7ba      	b.n	80072d0 <_printf_i+0x150>
 800735a:	682b      	ldr	r3, [r5, #0]
 800735c:	1d1a      	adds	r2, r3, #4
 800735e:	602a      	str	r2, [r5, #0]
 8007360:	681d      	ldr	r5, [r3, #0]
 8007362:	6862      	ldr	r2, [r4, #4]
 8007364:	2100      	movs	r1, #0
 8007366:	4628      	mov	r0, r5
 8007368:	f7f8 ff4a 	bl	8000200 <memchr>
 800736c:	b108      	cbz	r0, 8007372 <_printf_i+0x1f2>
 800736e:	1b40      	subs	r0, r0, r5
 8007370:	6060      	str	r0, [r4, #4]
 8007372:	6863      	ldr	r3, [r4, #4]
 8007374:	6123      	str	r3, [r4, #16]
 8007376:	2300      	movs	r3, #0
 8007378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800737c:	e7a8      	b.n	80072d0 <_printf_i+0x150>
 800737e:	6923      	ldr	r3, [r4, #16]
 8007380:	462a      	mov	r2, r5
 8007382:	4649      	mov	r1, r9
 8007384:	4640      	mov	r0, r8
 8007386:	47d0      	blx	sl
 8007388:	3001      	adds	r0, #1
 800738a:	d0ab      	beq.n	80072e4 <_printf_i+0x164>
 800738c:	6823      	ldr	r3, [r4, #0]
 800738e:	079b      	lsls	r3, r3, #30
 8007390:	d413      	bmi.n	80073ba <_printf_i+0x23a>
 8007392:	68e0      	ldr	r0, [r4, #12]
 8007394:	9b03      	ldr	r3, [sp, #12]
 8007396:	4298      	cmp	r0, r3
 8007398:	bfb8      	it	lt
 800739a:	4618      	movlt	r0, r3
 800739c:	e7a4      	b.n	80072e8 <_printf_i+0x168>
 800739e:	2301      	movs	r3, #1
 80073a0:	4632      	mov	r2, r6
 80073a2:	4649      	mov	r1, r9
 80073a4:	4640      	mov	r0, r8
 80073a6:	47d0      	blx	sl
 80073a8:	3001      	adds	r0, #1
 80073aa:	d09b      	beq.n	80072e4 <_printf_i+0x164>
 80073ac:	3501      	adds	r5, #1
 80073ae:	68e3      	ldr	r3, [r4, #12]
 80073b0:	9903      	ldr	r1, [sp, #12]
 80073b2:	1a5b      	subs	r3, r3, r1
 80073b4:	42ab      	cmp	r3, r5
 80073b6:	dcf2      	bgt.n	800739e <_printf_i+0x21e>
 80073b8:	e7eb      	b.n	8007392 <_printf_i+0x212>
 80073ba:	2500      	movs	r5, #0
 80073bc:	f104 0619 	add.w	r6, r4, #25
 80073c0:	e7f5      	b.n	80073ae <_printf_i+0x22e>
 80073c2:	bf00      	nop
 80073c4:	08007a6d 	.word	0x08007a6d
 80073c8:	08007a7e 	.word	0x08007a7e

080073cc <memmove>:
 80073cc:	4288      	cmp	r0, r1
 80073ce:	b510      	push	{r4, lr}
 80073d0:	eb01 0402 	add.w	r4, r1, r2
 80073d4:	d902      	bls.n	80073dc <memmove+0x10>
 80073d6:	4284      	cmp	r4, r0
 80073d8:	4623      	mov	r3, r4
 80073da:	d807      	bhi.n	80073ec <memmove+0x20>
 80073dc:	1e43      	subs	r3, r0, #1
 80073de:	42a1      	cmp	r1, r4
 80073e0:	d008      	beq.n	80073f4 <memmove+0x28>
 80073e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073ea:	e7f8      	b.n	80073de <memmove+0x12>
 80073ec:	4402      	add	r2, r0
 80073ee:	4601      	mov	r1, r0
 80073f0:	428a      	cmp	r2, r1
 80073f2:	d100      	bne.n	80073f6 <memmove+0x2a>
 80073f4:	bd10      	pop	{r4, pc}
 80073f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073fe:	e7f7      	b.n	80073f0 <memmove+0x24>

08007400 <_free_r>:
 8007400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007402:	2900      	cmp	r1, #0
 8007404:	d044      	beq.n	8007490 <_free_r+0x90>
 8007406:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800740a:	9001      	str	r0, [sp, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	f1a1 0404 	sub.w	r4, r1, #4
 8007412:	bfb8      	it	lt
 8007414:	18e4      	addlt	r4, r4, r3
 8007416:	f000 f913 	bl	8007640 <__malloc_lock>
 800741a:	4a1e      	ldr	r2, [pc, #120]	; (8007494 <_free_r+0x94>)
 800741c:	9801      	ldr	r0, [sp, #4]
 800741e:	6813      	ldr	r3, [r2, #0]
 8007420:	b933      	cbnz	r3, 8007430 <_free_r+0x30>
 8007422:	6063      	str	r3, [r4, #4]
 8007424:	6014      	str	r4, [r2, #0]
 8007426:	b003      	add	sp, #12
 8007428:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800742c:	f000 b90e 	b.w	800764c <__malloc_unlock>
 8007430:	42a3      	cmp	r3, r4
 8007432:	d908      	bls.n	8007446 <_free_r+0x46>
 8007434:	6825      	ldr	r5, [r4, #0]
 8007436:	1961      	adds	r1, r4, r5
 8007438:	428b      	cmp	r3, r1
 800743a:	bf01      	itttt	eq
 800743c:	6819      	ldreq	r1, [r3, #0]
 800743e:	685b      	ldreq	r3, [r3, #4]
 8007440:	1949      	addeq	r1, r1, r5
 8007442:	6021      	streq	r1, [r4, #0]
 8007444:	e7ed      	b.n	8007422 <_free_r+0x22>
 8007446:	461a      	mov	r2, r3
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	b10b      	cbz	r3, 8007450 <_free_r+0x50>
 800744c:	42a3      	cmp	r3, r4
 800744e:	d9fa      	bls.n	8007446 <_free_r+0x46>
 8007450:	6811      	ldr	r1, [r2, #0]
 8007452:	1855      	adds	r5, r2, r1
 8007454:	42a5      	cmp	r5, r4
 8007456:	d10b      	bne.n	8007470 <_free_r+0x70>
 8007458:	6824      	ldr	r4, [r4, #0]
 800745a:	4421      	add	r1, r4
 800745c:	1854      	adds	r4, r2, r1
 800745e:	42a3      	cmp	r3, r4
 8007460:	6011      	str	r1, [r2, #0]
 8007462:	d1e0      	bne.n	8007426 <_free_r+0x26>
 8007464:	681c      	ldr	r4, [r3, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	6053      	str	r3, [r2, #4]
 800746a:	4421      	add	r1, r4
 800746c:	6011      	str	r1, [r2, #0]
 800746e:	e7da      	b.n	8007426 <_free_r+0x26>
 8007470:	d902      	bls.n	8007478 <_free_r+0x78>
 8007472:	230c      	movs	r3, #12
 8007474:	6003      	str	r3, [r0, #0]
 8007476:	e7d6      	b.n	8007426 <_free_r+0x26>
 8007478:	6825      	ldr	r5, [r4, #0]
 800747a:	1961      	adds	r1, r4, r5
 800747c:	428b      	cmp	r3, r1
 800747e:	bf04      	itt	eq
 8007480:	6819      	ldreq	r1, [r3, #0]
 8007482:	685b      	ldreq	r3, [r3, #4]
 8007484:	6063      	str	r3, [r4, #4]
 8007486:	bf04      	itt	eq
 8007488:	1949      	addeq	r1, r1, r5
 800748a:	6021      	streq	r1, [r4, #0]
 800748c:	6054      	str	r4, [r2, #4]
 800748e:	e7ca      	b.n	8007426 <_free_r+0x26>
 8007490:	b003      	add	sp, #12
 8007492:	bd30      	pop	{r4, r5, pc}
 8007494:	20004b5c 	.word	0x20004b5c

08007498 <sbrk_aligned>:
 8007498:	b570      	push	{r4, r5, r6, lr}
 800749a:	4e0e      	ldr	r6, [pc, #56]	; (80074d4 <sbrk_aligned+0x3c>)
 800749c:	460c      	mov	r4, r1
 800749e:	6831      	ldr	r1, [r6, #0]
 80074a0:	4605      	mov	r5, r0
 80074a2:	b911      	cbnz	r1, 80074aa <sbrk_aligned+0x12>
 80074a4:	f000 f8bc 	bl	8007620 <_sbrk_r>
 80074a8:	6030      	str	r0, [r6, #0]
 80074aa:	4621      	mov	r1, r4
 80074ac:	4628      	mov	r0, r5
 80074ae:	f000 f8b7 	bl	8007620 <_sbrk_r>
 80074b2:	1c43      	adds	r3, r0, #1
 80074b4:	d00a      	beq.n	80074cc <sbrk_aligned+0x34>
 80074b6:	1cc4      	adds	r4, r0, #3
 80074b8:	f024 0403 	bic.w	r4, r4, #3
 80074bc:	42a0      	cmp	r0, r4
 80074be:	d007      	beq.n	80074d0 <sbrk_aligned+0x38>
 80074c0:	1a21      	subs	r1, r4, r0
 80074c2:	4628      	mov	r0, r5
 80074c4:	f000 f8ac 	bl	8007620 <_sbrk_r>
 80074c8:	3001      	adds	r0, #1
 80074ca:	d101      	bne.n	80074d0 <sbrk_aligned+0x38>
 80074cc:	f04f 34ff 	mov.w	r4, #4294967295
 80074d0:	4620      	mov	r0, r4
 80074d2:	bd70      	pop	{r4, r5, r6, pc}
 80074d4:	20004b60 	.word	0x20004b60

080074d8 <_malloc_r>:
 80074d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074dc:	1ccd      	adds	r5, r1, #3
 80074de:	f025 0503 	bic.w	r5, r5, #3
 80074e2:	3508      	adds	r5, #8
 80074e4:	2d0c      	cmp	r5, #12
 80074e6:	bf38      	it	cc
 80074e8:	250c      	movcc	r5, #12
 80074ea:	2d00      	cmp	r5, #0
 80074ec:	4607      	mov	r7, r0
 80074ee:	db01      	blt.n	80074f4 <_malloc_r+0x1c>
 80074f0:	42a9      	cmp	r1, r5
 80074f2:	d905      	bls.n	8007500 <_malloc_r+0x28>
 80074f4:	230c      	movs	r3, #12
 80074f6:	603b      	str	r3, [r7, #0]
 80074f8:	2600      	movs	r6, #0
 80074fa:	4630      	mov	r0, r6
 80074fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007500:	4e2e      	ldr	r6, [pc, #184]	; (80075bc <_malloc_r+0xe4>)
 8007502:	f000 f89d 	bl	8007640 <__malloc_lock>
 8007506:	6833      	ldr	r3, [r6, #0]
 8007508:	461c      	mov	r4, r3
 800750a:	bb34      	cbnz	r4, 800755a <_malloc_r+0x82>
 800750c:	4629      	mov	r1, r5
 800750e:	4638      	mov	r0, r7
 8007510:	f7ff ffc2 	bl	8007498 <sbrk_aligned>
 8007514:	1c43      	adds	r3, r0, #1
 8007516:	4604      	mov	r4, r0
 8007518:	d14d      	bne.n	80075b6 <_malloc_r+0xde>
 800751a:	6834      	ldr	r4, [r6, #0]
 800751c:	4626      	mov	r6, r4
 800751e:	2e00      	cmp	r6, #0
 8007520:	d140      	bne.n	80075a4 <_malloc_r+0xcc>
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	4631      	mov	r1, r6
 8007526:	4638      	mov	r0, r7
 8007528:	eb04 0803 	add.w	r8, r4, r3
 800752c:	f000 f878 	bl	8007620 <_sbrk_r>
 8007530:	4580      	cmp	r8, r0
 8007532:	d13a      	bne.n	80075aa <_malloc_r+0xd2>
 8007534:	6821      	ldr	r1, [r4, #0]
 8007536:	3503      	adds	r5, #3
 8007538:	1a6d      	subs	r5, r5, r1
 800753a:	f025 0503 	bic.w	r5, r5, #3
 800753e:	3508      	adds	r5, #8
 8007540:	2d0c      	cmp	r5, #12
 8007542:	bf38      	it	cc
 8007544:	250c      	movcc	r5, #12
 8007546:	4629      	mov	r1, r5
 8007548:	4638      	mov	r0, r7
 800754a:	f7ff ffa5 	bl	8007498 <sbrk_aligned>
 800754e:	3001      	adds	r0, #1
 8007550:	d02b      	beq.n	80075aa <_malloc_r+0xd2>
 8007552:	6823      	ldr	r3, [r4, #0]
 8007554:	442b      	add	r3, r5
 8007556:	6023      	str	r3, [r4, #0]
 8007558:	e00e      	b.n	8007578 <_malloc_r+0xa0>
 800755a:	6822      	ldr	r2, [r4, #0]
 800755c:	1b52      	subs	r2, r2, r5
 800755e:	d41e      	bmi.n	800759e <_malloc_r+0xc6>
 8007560:	2a0b      	cmp	r2, #11
 8007562:	d916      	bls.n	8007592 <_malloc_r+0xba>
 8007564:	1961      	adds	r1, r4, r5
 8007566:	42a3      	cmp	r3, r4
 8007568:	6025      	str	r5, [r4, #0]
 800756a:	bf18      	it	ne
 800756c:	6059      	strne	r1, [r3, #4]
 800756e:	6863      	ldr	r3, [r4, #4]
 8007570:	bf08      	it	eq
 8007572:	6031      	streq	r1, [r6, #0]
 8007574:	5162      	str	r2, [r4, r5]
 8007576:	604b      	str	r3, [r1, #4]
 8007578:	4638      	mov	r0, r7
 800757a:	f104 060b 	add.w	r6, r4, #11
 800757e:	f000 f865 	bl	800764c <__malloc_unlock>
 8007582:	f026 0607 	bic.w	r6, r6, #7
 8007586:	1d23      	adds	r3, r4, #4
 8007588:	1af2      	subs	r2, r6, r3
 800758a:	d0b6      	beq.n	80074fa <_malloc_r+0x22>
 800758c:	1b9b      	subs	r3, r3, r6
 800758e:	50a3      	str	r3, [r4, r2]
 8007590:	e7b3      	b.n	80074fa <_malloc_r+0x22>
 8007592:	6862      	ldr	r2, [r4, #4]
 8007594:	42a3      	cmp	r3, r4
 8007596:	bf0c      	ite	eq
 8007598:	6032      	streq	r2, [r6, #0]
 800759a:	605a      	strne	r2, [r3, #4]
 800759c:	e7ec      	b.n	8007578 <_malloc_r+0xa0>
 800759e:	4623      	mov	r3, r4
 80075a0:	6864      	ldr	r4, [r4, #4]
 80075a2:	e7b2      	b.n	800750a <_malloc_r+0x32>
 80075a4:	4634      	mov	r4, r6
 80075a6:	6876      	ldr	r6, [r6, #4]
 80075a8:	e7b9      	b.n	800751e <_malloc_r+0x46>
 80075aa:	230c      	movs	r3, #12
 80075ac:	603b      	str	r3, [r7, #0]
 80075ae:	4638      	mov	r0, r7
 80075b0:	f000 f84c 	bl	800764c <__malloc_unlock>
 80075b4:	e7a1      	b.n	80074fa <_malloc_r+0x22>
 80075b6:	6025      	str	r5, [r4, #0]
 80075b8:	e7de      	b.n	8007578 <_malloc_r+0xa0>
 80075ba:	bf00      	nop
 80075bc:	20004b5c 	.word	0x20004b5c

080075c0 <_realloc_r>:
 80075c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075c4:	4680      	mov	r8, r0
 80075c6:	4614      	mov	r4, r2
 80075c8:	460e      	mov	r6, r1
 80075ca:	b921      	cbnz	r1, 80075d6 <_realloc_r+0x16>
 80075cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075d0:	4611      	mov	r1, r2
 80075d2:	f7ff bf81 	b.w	80074d8 <_malloc_r>
 80075d6:	b92a      	cbnz	r2, 80075e4 <_realloc_r+0x24>
 80075d8:	f7ff ff12 	bl	8007400 <_free_r>
 80075dc:	4625      	mov	r5, r4
 80075de:	4628      	mov	r0, r5
 80075e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075e4:	f000 f838 	bl	8007658 <_malloc_usable_size_r>
 80075e8:	4284      	cmp	r4, r0
 80075ea:	4607      	mov	r7, r0
 80075ec:	d802      	bhi.n	80075f4 <_realloc_r+0x34>
 80075ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075f2:	d812      	bhi.n	800761a <_realloc_r+0x5a>
 80075f4:	4621      	mov	r1, r4
 80075f6:	4640      	mov	r0, r8
 80075f8:	f7ff ff6e 	bl	80074d8 <_malloc_r>
 80075fc:	4605      	mov	r5, r0
 80075fe:	2800      	cmp	r0, #0
 8007600:	d0ed      	beq.n	80075de <_realloc_r+0x1e>
 8007602:	42bc      	cmp	r4, r7
 8007604:	4622      	mov	r2, r4
 8007606:	4631      	mov	r1, r6
 8007608:	bf28      	it	cs
 800760a:	463a      	movcs	r2, r7
 800760c:	f7ff fbb8 	bl	8006d80 <memcpy>
 8007610:	4631      	mov	r1, r6
 8007612:	4640      	mov	r0, r8
 8007614:	f7ff fef4 	bl	8007400 <_free_r>
 8007618:	e7e1      	b.n	80075de <_realloc_r+0x1e>
 800761a:	4635      	mov	r5, r6
 800761c:	e7df      	b.n	80075de <_realloc_r+0x1e>
	...

08007620 <_sbrk_r>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	4d06      	ldr	r5, [pc, #24]	; (800763c <_sbrk_r+0x1c>)
 8007624:	2300      	movs	r3, #0
 8007626:	4604      	mov	r4, r0
 8007628:	4608      	mov	r0, r1
 800762a:	602b      	str	r3, [r5, #0]
 800762c:	f7fa fb24 	bl	8001c78 <_sbrk>
 8007630:	1c43      	adds	r3, r0, #1
 8007632:	d102      	bne.n	800763a <_sbrk_r+0x1a>
 8007634:	682b      	ldr	r3, [r5, #0]
 8007636:	b103      	cbz	r3, 800763a <_sbrk_r+0x1a>
 8007638:	6023      	str	r3, [r4, #0]
 800763a:	bd38      	pop	{r3, r4, r5, pc}
 800763c:	20004b64 	.word	0x20004b64

08007640 <__malloc_lock>:
 8007640:	4801      	ldr	r0, [pc, #4]	; (8007648 <__malloc_lock+0x8>)
 8007642:	f000 b811 	b.w	8007668 <__retarget_lock_acquire_recursive>
 8007646:	bf00      	nop
 8007648:	20004b68 	.word	0x20004b68

0800764c <__malloc_unlock>:
 800764c:	4801      	ldr	r0, [pc, #4]	; (8007654 <__malloc_unlock+0x8>)
 800764e:	f000 b80c 	b.w	800766a <__retarget_lock_release_recursive>
 8007652:	bf00      	nop
 8007654:	20004b68 	.word	0x20004b68

08007658 <_malloc_usable_size_r>:
 8007658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800765c:	1f18      	subs	r0, r3, #4
 800765e:	2b00      	cmp	r3, #0
 8007660:	bfbc      	itt	lt
 8007662:	580b      	ldrlt	r3, [r1, r0]
 8007664:	18c0      	addlt	r0, r0, r3
 8007666:	4770      	bx	lr

08007668 <__retarget_lock_acquire_recursive>:
 8007668:	4770      	bx	lr

0800766a <__retarget_lock_release_recursive>:
 800766a:	4770      	bx	lr

0800766c <_init>:
 800766c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766e:	bf00      	nop
 8007670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007672:	bc08      	pop	{r3}
 8007674:	469e      	mov	lr, r3
 8007676:	4770      	bx	lr

08007678 <_fini>:
 8007678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767a:	bf00      	nop
 800767c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767e:	bc08      	pop	{r3}
 8007680:	469e      	mov	lr, r3
 8007682:	4770      	bx	lr
